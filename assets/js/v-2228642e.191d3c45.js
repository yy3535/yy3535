"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8375],{6242:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2228642e",path:"/Frontend/algorithm.html",title:"前端算法",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"面试算法考点",slug:"面试算法考点",children:[]},{level:2,title:"环境搭建",slug:"环境搭建",children:[]},{level:2,title:"基础算法-字符串",slug:"基础算法-字符串",children:[{level:3,title:"① 反转字符串中的单词 III",slug:"_1-反转字符串中的单词-iii",children:[]},{level:3,title:"② 计数二进制子串",slug:"_2-计数二进制子串",children:[]}]},{level:2,title:"基础算法-数组",slug:"基础算法-数组",children:[{level:3,title:"③ 公式运算（电话号码的组合）",slug:"_3-公式运算-电话号码的组合",children:[]},{level:3,title:"④ 归类运算（卡牌分组）",slug:"_4-归类运算-卡牌分组",children:[]},{level:3,title:"⑤ 筛选运算（种花问题）",slug:"_5-筛选运算-种花问题",children:[]},{level:3,title:"⑥ 二进制运算（格雷编码）",slug:"_6-二进制运算-格雷编码",children:[]}]},{level:2,title:"正则表达式",slug:"正则表达式",children:[{level:3,title:"⑦ 重复的子字符串",slug:"_7-重复的子字符串",children:[]}]},{level:2,title:"排序类",slug:"排序类",children:[{level:3,title:"⑨ 冒泡排序（先把最大值冒出来，再把倒数第二大的冒出来，以此类推",slug:"_9-冒泡排序-先把最大值冒出来-再把倒数第二大的冒出来-以此类推",children:[]}]},{level:2,title:"基础算法之递归类",slug:"基础算法之递归类",children:[]},{level:2,title:"数据结构之栈",slug:"数据结构之栈",children:[{level:3,title:"⑰ 棒球比赛",slug:"_17-棒球比赛",children:[]}]},{level:2,title:"数据结构之队列",slug:"数据结构之队列",children:[{level:3,title:"⑲ 设计循环队列",slug:"_19-设计循环队列",children:[]}]},{level:2,title:"数据结构之链表",slug:"数据结构之链表",children:[{level:3,title:"㉑ 排序链表",slug:"_21-排序链表",children:[]}]},{level:2,title:"数据结构之矩阵",slug:"数据结构之矩阵",children:[{level:3,title:"㉓ 螺旋矩阵",slug:"_23-螺旋矩阵",children:[]}]},{level:2,title:"进阶算法（思想）",slug:"进阶算法-思想",children:[]},{level:2,title:"进阶算法之贪心算法",slug:"进阶算法之贪心算法",children:[]},{level:2,title:"进阶算法之动态规划",slug:"进阶算法之动态规划",children:[{level:3,title:"㉝ 不同路径II",slug:"_33-不同路径ii",children:[]},{level:3,title:"㉞ K站中转内最便宜的航班",slug:"_34-k站中转内最便宜的航班",children:[]}]},{level:2,title:"【面试题】",slug:"【面试题】",children:[{level:3,title:"【7】找出一个长字符串中连续重复次数最多的字符，如：在\"nddemdereeeffetcssssfggddregg\"中's'重复出现次数(4)次最多，因此's'为连续重复出现最长的字符。",slug:"【7】找出一个长字符串中连续重复次数最多的字符-如-在-nddemdereeeffetcssssfggddregg-中-s-重复出现次数-4-次最多-因此-s-为连续重复出现最长的字符。",children:[]},{level:3,title:"【10】实现一个promise延迟对象 defer",slug:"【10】实现一个promise延迟对象-defer",children:[]},{level:3,title:"【11】如何终止promise链？",slug:"【11】如何终止promise链",children:[]},{level:3,title:"【12】Promise.all",slug:"【12】promise-all",children:[]},{level:3,title:"【13】Promise.race",slug:"【13】promise-race",children:[]},{level:3,title:"【14】如何终止一个promise(中断promise) promise超时",slug:"【14】如何终止一个promise-中断promise-promise超时",children:[]}]}],filePathRelative:"Frontend/algorithm.md",git:{updatedTime:1630230131e3,contributors:[]}}},9901:(n,s,a)=>{a.r(s),a.d(s,{default:()=>xo});var e=a(6252),t=a(4327),l=a(629),o=a(8564),p=a(9107),c=a(8267),_=a(4676),u=a(4300),r=a(3546),k=a(8924),i=a(1486),b=a(9579),m=a(6901),U=a(9293),d=a(3292),f=a(220);const g=(0,e._)("h1",{id:"前端算法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#前端算法","aria-hidden":"true"},"#"),(0,e.Uk)(" 前端算法")],-1),w={class:"table-of-contents"},y=(0,e.Uk)("面试算法考点"),h=(0,e.Uk)("环境搭建"),v=(0,e.Uk)("基础算法-字符串"),x=(0,e.Uk)("① 反转字符串中的单词 III"),j=(0,e.Uk)("② 计数二进制子串"),A=(0,e.Uk)("基础算法-数组"),W=(0,e.Uk)("③ 公式运算（电话号码的组合）"),M=(0,e.Uk)("④ 归类运算（卡牌分组）"),N=(0,e.Uk)("⑤ 筛选运算（种花问题）"),P=(0,e.Uk)("⑥ 二进制运算（格雷编码）"),C=(0,e.Uk)("正则表达式"),R=(0,e.Uk)("⑦ 重复的子字符串"),L=(0,e.Uk)("排序类"),F=(0,e.Uk)("⑨ 冒泡排序（先把最大值冒出来，再把倒数第二大的冒出来，以此类推"),S=(0,e.Uk)("基础算法之递归类"),Q=(0,e.Uk)("数据结构之栈"),E=(0,e.Uk)("⑰ 棒球比赛"),I=(0,e.Uk)("数据结构之队列"),q=(0,e.Uk)("⑲ 设计循环队列"),H=(0,e.Uk)("数据结构之链表"),T=(0,e.Uk)("㉑ 排序链表"),B=(0,e.Uk)("数据结构之矩阵"),G=(0,e.Uk)("㉓ 螺旋矩阵"),O=(0,e.Uk)("进阶算法（思想）"),z=(0,e.Uk)("进阶算法之贪心算法"),D=(0,e.Uk)("进阶算法之动态规划"),$=(0,e.Uk)("㉝ 不同路径II"),X=(0,e.Uk)("㉞ K站中转内最便宜的航班"),K=(0,e.Uk)("【面试题】"),J=(0,e.Uk)("【7】找出一个长字符串中连续重复次数最多的字符，如：在\"nddemdereeeffetcssssfggddregg\"中's'重复出现次数(4)次最多，因此's'为连续重复出现最长的字符。"),Y=(0,e.Uk)("【10】实现一个promise延迟对象 defer"),Z=(0,e.Uk)("【11】如何终止promise链？"),V=(0,e.Uk)("【12】Promise.all"),nn=(0,e.Uk)("【13】Promise.race"),sn=(0,e.Uk)("【14】如何终止一个promise(中断promise) promise超时"),an=(0,e._)("ul",null,[(0,e._)("li",null,"leetcode刷题")],-1),en=(0,e._)("h2",{id:"面试算法考点",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#面试算法考点","aria-hidden":"true"},"#"),(0,e.Uk)(" 面试算法考点")],-1),tn=(0,e._)("ul",null,[(0,e._)("li",null,"见多识广（每个类型都要能说出一二三来，具体细节不要纠结）"),(0,e._)("li",null,"反应迅速（快速用js实现出来栈，队列等）"),(0,e._)("li",null,"就算立马写不出来，至少快速说出思路")],-1),ln=(0,e._)("h2",{id:"环境搭建",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#环境搭建","aria-hidden":"true"},"#"),(0,e.Uk)(" 环境搭建")],-1),on=(0,e._)("ul",null,[(0,e._)("li",null,"下载源码(.babelrc .eslintrc.js package.json)"),(0,e._)("li",null,"npm instll"),(0,e._)("li",null,[(0,e.Uk)("使用源码 "),(0,e._)("ul",null,[(0,e._)("li",null,"master分支：环境搭建原始内容(git checkout master)"),(0,e._)("li",null,"dev分支：所有源码(git checkout dev)")])]),(0,e._)("li",null,[(0,e.Uk)("检验代码是否正常 "),(0,e._)("code",null,"npm test")])],-1),pn=(0,e._)("h2",{id:"基础算法-字符串",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#基础算法-字符串","aria-hidden":"true"},"#"),(0,e.Uk)(" 基础算法-字符串")],-1),cn=(0,e._)("h3",{id:"_1-反转字符串中的单词-iii",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_1-反转字符串中的单词-iii","aria-hidden":"true"},"#"),(0,e.Uk)(" ① 反转字符串中的单词 III")],-1),_n=(0,e._)("p",null,"给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。",-1),un=(0,e._)("p",null,"示例 1:",-1),rn=(0,e._)("p",null,'输入: "Let\'s take LeetCode contest" 输出: "s\'teL ekat edoCteeL tsetnoc"  注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。',-1),kn=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("注意点 "),(0,e._)("ul",null,[(0,e._)("li",null,"让代码更加优雅（不要产生多余的变量）")])])],-1),bn=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"reverseWords"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"split"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"' '"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"split"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"reverse"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"' '"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),mn=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"reverseWords"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 体现出split两种用法都清楚"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"split"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"\\s"),(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-flags"},"g")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"split"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"reverse"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"' '"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),Un=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"reverseWords"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 使用match来做（大于一个单词或者'的集合的数组）"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" s"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"match"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"[\\w']+"),(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-flags"},"g")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"split"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"reverse"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"' '"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),dn=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"reverseWords"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"s"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 重写以上"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"''"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"match"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"[\\S]+"),(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-flags"},"g")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"split"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"reverse"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"' '"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br")])],-1),fn=(0,e._)("h3",{id:"_2-计数二进制子串",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_2-计数二进制子串","aria-hidden":"true"},"#"),(0,e.Uk)(" ② 计数二进制子串")],-1),gn=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("给定一个字符串 "),(0,e._)("span",{class:"token function"},"s，计算具有相同数量0和1的非空"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("连续"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("子字符串的数量，并且这些子字符串中的所有"),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("和所有"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("都是组合在一起的。\n\n重复出现的子串要计算它们出现的次数。\n\n示例 "),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"00110011"'),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"6"),(0,e.Uk)("\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 有"),(0,e._)("span",{class:"token number"},"6"),(0,e.Uk)("个子串具有相同数量的连续"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("和"),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("：“"),(0,e._)("span",{class:"token number"},"0011"),(0,e.Uk)("”，“"),(0,e._)("span",{class:"token number"},"01"),(0,e.Uk)("”，“"),(0,e._)("span",{class:"token number"},"1100"),(0,e.Uk)("”，“"),(0,e._)("span",{class:"token number"},"10"),(0,e.Uk)("”，“"),(0,e._)("span",{class:"token number"},"0011"),(0,e.Uk)("” 和 “"),(0,e._)("span",{class:"token number"},"01"),(0,e.Uk)("”。\n\n请注意，一些重复出现的子串要计算它们出现的次数。\n\n另外，“"),(0,e._)("span",{class:"token number"},"00110011"),(0,e.Uk)("”不是有效的子串，因为所有的"),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("（和"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("）没有组合在一起。\n示例 "),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"10101"'),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)("\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 有"),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)("个子串：“"),(0,e._)("span",{class:"token number"},"10"),(0,e.Uk)("”，“"),(0,e._)("span",{class:"token number"},"01"),(0,e.Uk)("”，“"),(0,e._)("span",{class:"token number"},"10"),(0,e.Uk)("”，“"),(0,e._)("span",{class:"token number"},"01"),(0,e.Uk)("”，它们具有相同数量的连续"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("和"),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("。\n注意：\n\ns"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length 在"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("到"),(0,e._)("span",{class:"token number"},"50"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"000"),(0,e.Uk)("之间。\ns 只包含“"),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("”或“"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("”字符。\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br")])],-1),wn=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("写出所有情况，然后找出规律 "),(0,e._)("ul",null,[(0,e._)("li",null,"00110011---\x3e0011"),(0,e._)("li",null,"0110011 ---\x3e01"),(0,e._)("li",null,"110011 ---\x3e1100"),(0,e._)("li",null,"10011 ---\x3e10"),(0,e._)("li",null,"0011 ---\x3e0011"),(0,e._)("li",null,"011 ---\x3e01"),(0,e._)("li",null,"11 ---\x3e"),(0,e._)("li",null,"1 ---\x3e")])])],-1),yn=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"countBinarySubstrings"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 建立数据结构，堆栈，保存数据"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 给一个字符串返回第一个符合条件的子串"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"match"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"match"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"^(0+|1+)"),(0,e._)("span",{class:"token regex-delimiter"},"/")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token comment"},"// 与运算1变0，0变1"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" o "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"^"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"toString"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"repeat"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token comment"},"// 正则对象中可以使用模板字符串来用变量"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" reg "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"RegExp"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token template-string"},[(0,e._)("span",{class:"token template-punctuation string"},"`"),(0,e._)("span",{class:"token string"},"^("),(0,e._)("span",{class:"token interpolation"},[(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,e.Uk)("j"),(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,e._)("span",{class:"token interpolation"},[(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,e.Uk)("o"),(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,e._)("span",{class:"token string"},")"),(0,e._)("span",{class:"token template-punctuation string"},"`")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("reg"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"test"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token comment"},"// 返回匹配到的第一个结果"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" RegExp"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("$"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"''"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 依次把最前面的数字去掉"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" sub "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"match"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"slice"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("sub"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("sub"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" r\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"countBinarySubstrings"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'00101'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br")])],-1),hn=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("知识点 "),(0,e._)("ul",null,[(0,e._)("li",null,"slice"),(0,e._)("li",null,"match"),(0,e._)("li",null,"repeat"),(0,e._)("li",null,"push"),(0,e._)("li",null,"RegExp")])])],-1),vn=(0,e._)("h2",{id:"基础算法-数组",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#基础算法-数组","aria-hidden":"true"},"#"),(0,e.Uk)(" 基础算法-数组")],-1),xn=(0,e._)("h3",{id:"_3-公式运算-电话号码的组合",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_3-公式运算-电话号码的组合","aria-hidden":"true"},"#"),(0,e.Uk)(" ③ 公式运算（电话号码的组合）")],-1),jn=(0,e._)("p",null,"给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。",-1),An=(0,e._)("p",null,"给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。",-1),Wn=(0,e._)("p",null,[(0,e._)("img",{src:t,alt:"电话号码组合"})],-1),Mn=(0,e._)("p",null,"示例:",-1),Nn=(0,e._)("p",null,'输入："23" 输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]. 说明: 尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。',-1),Pn=(0,e._)("ul",null,[(0,e._)("li",null,"找出规律：只要前两项合并好,替代原来数组，再继续和后面合并"),(0,e._)("li",null,"写出程序伪代码")],-1),Cn=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 对输入做处理，如果小于1返回空（LeetCode测试用例）"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 建立电话号码键盘映射"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" map "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'abc'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'def'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'ghi'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'jkl'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'mno'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'pqrs'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'tuv'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'wxyz'"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 如果只给了一个按键，直接把按键内容取出来并按单个字符分组就可以了（LeetCode测试用例）"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"split"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 把输入字符串按单字符分隔变成数组，234=>[2,3,4]"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" num "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"split"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 保存键盘映射后的字母内容，如 23=>['abc','def']"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" code "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n  num"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"forEach"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      code"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"comb"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 临时变量用来保存前两个组合的结果"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" tmp "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 最外层的循环是遍历第一个元素，里层的循环是遍历第二个元素"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" il "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" il"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" jl "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" jl"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        tmp"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token template-string"},[(0,e._)("span",{class:"token template-punctuation string"},"`"),(0,e._)("span",{class:"token interpolation"},[(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,e._)("span",{class:"token interpolation"},[(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,e._)("span",{class:"token template-punctuation string"},"`")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"splice"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" tmp"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token function"},"comb"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" tmp\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 函数体应该返回第一个，最终只剩一个"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"comb"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("code"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br")])],-1),Rn=(0,e._)("h3",{id:"_4-归类运算-卡牌分组",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_4-归类运算-卡牌分组","aria-hidden":"true"},"#"),(0,e.Uk)(" ④ 归类运算（卡牌分组）")],-1),Ln=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("给定一副牌，每张牌上都写着一个整数。\n\n此时，你需要选定一个数字 "),(0,e._)("span",{class:"token constant"},"X"),(0,e.Uk)("，使我们可以将整副牌按下述规则分成 "),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(" 组或更多组：\n\n每组都有 "),(0,e._)("span",{class:"token constant"},"X"),(0,e.Uk)(" 张牌。\n组内所有的牌上都写着相同的整数。\n仅当你可选的 "),(0,e._)("span",{class:"token constant"},"X"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(" 时返回 "),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("。\n\n \n\n示例 "),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("：\n\n输入："),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出："),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("\n解释：可行的分组是 "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("，"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("，"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("，"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n示例 "),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("：\n\n输入："),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出："),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n解释：没有满足要求的分组。\n示例 "),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("：\n\n输入："),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出："),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n解释：没有满足要求的分组。\n示例 "),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)("：\n\n输入："),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出："),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("\n解释：可行的分组是 "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n示例 "),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("：\n\n输入："),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出："),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("\n解释：可行的分组是 "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("，"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("，"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n\n提示：\n\n"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(" deck"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"10000"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(" deck"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"10000"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br")])],-1),Fn=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("看题目 "),(0,e._)("ul",null,[(0,e._)("li",null,"答案都是排序的，所以需要先排序"),(0,e._)("li",null,[(0,e.Uk)("相同数字过多需要拆分，是最大公约数即可 "),(0,e._)("img",{src:l,alt:"最大公约数"})])])])],-1),Sn=(0,e.Uk)("最大公约数：gcd(a,b) = gcd(b,a mod b)"),Qn=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// "),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 求最大公约数"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"gcd"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("b")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("b"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" a\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"else"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"gcd"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("a"),(0,e._)("span",{class:"token operator"},"%"),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"//   卡牌排序，排序的目的就是为了让相同的牌排在一起方便我们分组"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" str"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"sort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 分组(单张或者多张)"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" group"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"match"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"(\\d)\\1+|\\d"),(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-flags"},"g")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"while"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("group"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" a"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("group"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"shift"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" b"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("group"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"shift"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" v"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token function"},"gcd"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("v"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"else"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token comment"},"// 结果放进去跟下一个比"),(0,e.Uk)("\n      group"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"unshift"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'0'"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"repeat"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("v"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" group"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)("group"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},":"),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br")])],-1),En=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"hasGroupsSizeX"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"deck"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(" map "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" minLen "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Number"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token constant"},"MAX_SAFE_INTEGER"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" result\n\n  "),(0,e._)("span",{class:"token comment"},"// 卡牌按值分组"),(0,e.Uk)("\n  deck"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"forEach"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  \n  "),(0,e._)("span",{class:"token comment"},"// 获取数量最少的卡牌数量"),(0,e.Uk)("\n  Object"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"keys"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("map"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"forEach"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" minLen"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      minLen "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n  "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("minLen "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n  "),(0,e._)("span",{class:"token comment"},"// 从每组2张开始查看能否分组，能分组则返回true "),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(" minLen"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    result "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("\n    Object"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"keys"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("map"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"forEach"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("map"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"%"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"!=="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        result "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" result\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  \n  "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br")])],-1),In=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"hasGroupsSizeX"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"deck"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 统计数字个数"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(" numMap "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" deck"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("numMap"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("deck"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            numMap"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("deck"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            numMap"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("deck"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(" valuesArr "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Object"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"values"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("numMap"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"sort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" b")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(" a "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" b "),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// console.log('valuesArr', valuesArr)"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 也就是说最大公约数得大于 1"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("valuesArr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"find"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"value"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"gcd"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" valuesArr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" value "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 欧里几德算法，辗转相除法。"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"gcd"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" b")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("b "),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" a"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"parseInt"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("a "),(0,e._)("span",{class:"token operator"},"%"),(0,e.Uk)(" b"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"gcd"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br")])],-1),qn=(0,e._)("h3",{id:"_5-筛选运算-种花问题",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_5-筛选运算-种花问题","aria-hidden":"true"},"#"),(0,e.Uk)(" ⑤ 筛选运算（种花问题）")],-1),Hn=(0,e.Uk)("注意max加1时要记得那块地变成1"),Tn=(0,e.Uk)(" ```js 假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。 "),Bn=(0,e._)("p",null,"给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。",-1),Gn=(0,e._)("p",null,"示例 1:",-1),On=(0,e._)("p",null,"输入: flowerbed = [1,0,0,0,1], n = 1 输出: True 示例 2:",-1),zn=(0,e._)("p",null,"输入: flowerbed = [1,0,0,0,1], n = 2 输出: False 注意:",-1),Dn=(0,e._)("p",null,"数组内已种好的花不会违反种植规则。 输入的数组长度范围为 [1, 20000]。 n 是非负整数，且不会超过输入数组的大小。",-1),$n=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 技巧：把输入边长\n\n```js\n// 场景一\n[0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1]\n// 场景二\n[1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1]\n[0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1]\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br")])],-1),Xn=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("问题： "),(0,e._)("ul",null,[(0,e._)("li",null,"边界问题（前后加个0可解决）"),(0,e._)("li",null,"条件010 [0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1] +1 | |")])])],-1),Kn=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("flowerbed"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("n")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" max "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    flowerbed"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    flowerbed"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"unshift"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("flowerbed"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("flowerbed"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" flowerbed"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" flowerbed"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            flowerbed"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            max"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" max "),(0,e._)("span",{class:"token operator"},">="),(0,e.Uk)(" n\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br")])],-1),Jn=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("总结 "),(0,e._)("ul",null,[(0,e._)("li",null,"学会问题抽象"),(0,e._)("li",null,"学会数学建模思想"),(0,e._)("li",null,"学会动态输入（多找输入，而不是通过该代码）")])])],-1),Yn=(0,e._)("h3",{id:"_6-二进制运算-格雷编码",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_6-二进制运算-格雷编码","aria-hidden":"true"},"#"),(0,e.Uk)(" ⑥ 二进制运算（格雷编码）")],-1),Zn=(0,e.Uk)("1. parseInt(num,2)转换二进制为十进制"),Vn=(0,e._)("br",null,null,-1),ns=(0,e.Uk)("2. 注意两个连续的数值仅有一个位数的差异"),ss=(0,e.Uk)(" ```js 格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。 "),as=(0,e._)("p",null,"给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。",-1),es=(0,e._)("p",null,"示例 1:",-1),ts=(0,e._)("p",null,"输入: 2 输出: [0,1,3,2] 解释: 00 - 0 01 - 1 11 - 3 10 - 2",-1),ls=(0,e._)("p",null,"对于给定的 n，其格雷编码序列并不唯一。 例如，[0,2,3,1] 也是一个有效的格雷编码序列。",-1),os=(0,e._)("p",null,"00 - 0 10 - 2 11 - 3 01 - 1 示例 2:",-1),ps=(0,e._)("p",null,"输入: 0 输出: [0] 解释: 我们定义格雷编码序列必须以 0 开头。   给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。   因此，当 n = 0 时，其格雷编码序列为 [0]。",-1),cs=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"![格雷编码](./img/Gray.jpg)\n```js\nexport default (n)=>{\n  // 递归函数，用来算输入为n的格雷编码序列\n  let gray = function(n){\n    if( n === 1){\n      return ['0','1'];\n    } else {\n      let prev = gray(n-1);\n      let res = [];\n      let max = Math.pow(2,n)-1;\n      for(let i =0;i<prev.length;i++){\n        res[i] = `0${prev[i]}`;\n        res[max - i] = `1${prev[i]}`;\n      }\n      return res;\n    }\n  }\n  if(n === 0){\n    return [0]\n  }\n  var res = gray(n);\n  return res.map(item => {\n    return parseInt(item,2)\n  })\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br")])],-1),_s=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"grayCode"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"while"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n"),(0,e._)("span",{class:"token operator"},"--"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" temp"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n              arr"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n              "),(0,e._)("span",{class:"token keyword"},"continue"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n          \n          \n          "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n              "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"<"),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" num"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token function"},"parseInt"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token template-string"},[(0,e._)("span",{class:"token template-punctuation string"},"`"),(0,e._)("span",{class:"token interpolation"},[(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,e._)("span",{class:"token interpolation"},[(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"${"),(0,e.Uk)("j"),(0,e._)("span",{class:"token interpolation-punctuation punctuation"},"}")]),(0,e._)("span",{class:"token template-punctuation string"},"`")]),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                  temp"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("num"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n              "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n          arr"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("temp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br")])],-1),us=(0,e._)("ul",null,[(0,e._)("li",null,"发现规律，动态输入")],-1),rs=(0,e._)("h2",{id:"正则表达式",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#正则表达式","aria-hidden":"true"},"#"),(0,e.Uk)(" 正则表达式")],-1),ks=(0,e._)("h3",{id:"_7-重复的子字符串",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_7-重复的子字符串","aria-hidden":"true"},"#"),(0,e.Uk)(" ⑦ 重复的子字符串")],-1),is=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过"),(0,e._)("span",{class:"token number"},"10000"),(0,e.Uk)("。\n\n示例 "),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"abab"'),(0,e.Uk)("\n\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" True\n\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 可由子字符串 "),(0,e._)("span",{class:"token string"},'"ab"'),(0,e.Uk)(" 重复两次构成。\n示例 "),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"aba"'),(0,e.Uk)("\n\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" False\n示例 "),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"abcabcabcabc"'),(0,e.Uk)("\n\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" True\n\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 可由子字符串 "),(0,e._)("span",{class:"token string"},'"abc"'),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"重复四次构成。"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("或者子字符串 "),(0,e._)("span",{class:"token string"},'"abcabc"'),(0,e.Uk)(" 重复两次构成。"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br")])],-1),bs=(0,e._)("ul",null,[(0,e._)("li",null,"用正则去做 /^(\\w+)\\1+$/即为对应正则表达式")],-1),ms=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" reg"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"^(\\w+)\\1+$"),(0,e._)("span",{class:"token regex-delimiter"},"/")]),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" reg"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"test"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])],-1),Us=(0,e.Uk)(" ### ⑧正则表达式匹配 ```js 给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。 "),ds=(0,e._)("p",null,"'.' 匹配任意单个字符 '*' 匹配零个或多个前面的那一个元素 所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。",-1),fs=(0,e._)("p",null,"说明:",-1),gs=(0,e._)("p",null,"s 可能为空，且只包含从 a-z 的小写字母。 p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。 示例 1:",-1),ws=(0,e._)("p",null,'输入: s = "aa" p = "a" 输出: false 解释: "a" 无法匹配 "aa" 整个字符串。 示例 2:',-1),ys=(0,e._)("p",null,"输入: s = \"aa\" p = \"a*\" 输出: true 解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。 示例 3:",-1),hs=(0,e._)("p",null,[(0,e.Uk)('输入: s = "ab" p = ".'),(0,e._)("em",null,'" 输出: true 解释: ".'),(0,e.Uk)("\" 表示可匹配零个或多个（'*'）任意字符（'.'）。 示例 4:")],-1),vs=(0,e._)("p",null,[(0,e.Uk)('输入: s = "aab" p = "c'),(0,e._)("em",null,"a"),(0,e.Uk)("b\" 输出: true 解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 \"aab\"。 示例 5:")],-1),xs=(0,e._)("p",null,[(0,e.Uk)('输入: s = "mississippi" p = "mis'),(0,e._)("em",null,"is"),(0,e.Uk)('p*." 输出: false')],-1),js=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 一个字符一个字符对比，对比完一个扔掉一组，然后重复刚才的动作\n- 三种情况：无模式，有模式*,有模式.\n\n```js\nexport default (s,p)=>{\n    let isMatch=(s,p)=>{\n        // 边界情况，如果s和p都为空，说明处理结束，返回true，否则返回false\n        if(p.length<=0){\n            return !s.length\n        }\n        // 判断p模式字符串的第一个字符和s字符串的第一个字符是不是匹配\n        let match=false\n        if(s.length>0&&(p[0]===s[0]||p[0]==='.')){\n            match=true\n        }\n        // p有模式的，字符后面有*\n        if(p.length>1&&p[1]==='*'){\n            // 第一种情况：s*匹配0个字符\n            // 第二种情况：s*匹配1个字符，递归下去，用来表示s*匹配多个s\n            return isMatch(s,p.slice(2))||(match && isMatch(s.slice(1),p))\n        }else{// 字符后面没有*\n            return match && isMatch(s.slice(1),p.slice(1))\n        }\n    }\n    return isMatch(s,p)\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br")])],-1),As=(0,e._)("h2",{id:"排序类",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#排序类","aria-hidden":"true"},"#"),(0,e.Uk)(" 排序类")],-1),Ws=(0,e._)("p",null,[(0,e._)("img",{src:o,alt:"各类排序"})],-1),Ms=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("时间复杂度 "),(0,e._)("ul",null,[(0,e._)("li",null,"运行的次数(常数：O(1)，线性关系O(n),倍数关系：O(n*2))")])]),(0,e._)("li",null,[(0,e.Uk)("空间复杂度 "),(0,e._)("ul",null,[(0,e._)("li",null,"占用的内存(常数：o1,线性关系O(n),倍数关系O(n*2))")])])],-1),Ns=(0,e._)("h3",{id:"_9-冒泡排序-先把最大值冒出来-再把倒数第二大的冒出来-以此类推",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_9-冒泡排序-先把最大值冒出来-再把倒数第二大的冒出来-以此类推","aria-hidden":"true"},"#"),(0,e.Uk)(" ⑨ 冒泡排序（先把最大值冒出来，再把倒数第二大的冒出来，以此类推")],-1),Ps=(0,e._)("p",null,"跟后一个元素对比，如果较大，就交换，一直把最大的换到最后一个，然后重复length-1次。",-1),Cs=["src"],Rs=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"bubbleSort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("        "),(0,e._)("span",{class:"token comment"},"// 相邻元素两两对比"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" temp "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("        "),(0,e._)("span",{class:"token comment"},"// 元素交换"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" temp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br")])],-1),Ls=(0,e.Uk)(" ### ⑩ 选择排序（选中最小的值，和第一个交换，再选中第二小的值，和第二个交换，以此类推） - 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。 - 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 - 重复第二步，直到所有元素均排序完毕。 "),Fs=["src"],Ss=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"selectionSort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" minIndex"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" temp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        minIndex "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("minIndex"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("     "),(0,e._)("span",{class:"token comment"},"// 寻找最小的数"),(0,e.Uk)("\n                minIndex "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" j"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("                 "),(0,e._)("span",{class:"token comment"},"// 将最小数的索引保存"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        temp "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("minIndex"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("minIndex"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" temp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br")])],-1),Qs=(0,e.Uk)(" ### ⑪ 922.按奇偶排序 ```js 给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。 "),Es=(0,e._)("p",null,"对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。",-1),Is=(0,e._)("p",null,"你可以返回任何满足上述条件的数组作为答案。",-1),qs=(0,e._)("p",null,null,-1),Hs=(0,e._)("p",null,"示例：",-1),Ts=(0,e._)("p",null,"输入：[4,2,5,7] 输出：[4,5,2,7] 解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。",-1),Bs=(0,e._)("p",null,"提示：",-1),Gs=(0,e._)("p",null,"2 <= A.length <= 20000 A.length % 2 == 0 0 <= A[i] <= 1000",-1),Os=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"```js\nexport default (arr)=>{\n    // 升序排序\n    arr.sort((a,b)=>a-b)\n    // 声明一个空数组用来存储奇偶排序后的数组\n    let r=[]\n    // 记录奇数，偶数位下标\n    let odd=1\n    let even=0\n    // 对数组进行遍历\n    arr.forEach(item=>{\n        if(item%2===1){\n            r[odd]=item\n            odd+=2\n        }else{\n            r[even]=item\n            even+=2\n        }\n    })\n    return r\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br")])],-1),zs=(0,e._)("p",null,"sort(compareFunction)",-1),Ds=(0,e._)("ul",null,[(0,e._)("li",null,'如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。例如 "Banana" 会被排列到 "cherry" 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在Unicode顺序上 "80" 要比 "9" 要靠前。'),(0,e._)("li",null,"指定了compareFunction，a-b从小到大，b-a从大到小")],-1),$s=(0,e.Uk)(" ### ⑫ 数组中的第K个最大元素 ```js 在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。 "),Xs=(0,e._)("p",null,"示例 1:",-1),Ks=(0,e._)("p",null,"输入: [3,2,1,5,6,4] 和 k = 2 输出: 5 示例 2:",-1),Js=(0,e._)("p",null,"输入: [3,2,3,1,2,4,5,5,6] 和 k = 4 输出: 4 说明:",-1),Ys=(0,e._)("p",null,"你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。",-1),Zs=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"```js\nexport default (arr)=>{\n    return arr.sort((a,b)=>b-a)[k-1]\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])],-1),Vs=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 更高性能的办法"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("len"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("len"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"--"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            temp"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("temp"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("temp\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("len"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("k"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br")])],-1),na=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"findKthLargest"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("len"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("len"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("len"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" temp"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("temp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)("k"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("len"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br")])],-1),sa=(0,e._)("ul",null,[(0,e._)("li",null,"一定要吃透基本排序法")],-1),aa=(0,e.Uk)("注意后面的第一个和第二个的间距没有遍历到，需要单独判断"),ea=(0,e.Uk)(" ### ⑬ 最大间距 ```js 给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。 "),ta=(0,e._)("p",null,"如果数组元素个数小于 2，则返回 0。",-1),la=(0,e._)("p",null,"示例 1:",-1),oa=(0,e._)("p",null,"输入: [3,6,9,1] 输出: 3 解释: 排序后的数组是 [1,3,6,9], 其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。 示例 2:",-1),pa=(0,e._)("p",null,"输入: [10] 输出: 0 解释: 数组元素个数小于 2，因此返回 0。 说明:",-1),ca=(0,e._)("p",null,"你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。 请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。",-1),_a=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"```js\nvar maximumGap = function(arr) {\n    if(arr.length<2) return 0\n    let temp,max=0,space;\n    for(let i=0;i<arr.length-1;i++){\n        for(let j=0;j<arr.length-1-i;j++){\n            if(arr[j]>arr[j+1]){\n                temp=arr[j];\n                arr[j]=arr[j+1];\n                arr[j+1]=temp;\n            }\n        }\n        if(i>0){\n            space=arr[arr.length-i]-arr[arr.length-i-1];\n            max=max>space?max:space;\n        }\n    }\n    return Math.max(max, arr[1] - arr[0])\n};\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br")])],-1),ua=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" max "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" space\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" len"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" tmp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"--"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            tmp "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("tmp "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" tmp\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            space "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("space "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" max"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                max "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" space\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"max"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("max"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br")])],-1),ra=(0,e.Uk)("注意过滤掉负整数，注意边界情况"),ka=(0,e.Uk)(" ### ⑭ 缺失的第一个正数 ```js 给定一个未排序的整数数组，找出其中`没有出现的``最小的``正整数`。 "),ia=(0,e._)("p",null,"示例 1:",-1),ba=(0,e._)("p",null,"输入: [1,2,0] 输出: 3 示例 2:",-1),ma=(0,e._)("p",null,"输入: [3,4,-1,1] 输出: 2 示例 3:",-1),Ua=(0,e._)("p",null,"输入: [7,8,9,11,12] 输出: 1 说明:",-1),da=(0,e._)("p",null,"你的算法的时间复杂度应为O(n)，并且只能使用常数级别的空间。",-1),fa=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"\n- 第一个是1,返回1。第一个不是1，遍历数组，如果两个数值差值大于一，返回第一个数值+1。\n\n```js\nexport default (arr)=>{\n    // 过滤掉非正整数\n    arr=arr.filter(item=>item>0)\n    // 正整数数组是不是为空\n    if(arr.length){\n        // 升序，方便取最小值\n        arr.sort((a,b)=>a-b)\n        // 第一个元素不为1，返回1\n        if(arr[0]!==1){\n            return 1\n        }else{\n            // 从左边开始遍历，只要下一个元素和当前元素差值>1，返回当前元素加1\n            for(let i=0,len=arr.length-1;i<len;i++){\n                if(arr[i+1]-arr[i]>1){\n                    return arr[i]+1\n                }\n            }\n            // 如果是连续正整数，则返回最后一个元素加1\n            return arr.pop()+1\n        }\n    }else{\n        return 1\n    }\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br")])],-1),ga=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 使用选择排序"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 过滤掉非正整数"),(0,e.Uk)("\n    arr"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"filter"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)("item"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 实现选择排序，先拿到最小值，如果第一个元素不是1直接返回1，如果是1，就要比相邻元素差值"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("len"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("min"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("len"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        min"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("len"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("min"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" c"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("min\n                min"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n                arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("c\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("min\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"else"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("min"),(0,e._)("span",{class:"token operator"},"!=="),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"+"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},":"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br")])],-1),wa=(0,e._)("h2",{id:"基础算法之递归类",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#基础算法之递归类","aria-hidden":"true"},"#"),(0,e.Uk)(" 基础算法之递归类")],-1),ya=(0,e.Uk)(" ### ⑮ 复原IP地址 ```js 给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。 "),ha=(0,e._)("p",null,"示例:",-1),va=(0,e._)("p",null,'输入: "25525511135" 输出: ["255.255.11.135", "255.255.111.35"]',-1),xa=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- IP由4部分构成，每部分范围0~255（递归）\n- 所有情况都列出来(每个子字符串都可以是一位数到三位数)，然后按条件筛选\n```js\nexport default (str)=>{\n    // 保存所有符合条件的ip\n    let r=[]\n    // 递归函数\n    let search=(cur,sub)=>{\n        if(cur.length===4&&cur.join('')===str){\n            r.push(cur.join('.'))\n        }else{\n            for(let i=0,len=Math.min(3,sub.length),tmp;i<len;i++){\n                tmp=sub.substr(0,i+1)\n                if(tmp<256){\n                    search(cur.concat([tmp]),sub.substr(i+1))\n                }\n            }\n        }\n    }\n    search([],str)\n    return r\n}\n\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br")])],-1),ja=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("递归的本质（就是一个while循环，但可以有多个条件或地方调用） "),(0,e._)("ul",null,[(0,e._)("li",null,"每一个处理过程是相同的"),(0,e._)("li",null,"输入输出是相同的"),(0,e._)("li",null,"处理次数未知")])])],-1),Aa=(0,e.Uk)(" ### ⑯ 与所有单词相关联的字符串 ```js 给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。 "),Wa=(0,e._)("p",null,"注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。",-1),Ma=(0,e._)("p",null,"示例 1：",-1),Na=(0,e._)("p",null,'输入： s = "barfoothefoobarman", words = ["foo","bar"] 输出：[0,9] 解释： 从索引 0 和 9 开始的子串分别是 "barfoor" 和 "foobar" 。 输出的顺序不重要, [9,0] 也是有效答案。 示例 2：',-1),Pa=(0,e._)("p",null,'输入： s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"] 输出：[]',-1),Ca=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 递归循环来计算出所有的words组合，然后匹配字符串即可。\n```js\nexport default (str,words)=>{\n    // 保存结果\n    let result=[]\n    // 记录数组的长度，做边界条件计算\n    let num=words.length\n    // 递归函数体\n    let range=(r,_arr)=>{\n        if(r.length===num){\n            result.push(r)\n        }else{\n            _arr.forEach((item,idx)=>{\n                // 当前元素踢出去，留下剩下的\n                let tmp=[].concat(_arr)\n                tmp.splice(idx,1)\n                range(r.concat(item),tmp)\n            })\n        }\n    }\n    range([], words)\n    // [0,9,-1]\n    return result.map(item=>{\n        return str.indexOf(item.join(''))\n    }).filter(item=>item!==-1).sort()\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br")])],-1),Ra=(0,e._)("h2",{id:"数据结构之栈",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#数据结构之栈","aria-hidden":"true"},"#"),(0,e.Uk)(" 数据结构之栈")],-1),La=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("栈的概念 "),(0,e._)("ul",null,[(0,e._)("li",null,"线性表，运算受限（仅允许一端的插入和删除）")])])],-1),Fa=(0,e._)("h3",{id:"_17-棒球比赛",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_17-棒球比赛","aria-hidden":"true"},"#"),(0,e.Uk)(" ⑰ 棒球比赛")],-1),Sa=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("你现在是棒球比赛记录员。\n给定一个字符串列表，每个字符串可以是以下四种类型之一：\n"),(0,e._)("span",{class:"token number"},"1."),(0,e.Uk)("整数（一轮的得分）：直接表示您在本轮中获得的积分数。\n"),(0,e._)("span",{class:"token number"},"2."),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"+"'),(0,e.Uk)("（一轮的得分）：表示本轮获得的得分是前两轮有效 回合得分的总和。\n"),(0,e._)("span",{class:"token number"},"3."),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"D"'),(0,e.Uk)("（一轮的得分）：表示本轮获得的得分是前一轮有效 回合得分的两倍。\n"),(0,e._)("span",{class:"token number"},"4."),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"C"'),(0,e.Uk)("（一个操作，这不是一个回合的分数）：表示您获得的最后一个有效 回合的分数是无效的，应该被移除。\n\n每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。\n你需要返回你在所有回合中得分的总和。\n\n示例 "),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"5"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"2"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"C"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"D"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"+"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"30"),(0,e.Uk)("\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" \n第"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("分。总和是："),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("分。总和是："),(0,e._)("span",{class:"token number"},"7"),(0,e.Uk)("。\n操作"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("：第"),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("轮的数据无效。总和是："),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token number"},"10"),(0,e.Uk)("分（第"),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("轮的数据已被删除）。总数是："),(0,e._)("span",{class:"token number"},"15"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"10"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"15"),(0,e.Uk)("分。总数是："),(0,e._)("span",{class:"token number"},"30"),(0,e.Uk)("。\n示例 "),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token string"},'"5"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"-2"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"4"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"C"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"D"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"9"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"+"'),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},'"+"'),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"27"),(0,e.Uk)("\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" \n第"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("分。总和是："),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("分。总数是："),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)("分。总和是："),(0,e._)("span",{class:"token number"},"7"),(0,e.Uk)("。\n操作"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("：第"),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("轮的数据无效。总数是："),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)("分（第三轮的数据已被删除）。总和是："),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token number"},"9"),(0,e.Uk)("分。总数是："),(0,e._)("span",{class:"token number"},"8"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"6"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"9"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("分。总数是"),(0,e._)("span",{class:"token number"},"13"),(0,e.Uk)("。\n第"),(0,e._)("span",{class:"token number"},"7"),(0,e.Uk)("轮：你可以得到"),(0,e._)("span",{class:"token number"},"9"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"14"),(0,e.Uk)("分。总数是"),(0,e._)("span",{class:"token number"},"27"),(0,e.Uk)("。\n注意：\n\n输入列表的大小将介于"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("和"),(0,e._)("span",{class:"token number"},"1000"),(0,e.Uk)("之间。\n列表中的每个整数都将介于"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"30000"),(0,e.Uk)("和"),(0,e._)("span",{class:"token number"},"30000"),(0,e.Uk)("之间。\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br")])],-1),Qa=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 用数组来实现堆栈结构，pop,push(从后面添加，从后面删除)"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" result"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 上一轮的数据"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" pre1\n    "),(0,e._)("span",{class:"token comment"},"// 上上轮的数据"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" pre2\n    "),(0,e._)("span",{class:"token comment"},"// 对数组进行遍历，遍历的目的是处理得分"),(0,e.Uk)("\n    arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token function"},"forEach"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"switch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"case"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'C'"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"break"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"case"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'D'"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n                pre1"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("pre1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("pre1"),(0,e._)("span",{class:"token operator"},"*"),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"break"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"case"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"'+'"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n                pre1"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                pre2"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("pre2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("pre1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("pre1"),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)("pre2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"break"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"default"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n                result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("item"),(0,e._)("span",{class:"token operator"},"*"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"break"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"reduce"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("total"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("num")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("total"),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)("num"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br")])],-1),Ea=(0,e.Uk)(" ### ⑱ 85.最大矩形 ```js 给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。 "),Ia=(0,e._)("p",null,"示例:",-1),qa=(0,e._)("p",null,'输入: [ ["1","0","1","0","0"], ["1","0","1","1","1"], ["1","1","1","1","1"], ["1","0","0","1","0"] ] 输出: 6',-1),Ha=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"![最大矩形](./img/biggestRectangle.png)\n```js\nexport default (arr) => {\n  let result = []\n  let reg = /1{2,}/g\n  // 把二位数组重新表达，把相邻的1提取出来（起始点+截止点）\n  arr = arr.map(item => {\n    let str = item.join('')\n    let r = reg.exec(str)\n    let rs = []\n    while (r) {\n      rs.push([r.index, r.index + r[0].length - 1])\n      r = reg.exec(str)\n    }\n    return rs\n  })\n  // 通过递归计算相邻的矩阵\n  let maxRect = (arr, result, n = 1) => {\n    // 弹出第一行\n    let top = arr.pop()\n    // 弹出第二行\n    let next = arr.pop()\n    // 记录第一行的每一个起始点和截止点\n    let tt\n    // 记录第二行的每一个起始点和截止点\n    let nn\n    // 记录交叉的起始索引\n    let start\n    // 记录交叉的截止索引\n    let end\n    let width = 1\n    let maxWidth = 1\n    n++\n    for (let i = 0, il = top.length; i < il; i++) {\n      tt = top[i]\n      for (let j = 0, jl = next.length; j < jl; j++) {\n        nn = next[j]\n        width = Math.min(tt[1], nn[1]) - Math.max(tt[0], nn[0])\n        // 修改避免相邻两个数的差值为1（实际宽度为2）没有为start,end赋值导致的bug,应该加上=\n        if (width >= maxWidth) {\n          maxWidth = width\n          start = Math.max(tt[0], nn[0])\n          end = Math.min(tt[1], nn[1])\n        }\n      }\n    }\n    // 如果没有找到交叉点\n    if (start === undefined || end === undefined) {\n      if (n < 3) {\n        return false\n      } else {\n        width = top[0][1] - top[0][0] + 1\n        if (width > 1) {\n          result.push((n - 1) * width)\n        }\n      }\n    } else {\n      // 找到交叉点继续下一行\n      if (arr.length > 0) {\n        arr.push([\n          [start, end]\n        ])\n        maxRect(arr, result, n++)\n      } else {\n        // 从某一行一直计算到最后一行，这个时候start和end一直有值，所以不会进入到if层，这个时候n就是累计的行数（高），end-start+1就是宽\n        result.push(n * (end - start + 1))\n      }\n    }\n  }\n  while (arr.length > 1) {\n    maxRect([].concat(arr), result)\n    arr.pop()\n  }\n  // 取最大值\n  let max = 0\n  let item = result.pop()\n  while (item) {\n    if (item > max) {\n      max = item\n    }\n    item = result.pop()\n  }\n  return max > 0 ? max : -1\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"56"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"57"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"58"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"59"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"60"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"61"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"62"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"63"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"64"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"65"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"66"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"67"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"68"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"69"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"70"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"71"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"72"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"73"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"74"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"75"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"76"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"77"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"78"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"79"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"80"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"81"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"82"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"83"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"84"),(0,e._)("br")])],-1),Ta=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" result "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" reg "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"1{2,}"),(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-flags"},"g")]),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 把二位数组重新表达，把相邻的1提取出来（起始点+截止点）"),(0,e.Uk)("\n  arr "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" str "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"join"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" reg"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"exec"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" rs "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"while"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("r"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      rs"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("index"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("index "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n      r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" reg"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"exec"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" rs\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// [ [], [ [ 2, 4 ] ], [ [ 0, 4 ] ], [] ]"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 通过递归计算相邻的矩阵"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"maxRect"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 弹出第一行"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" top "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 弹出第二行"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 记录第一行的每一个起始点和截止点"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" tt\n    "),(0,e._)("span",{class:"token comment"},"// 记录第二行的每一个起始点和截止点"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" nn\n    "),(0,e._)("span",{class:"token comment"},"// 记录交叉的起始索引"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" start\n    "),(0,e._)("span",{class:"token comment"},"// 记录交叉的截止索引"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" end\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" width "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" maxWidth "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n    n"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" il "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" top"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" il"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      tt "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" top"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" jl "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" jl"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        nn "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" next"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n        width "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"min"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("tt"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" nn"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"max"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("tt"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" nn"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 修改避免相邻两个数的差值为1（实际宽度为2）没有为start,end赋值导致的bug,应该加上="),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("width "),(0,e._)("span",{class:"token operator"},">="),(0,e.Uk)(" maxWidth"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n          maxWidth "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" width\n          start "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"max"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("tt"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" nn"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n          end "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"min"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("tt"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" nn"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 如果没有找到交叉点"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("start "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"undefined"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" end "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"undefined"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        width "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" top"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" top"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("width "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n          result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(" width"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token comment"},"// 找到交叉点继续下一行"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("start"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" end"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"maxRect"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 从某一行一直计算到最后一行，这个时候start和end一直有值，所以不会进入到if层，这个时候n就是累计的行数（高），end-start+1就是宽"),(0,e.Uk)("\n        result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("end "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" start "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"while"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"maxRect"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"concat"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 取最大值"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" max "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" item "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"while"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("item "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" max"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      max "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" item\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    item "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" max "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(" max "),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"56"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"57"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"58"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"59"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"60"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"61"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"62"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"63"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"64"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"65"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"66"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"67"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"68"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"69"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"70"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"71"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"72"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"73"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"74"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"75"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"76"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"77"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"78"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"79"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"80"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"81"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"82"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"83"),(0,e._)("br")])],-1),Ba=(0,e._)("h2",{id:"数据结构之队列",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#数据结构之队列","aria-hidden":"true"},"#"),(0,e.Uk)(" 数据结构之队列")],-1),Ga=(0,e._)("ul",null,[(0,e._)("li",null,"特殊的线性表，只允许在表的前端删除，表的后端插入（先进先出）")],-1),Oa=(0,e._)("h3",{id:"_19-设计循环队列",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_19-设计循环队列","aria-hidden":"true"},"#"),(0,e.Uk)(" ⑲ 设计循环队列")],-1),za=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 "),(0,e._)("span",{class:"token constant"},"FIFO"),(0,e.Uk)("（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。\n\n循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。\n\n你的实现应该支持如下操作：\n\n"),(0,e._)("span",{class:"token function"},"MyCircularQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 构造器，设置队列长度为 k 。\nFront"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 从队首获取元素。如果队列为空，返回 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(" 。\nRear"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 获取队尾元素。如果队列为空，返回 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(" 。\n"),(0,e._)("span",{class:"token function"},"enQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 向循环队列插入一个元素。如果成功插入则返回真。\n"),(0,e._)("span",{class:"token function"},"deQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 从循环队列中删除一个元素。如果成功删除则返回真。\n"),(0,e._)("span",{class:"token function"},"isEmpty"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 检查循环队列是否为空。\n"),(0,e._)("span",{class:"token function"},"isFull"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" 检查循环队列是否已满。\n \n示例：\n\nMyCircularQueue circularQueue "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"MycircularQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 设置长度为 3"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"enQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 true"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"enQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 true"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"enQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 true"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"enQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 false，队列已满"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Rear"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 3"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"isFull"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 true"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"deQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 true"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"enQueue"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 true"),(0,e.Uk)("\n\ncircularQueue"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"Rear"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("  "),(0,e._)("span",{class:"token comment"},"// 返回 4"),(0,e.Uk)("\n\n提示：\n\n所有的值都在 "),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(" 至 "),(0,e._)("span",{class:"token number"},"1000"),(0,e.Uk)(" 的范围内；\n操作数将在 "),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(" 至 "),(0,e._)("span",{class:"token number"},"1000"),(0,e.Uk)(" 的范围内；\n请不要使用内置的队列库。\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br")])],-1),Da=(0,e._)("p",null,[(0,e._)("img",{src:p,alt:"队列1"})],-1),$a=(0,e.Uk)("注意添加数据时队尾指针要求余this.max，获取队尾数据时要队尾指针减一，并且如果指针减一小于0，即为数组最后一位"),Xa=(0,e.Uk)(" ```js export default class MyCircularQueue { constructor (k) { // 保存数据长度为k的数据结构 this.list=Array(k) // 队首的指针 this.front=0 // 队尾的指针 this.rear=0 // 队列的长度 this.max=k } enQueue (num) { if(this.isFull()){ return false }else{ this.list[this.rear]=num this.rear=(this.rear+1)%this.max return true } } deQueue () { let v=this.list[this.front] this.list[this.front]='' this.front=(this.front+1)%this.max return v } isEmpty () { return this.front===this.rear&&!this.list[this.front] } isFull () { return this.front===this.rear&&!!this.list[this.front] } Front () { return this.list[this.front] } Rear () { let rear=this.rear-1 "),Ka=(0,e._)("pre",null,[(0,e._)("code",null,"    return this.list[rear<0?this.max-1:rear]\n}\n")],-1),Ja=(0,e._)("p",null,"}",-1),Ya=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,'\n```js\nclass MycircularQueue{\n    constructor(len){\n        this.list=new Array(len);\n        this.front=0;\n        this.rear=0;\n        this.max=len;\n    }\n    Front(){\n        return this.list.length?this.list(this.front):-1;\n    }\n    Rear(){\n        let rear=this.rear-1;\n        return this.list[rear<0?this.max-1:rear]\n    }\n    enQueue(value){\n        if(this.isFull()){\n            return false;\n        }else{\n            this.list[this.rear]=value;\n            this.rear=(this.rear+1)%this.max;\n            return true;\n        }\n    }\n    deQueue(){\n        if(this.list.length>0){\n            this.list[this.front]="";\n            this.front++;\n            return true;\n        }else{\n            return false;\n        }\n    }\n    isEmpty(){\n        return this.front===this.rear&&!this.list[this.front]\n    }\n    isFull(){\n        return this.front===this.rear&&this.list[this.front]\n    }\n}\n')]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br")])],-1),Za=(0,e.Uk)(" ### ⑳ 任务调度器 ```js 给定一个用字符数组表示的 CPU 需要执行的任务列表。其中包含使用大写的 A - Z 字母表示的26 种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。CPU 在任何一个单位时间内都可以执行一个任务，或者在待命状态。 "),Va=(0,e._)("p",null,"然而，两个相同种类的任务之间必须有长度为 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。",-1),ne=(0,e._)("p",null,"你需要计算完成所有任务所需要的最短时间。",-1),se=(0,e._)("p",null,"示例 1：",-1),ae=(0,e._)("p",null,'输入: tasks = ["A","A","A","B","B","B"], n = 2 输出: 8 执行顺序: A -> B -> (待命) -> A -> B -> (待命) -> A -> B. 注：',-1),ee=(0,e._)("p",null,"任务的总个数为 [1, 10000]。 n 的取值范围为 [0, 100]。",-1),te=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"\n!['队列2'](./img/queue2.png)\n\n- 任务多的优先执行即可\n\n```js\nexport default (tasks, n) => {\n    let q = ''\n    let Q = {}\n    // 每种任务的数量\n    tasks.forEach(item => {\n        if (Q[item]) {\n            Q[item]++\n        } else {\n            Q[item] = 1\n        }\n    })\n    while (1) {\n        let keys = Object.keys(Q)\n        if (!keys[0]) {\n            break\n        }\n        // n+1为一组\n        let tmp = []\n        for (let i = 0; i <= n; i++) {\n            let max = 0\n            let key\n            let pos\n            // 从所有的任务中找到未处理数最大的，优先安排\n            keys.forEach((item, idx) => {\n                if (Q[item] > max) {\n                    max = Q[item]\n                    key = item\n                    pos = idx\n                }\n            })\n            if (key) {\n                tmp.push(key)\n                keys.splice(pos, 1)\n                Q[key]--;\n                if (Q[key] < 1) {\n                    delete Q[key]\n                }\n            } else {\n                break\n            }\n        }\n        q += tmp.join('').padEnd(n + 1, '-')\n    }\n    // A--A--A--\n    q = q.replace(/-+$/g, '')\n    return q.length\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br")])],-1),le=(0,e._)("h2",{id:"数据结构之链表",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#数据结构之链表","aria-hidden":"true"},"#"),(0,e.Uk)(" 数据结构之链表")],-1),oe=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("知识点 "),(0,e._)("ul",null,[(0,e._)("li",null,"如何手动地创建一个链表的数据结构(NodeList)"),(0,e._)("li",null,"知道链表如何排序(sort)"),(0,e._)("li",null,"如何检测链表是否是闭环的")])]),(0,e._)("li",null,[(0,e.Uk)("概念 "),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("链表由一系列结点（元素）组成，结点可以在运行时动态生成。每个结点包括两个部分："),(0,e._)("code",null,"存储数据元素的数据域"),(0,e.Uk)("和"),(0,e._)("code",null,"存储下一个结点地址的指针域"),(0,e.Uk)("。")]),(0,e._)("li",null,"链表只暴露一个头指针，后面的元素必须通过头指针不断的next，才能拿到")])]),(0,e._)("li",null,[(0,e.Uk)("js中没有链表结构 "),(0,e._)("ul",null,[(0,e._)("li",null,"数组可以充当队列，可以充当堆栈，但是不能充当链表")])])],-1),pe=(0,e._)("h3",{id:"_21-排序链表",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_21-排序链表","aria-hidden":"true"},"#"),(0,e.Uk)(" ㉑ 排序链表")],-1),ce=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("在 "),(0,e._)("span",{class:"token constant"},"O"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n log n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(" 时间复杂度和常数级空间复杂度下，对链表进行排序。\n\n示例 "),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"4"),(0,e.Uk)("\n示例 "),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e._)("span",{class:"token number"},"5"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br")])],-1),_e=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("什么是快速排序？ "),(0,e._)("ul",null,[(0,e._)("li",null,"选择一个基准值，小于的放它左边，大于的放它右边，然后左边右边再选一个基准值，以此类推。")])])],-1),ue=(0,e._)("p",null,[(0,e._)("img",{src:c,alt:"快速排序"})],-1),re=(0,e._)("p",null,[(0,e._)("img",{src:_,alt:"链表的快速排序"})],-1),ke=(0,e._)("ul",null,[(0,e._)("li",null,"定义两个指针，q指针遍历所有链表节点，如果q指针指向的元素小于基准元素，就和p指针的后一个元素进行交换，同时p后移一位。最后让基准元素和小于它的后一个元素进行交换")],-1),ie=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 声明链表的节点"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Node"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"constructor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" value"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"undefined"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 声明链表的数据结构"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"NodeList"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"constructor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 声明链表的头部节点"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" head "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Node"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"shift"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" head\n        arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"forEach"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Node"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" head\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 交换两个节点的值"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"swap"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("p"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" q")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" val "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" p"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val\n    p"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" q"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val\n    q"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" val\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 寻找基准元素的节点"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"partion"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("begin"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" end")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" val "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" begin"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" p "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" begin\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" q "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" begin"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next\n    "),(0,e._)("span",{class:"token keyword"},"while"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("q "),(0,e._)("span",{class:"token operator"},"!=="),(0,e.Uk)(" end"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("q"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" val"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            p "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" p"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next\n            "),(0,e._)("span",{class:"token function"},"swap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("p"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" q"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        q "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" q"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 让基准元素跑到中间去"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"swap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("p"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" begin"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" p\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"sort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("begin"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" end")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("begin "),(0,e._)("span",{class:"token operator"},"!=="),(0,e.Uk)(" end"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" part "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"partion"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("begin"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" end"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"sort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("begin"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" part"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"sort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("part"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" end"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    Node"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n    NodeList\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"56"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"57"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"58"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"59"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"60"),(0,e._)("br")])],-1),be=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 拿到头指针"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" head "),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"NodeList"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"9"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"10"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"12"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"6"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// 对头指针进行排序"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("head"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" res"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" next"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("head\n"),(0,e._)("span",{class:"token keyword"},"while"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    res"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    next"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\nconsole"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("res"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token comment"},"// [1,2,3,4,6,7,9,10,12]"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br")])],-1),me=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"merge"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("l"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" r")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" result "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"ListNode"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'sb'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" current "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"while"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("l "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("l"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            current"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" l"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            l "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" l"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            current "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" current"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            current"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            current "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" current"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    current"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" l "),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// 归并排序"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"sortList"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"head"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("head "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" head"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" head"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" fast "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" head"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" slow "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" head"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"while"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("fast"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" fast"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        fast "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" fast"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        slow "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" slow"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"const"),(0,e.Uk)(" mid "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" slow"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    slow"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"merge"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"sortList"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("head"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"sortList"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("mid"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br")])],-1),Ue=(0,e.Uk)(" ### ㉒ 环形链表 ```js 给定一个链表，判断链表中是否有环。 "),de=(0,e._)("p",null,"为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。",-1),fe=(0,e._)("p",null,"示例 1：",-1),ge=(0,e._)("p",null,"输入：head = [3,2,0,-4], pos = 1 输出：true 解释：链表中有一个环，其尾部连接到第二个节点。",-1),we=(0,e._)("p",null,"示例 2：",-1),ye=(0,e._)("p",null,"输入：head = [1,2], pos = 0 输出：true 解释：链表中有一个环，其尾部连接到第一个节点。",-1),he=(0,e._)("p",null,"示例 3：",-1),ve=(0,e._)("p",null,"输入：head = [1], pos = -1 输出：false 解释：链表中没有环。",-1),xe=(0,e._)("p",null,"进阶：",-1),je=(0,e._)("p",null,"你能用 O(1)（即，常量）内存解决此问题吗？",-1),Ae=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 环形检测原理\n  - 两个指针一个快，一个慢，同时出发。快的和慢的相遇\n  - 快的在慢的后面\n```js\n// 声明链表的节点\nclass Node {\n    constructor(value) {\n        this.val = value;\n        this.next = undefined\n    }\n}\n\n// 声明链表的数据结构\nclass NodeList {\n    constructor(arr) {\n        // 声明链表的头部节点\n        let head = new Node(arr.shift())\n        let next = head\n        arr.forEach(item => {\n            next.next = new Node(item)\n            next = next.next\n        })\n        return head\n    }\n}\n\nexport default function isCircle(head) {\n    // 慢指针\n    let slow = head\n        // 快指针\n    let fast = head.next\n    while (1) {\n        if (!fast || !fast.next) {\n            return false\n        } else if (fast === slow || fast.next === slow) {\n            return true\n        } else {\n            slow = slow.next\n            fast = fast.next.next\n        }\n    }\n}\nexport {\n    Node,\n    NodeList\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br")])],-1),We=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 检测"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" head"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"NodeList"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"6"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"9"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// 设置环状"),(0,e.Uk)("\nhead"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("head"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("next\nconsole"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"isCircle"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("head"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token comment"},"// true"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),Me=(0,e._)("h2",{id:"数据结构之矩阵",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#数据结构之矩阵","aria-hidden":"true"},"#"),(0,e.Uk)(" 数据结构之矩阵")],-1),Ne=(0,e._)("ul",null,[(0,e._)("li",null,"二维矩阵")],-1),Pe=(0,e._)("h3",{id:"_23-螺旋矩阵",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_23-螺旋矩阵","aria-hidden":"true"},"#"),(0,e.Uk)(" ㉓ 螺旋矩阵")],-1),Ce=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("给定一个包含 m x n 个元素的矩阵（m 行"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。\n\n示例 "),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"6"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n "),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"8"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"9"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"6"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"9"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"8"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n示例 "),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"6"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"8"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"9"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"10"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"11"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"12"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"8"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"12"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"11"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"10"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"9"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"6"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br")])],-1),Re=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("拆解成一步一步的，而且要拆成每一步是相同的 "),(0,e._)("ul",null,[(0,e._)("li",null,"第一圈是第一行全部，第二行到倒数第二行是第一个和最后一个，最后一行全部，接着里面的作为一个新的矩阵，继续重复这个步骤。")])])],-1),Le=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"6"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"8"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"9"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"10"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"11"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"12"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"6"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"8"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"9"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"10"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"11"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"12"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 处理每一圈的数据遍历过程"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"map"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 第一行"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"concat"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token comment"},"// 最后一行"),(0,e.Uk)("\n                r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"concat"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("len "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"reverse"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token comment"},"// 其它行最后一个"),(0,e.Uk)("\n                r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 去掉第一行"),(0,e.Uk)("\n        arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"shift"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 去掉最后一行"),(0,e.Uk)("\n        arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pop"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 去掉剩余行的第一个，并放入结果数组"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},">="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"--"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            r"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"shift"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 还有其它行没处理"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" r"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token comment"},"// 否则直接返回结果数组r"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" r\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br")])],-1),Fe=(0,e.Uk)(" ### ㉔ 旋转图像 ```js 给定一个 n × n 的二维矩阵表示一个图像。 "),Se=(0,e._)("p",null,"将图像顺时针旋转 90 度。",-1),Qe=(0,e._)("p",null,"说明：",-1),Ee=(0,e._)("p",null,"你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。",-1),Ie=(0,e._)("p",null,"示例 1:",-1),qe=(0,e._)("p",null,"给定 matrix = [ [1,2,3], [4,5,6], [7,8,9] ],",-1),He=(0,e._)("p",null,"原地旋转输入矩阵，使其变为: [ [7,4,1], [8,5,2], [9,6,3] ] 示例 2:",-1),Te=(0,e._)("p",null,"给定 matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ],",-1),Be=(0,e._)("p",null,"原地旋转输入矩阵，使其变为: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ]",-1),Ge=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 找到456这个轴，交换后再以753为轴，交换后即可\n![旋转图像](./img/rotateImage.png)\n```js\nfunction rotateImg(arr){\n\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),Oe=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 获取n的维度"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" vecor "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length\n        "),(0,e._)("span",{class:"token comment"},"// 垂直翻转"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" vecor "),(0,e._)("span",{class:"token operator"},"/"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" tmp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" vecor"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            tmp "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("vecor "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("vecor "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" tmp\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 对角线翻转"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" vecor"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" tmp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            tmp "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" tmp\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br")])],-1),ze=(0,e.Uk)(" ## ㉕ 数据结构之二叉树 - 特性 - 一个节点只有两个子节点，左节点和右节点 ![二叉树](./img/binaryTree.png) - 实现二叉树结构 ```js // 二叉树的节点 class Node { constructor(val) { this.val = val this.left = this.right = undefined } } "),De=(0,e._)("p",null,"class Tree { constructor(data) { // 临时存储所有节点，方便寻找父子节点 let nodeList = [] // 顶节点 let root for (let i = 0, len = data.length; i < len; i++) { let node = new Node(data[i]) nodeList.push(node) if (i > 0) { // 计算当前节点属于哪一层 let n = Math.floor(Math.sqrt(i + 1)) // 记录当前层的起始点 let q = Math.pow(2, n) - 1 // 记录上一层的起始点 p = Math.pow(2, n - 1) - 1 // 找到当前节点的父节点 let parent = nodeList[p + Math.floor((i - q) / 2)] // 将当前节点和上一层的父节点做关联 if (parent.left) { parent.right = node } else { parent.left = node } } } root = nodeList.shift() // 释放数组 nodeList.length = 0 return root } }",-1),$e=(0,e._)("p",null,"export default Tree",-1),Xe=(0,e._)("p",null,"export { Node }",-1),Ke=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"<mark-cross></mark-cross>\n### ㉖ 对称二叉树\n```js\n给定一个二叉树，检查它是否是镜像对称的。\n\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br")])],-1),Je=(0,e._)("p",null,[(0,e._)("img",{src:u,alt:"对称二叉树"})],-1),Ye=(0,e._)("ul",null,[(0,e._)("li",null,"左定点的左节点等于右定点的右节点，以此类推")],-1),Ze=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 二叉树的节点"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Node"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"constructor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"val"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" val\n        "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("left "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("right "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"undefined"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Tree"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"constructor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 临时存储所有节点，方便寻找父子节点"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" nodeList "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 顶节点"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" root\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" len "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" data"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" len"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" node "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Node"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            nodeList"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("node"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token comment"},"// 计算当前节点属于哪一层"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"floor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"sqrt"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token comment"},"// 记录当前层的起始点"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" q "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pow"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token comment"},"// 记录上一层的起始点"),(0,e.Uk)("\n                p "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"pow"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token comment"},"// 找到当前节点的父节点"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" parent "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" nodeList"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("p "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"floor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" q"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"/"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token comment"},"// 将当前节点和上一层的父节点做关联"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("parent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("left"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    parent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("right "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" node\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    parent"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("left "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" node\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        root "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" nodeList"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"shift"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 释放数组"),(0,e.Uk)("\n        nodeList"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" root\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"isSymmetry"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"root"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("root"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"walk"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("left"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" right")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("left "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("right"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"true"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("left "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("right"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("left "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" right"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("left"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val "),(0,e._)("span",{class:"token operator"},"!=="),(0,e.Uk)(" right"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("val"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"walk"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("left"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("left"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" right"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("right"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"walk"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("left"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("right"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" right"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("left"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"walk"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("root"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("left"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" root"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("right"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(" Tree\n\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    Node\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"56"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"57"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"58"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"59"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"60"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"61"),(0,e._)("br")])],-1),Ve=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" root "),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Tree"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\nconsole"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("Tree"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"isSymmetry"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("root"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])],-1),nt=(0,e.Uk)(" ### ㉗ 验证二叉搜索树 ```js 给定一个二叉树，判断其是否是一个有效的二叉搜索树。 "),st=(0,e._)("p",null,"假设一个二叉搜索树具有如下特征：",-1),at=(0,e._)("p",null,"节点的左子树只包含小于当前节点的数。 节点的右子树只包含大于当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。 示例 1:",-1),et=(0,e._)("p",null,[(0,e.Uk)("输入: 2 / "),(0,e._)("br"),(0,e.Uk)(" 1 3 输出: true 示例 2:")],-1),tt=(0,e._)("p",null,[(0,e.Uk)("输入: 5 / "),(0,e._)("br"),(0,e.Uk)(" 1 4   / "),(0,e._)("br"),(0,e.Uk)("   3 6 输出: false 解释: 输入为: [5,1,4,null,null,3,6]。   根节点的值为 5 ，但是其右子节点值为 4 。")],-1),lt=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 所有的子树跳出来，看看是不是左边小右边大。如果所有都满足，那整个树都满足了\n```js\n// 二叉树的节点\nclass Node {\n    constructor(val) {\n        this.val = val\n        this.left = this.right = undefined\n    }\n}\n\nclass Tree {\n    constructor(data) {\n        let root = new Node(data.shift())\n            // 遍历所有的数据，逐渐插入到当前这课搜索树中去\n        data.forEach(item => {\n            this.insert(root, item)\n        })\n        return root\n    }\n    insert(node, data) {\n        if (node.val > data) {\n            if (node.left === undefined) {\n                node.left = new Node(data)\n            } else {\n                this.insert(node.left, data)\n            }\n        } else {\n            if (node.right === undefined) {\n                node.right = new Node(data)\n            } else {\n                this.insert(node.right, data)\n            }\n        }\n    }\n    static walk(root) {\n        if (!root.left && !root.right) {\n            return true\n        } else if (((root.left && root.val < root.left.val) || (root.right && root.val > root.right.val))) {\n            return false\n        } else {\n            return Tree.walk(root.left) && Tree.walk(root.right)\n        }\n    }\n}\nexport default Tree\nexport {\n    Node\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br")])],-1),ot=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("二叉搜索树对于排序有很大参考。 "),(0,e._)("ul",null,[(0,e._)("li",null,"做好了排序后，插入和删除非常好操作。")])])],-1),pt=(0,e.Uk)(" ## ㉘ 数据结构之堆 - 概念 - 必须是完全二叉树(n-1层必须是满二叉树) - 任一结点的值是其子树所有结点的最大值（最大堆）或最小值（最小堆） "),ct=(0,e._)("p",null,[(0,e._)("img",{src:r,alt:"堆"})],-1),_t=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,"作用"),(0,e._)("ul",null,[(0,e._)("li",null,"利用堆做排序和查找")])]),(0,e._)("li",null,[(0,e._)("p",null,"堆排序"),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("完全二叉树节点之间的关系 "),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("如果父节点是i，子节点(左)2"),(0,e._)("em",null,"i+1，子节点(右)2"),(0,e.Uk)("i+2")])])])]),(0,e._)("p",null,[(0,e._)("img",{src:k,alt:"完全二叉树节点关系"})]),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("普通的完全二叉树构建最大堆 "),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("找到最后一个父节点，验证父节点是不是子树中的最大值，再依次往前判断每个子树，不是的交换成最大值。如果交换后对某个子树进行了破坏，那需要再次验证这个子树。找到第一个顶点的最大值后。移出最大值，把右下角的值放到最大值位置上，继续构建最大堆，找出第二大的值。以此类推。直到只剩一个值。 "),(0,e._)("img",{src:i,alt:"构建最大堆"})])])])])])],-1),ut=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Heap"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"constructor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("data "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" data\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"sort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" iArr "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("data\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" iArr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("lenth\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" iArr\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"floor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"/"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},">="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"--"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    Heap"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"maxHeapify"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("iArr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    Heap"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"swap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("iArr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                    Heap"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"maxHeapify"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("iArr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" iArr\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 交换两个元素"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"swap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" a"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" b")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("a "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(" b"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"''"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" c "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" c\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 构建最大堆"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"maxHeapify"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("Arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" size")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 左节点（索引）"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" l "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 右节点"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" r "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" largest "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" i\n            "),(0,e._)("span",{class:"token comment"},"// 父节点i分别和左节点l和右节点r做比较取最大"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("l "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(" size "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" Arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("l"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" Arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("largest"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            largest "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" l\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("r "),(0,e._)("span",{class:"token operator"},"<="),(0,e.Uk)(" size "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" Arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("r"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" Arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("largest"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            largest "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" r\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("largest "),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            Heap"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"swap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("Arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" i"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" largest"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            Heap"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"maxHeapify"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("Arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" largest"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" size"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(" Heap\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br")])],-1),rt=(0,e.Uk)(" ### ㉙ 根据字符出现频率排序 - 用堆排序做这题时间复杂度和空间复杂度是最低的 ```js 给定一个字符串，请将字符串里的字符按照出现的频率降序排列。 "),kt=(0,e._)("p",null,"示例 1:",-1),it=(0,e._)("p",null,'输入: "tree"',-1),bt=(0,e._)("p",null,'输出: "eert"',-1),mt=(0,e._)("p",null,"解释: 'e'出现两次，'r'和't'都只出现一次。 因此'e'必须出现在'r'和't'之前。此外，\"eetr\"也是一个有效的答案。 示例 2:",-1),Ut=(0,e._)("p",null,'输入: "cccaaa"',-1),dt=(0,e._)("p",null,'输出: "cccaaa"',-1),ft=(0,e._)("p",null,"解释: 'c'和'a'都出现三次。此外，\"aaaccc\"也是有效的答案。 注意\"cacaca\"是不正确的，因为相同的字母必须放在一起。 示例 3:",-1),gt=(0,e._)("p",null,'输入: "Aabb"',-1),wt=(0,e._)("p",null,'输出: "bbAa"',-1),yt=(0,e._)("p",null,"解释: 此外，\"bbaA\"也是一个有效的答案，但\"Aabb\"是不正确的。 注意'A'和'a'被认为是两种不同的字符。",-1),ht=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"\n```js\nclass Heap {\n    constructor(str) {\n        let map = new Map()\n        str.split('').forEach(item => {\n            if (map.has(item)) {\n                map.set(item, map.get(item) + 1)\n            } else {\n                map.set(item, 1)\n            }\n        })\n        this.map = map\n        this.data = Array.from(map.values())\n    }\n    sort() {\n        let iArr = this.data\n        let n = iArr.lenth\n        if (n <= 1) {\n            return iArr\n        } else {\n            for (let i = Math.florr(n / 2); i >= 0; i--) {\n                Heap.maxHeapify(iArr, i, n)\n            }\n            for (let j = 0; j < n; j++) {\n                Heap.swap(iArr, 0, n - 1 - j)\n                Heap.maxHeapify(iArr, 0, n - 1 - j)\n            }\n            return iArr\n        }\n    }\n    toString() {\n            let arr = this.sort()\n            let str = []\n            while (arr.length) {\n                let top = arr.pop()\n                for (let [k, v] of this.map) {\n                    if (v === top) {\n                        str.push(k.repeat(v))\n                        this.map.delete(k)\n                        break\n                    }\n                }\n            }\n            return str.join('')\n        }\n        // 交换两个元素\n    static swap(arr, a, b) {\n            if (a === b) {\n                return ''\n            }\n            let c = arr[a]\n            arr[a] = arr[b]\n            arr[b] = c\n        }\n        // 构建最大堆\n    static maxHeapify(Arr, i, size) {\n        // 左节点（索引）\n        let l = i * 2 + 1\n            // 右节点\n        let r = i * 2 + 2\n        let largest = i\n            // 父节点i分别和左节点l和右节点r做比较取最大\n        if (l <= size && Arr[l] > Arr[largest]) {\n            largest = l\n        }\n        if (r <= size && Arr[r] > Arr[largest]) {\n            largest = r\n        }\n        if (largest != i) {\n            Heap.swap(Arr, i, largest)\n            Heap.maxHeapify(Arr, largest, size)\n        }\n    }\n}\nexport default Heap\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"56"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"57"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"58"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"59"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"60"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"61"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"62"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"63"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"64"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"65"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"66"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"67"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"68"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"69"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"70"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"71"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"72"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"73"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"74"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"75"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"76"),(0,e._)("br")])],-1),vt=(0,e.Uk)(" ### ㉚ 超级丑数 ```js 编写一段程序来查找第 n 个超级丑数。 "),xt=(0,e._)("p",null,"超级丑数是指其所有质因数都是长度为 k 的质数列表 primes 中的正整数。",-1),jt=(0,e._)("p",null,"示例:",-1),At=(0,e._)("p",null,"输入: n = 12, primes = [2,7,13,19] 输出: 32 解释: 给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。 说明:",-1),Wt=(0,e._)("p",null,"1 是任何给定 primes 的超级丑数。  给定 primes 中的数字以升序排列。 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000 。 第 n 个超级丑数确保在 32 位有符整数范围内。",-1),Mt=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 概念\n    - 质数\n        - 大于1的自然数中，除了1和他本身没有其他因数\n    - 质因数\n        - 一个数的约数，并且是质数\n    - 丑数\n        - 只包含因子2，3，5的正整数，1也是丑数\n\n- 解题思路\n    - 求解任意整数的质因数\n    - 质因数是否在指定质因数范围内\n    - 是否达到指定个数n\n```js\n// 堆查找\nclass Heap {\n    constructor(arr) {\n        this.data = arr\n        this.max = arr.length\n        this.sort()\n    }\n    sort() {\n        let iArr = this.data\n        let n = iArr.lenth\n        if (n <= 1) {\n            return iArr\n        } else {\n            for (let i = Math.floor(n / 2); i >= 0; i--) {\n                Heap.maxHeapify(iArr, i, n)\n            }\n            return iArr\n        }\n    }\n    find(val, i = 0) {\n            let arr = this.data\n            if (val > arr[i] || i > this.max) {\n                return false\n            } else if (val === arr[i]) {\n                return val\n            } else {\n                return this.find(val, i * 2 + 1 || this.find(val, i * 2 + 2))\n            }\n        }\n        // 交换两个元素\n    static swap(arr, a, b) {\n            if (a === b) {\n                return ''\n            }\n            let c = arr[a]\n            arr[a] = arr[b]\n            arr[b] = c\n        }\n        // 构建最大堆\n    static maxHeapify(Arr, i, size) {\n        // 左节点（索引）\n        let l = i * 2 + 1\n            // 右节点\n        let r = i * 2 + 2\n        let largest = i\n            // 父节点i分别和左节点l和右节点r做比较取最大\n        if (l <= size && Arr[l] > Arr[largest]) {\n            largest = l\n        }\n        if (r <= size && Arr[r] > Arr[largest]) {\n            largest = r\n        }\n        if (largest != i) {\n            Heap.swap(Arr, i, largest)\n            Heap.maxHeapify(Arr, largest, size)\n        }\n    }\n}\nexport default Heap\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"56"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"57"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"58"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"59"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"60"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"61"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"62"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"63"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"64"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"65"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"66"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"67"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"68"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"69"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"70"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"71"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"72"),(0,e._)("br")])],-1),Nt=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Ugly"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"constructor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("n"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" primes")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" n\n        "),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("primes "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Heap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("primes"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"getAll"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 超级丑数列表"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" res "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" primes "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("primes\n            "),(0,e._)("span",{class:"token keyword"},"while"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("res"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" arr "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Ugly"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"getPrimes"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" k "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" l "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length\n                "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" k "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" l"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" k"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"!"),(0,e.Uk)("primes"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"find"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token keyword"},"break"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token comment"},"// k===l有两种情况（当前数没有质因数或者所有的质因数都在指定列表中）"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("k "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(" l"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("l "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("primes"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"find"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("k"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                            res"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                        res"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                i"),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" res"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 计算指定正整数n的质因数"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"getPrimes"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"prime"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 存储所有的质因数"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" arr "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"/"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"%"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"!"),(0,e._)("span",{class:"token function"},"prime"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    arr"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"prime"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(" Ugly\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br")])],-1),Pt=(0,e._)("h2",{id:"进阶算法-思想",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#进阶算法-思想","aria-hidden":"true"},"#"),(0,e.Uk)(" 进阶算法（思想）")],-1),Ct=(0,e._)("ul",null,[(0,e._)("li",null,"贪心算法思想"),(0,e._)("li",null,"动态规划思想")],-1),Rt=(0,e._)("h2",{id:"进阶算法之贪心算法",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#进阶算法之贪心算法","aria-hidden":"true"},"#"),(0,e.Uk)(" 进阶算法之贪心算法")],-1),Lt=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("概念 "),(0,e._)("ul",null,[(0,e._)("li",null,"通过每一步的最优解来达到整体最优解。但不一定是问题的最优解。"),(0,e._)("li",null,"选择的贪心策略必须具备无后效性（某个状态以前的过程不会影响以后的状态，只与当前状态有关）")])]),(0,e._)("li",null,"当一个问题特别抽象，特别复杂的时候，又找不到规律，不知道怎么办，可以考虑贪心算法，通过不断优化策略，靠近最优解。")],-1),Ft=(0,e.Uk)(" ### ㉛ 买卖股票的最佳时机 ```js 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 "),St=(0,e._)("p",null,"设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。",-1),Qt=(0,e._)("p",null,"注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。",-1),Et=(0,e._)("p",null,"示例 1:",-1),It=(0,e._)("p",null,"输入: [7,1,5,3,6,4] 输出: 7 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。 示例 2:",-1),qt=(0,e._)("p",null,"输入: [1,2,3,4,5] 输出: 4 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。 示例 3:",-1),Ht=(0,e._)("p",null,"输入: [7,6,4,3,1] 输出: 0 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。",-1),Tt=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"\n- 策略1：从最低点买入，在最高点卖出（追求单词利益）\n- 策略2：从低点买入，只要可以赚钱就卖出；不断买卖（追求多次利益，单词利益不够）\n- 策略3：从低点买入，到价格高点卖出，不断买卖（在保证单次利益的基础上，实现多次交易）（最贪）\n\n```js\nexport default (prices) => {\n    // 用来保存利润\n    let count = 0\n    for (let i = 0, len = prices.length; i < len; i++) {\n        // 循环i的下一个\n        for (let j = i; j < len - 1; j++) {\n            if (prices[j + 1] > prices[j]) {\n                count += prices[j + 1] - prices[j]\n                i = j\n            } else {\n                i = j\n                break\n            }\n        }\n    }\n    return count\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br")])],-1),Bt=(0,e._)("ul",null,[(0,e._)("li",null,"每天和前一天比较，高了就加上差价，低了就重新选择低点。")],-1),Gt=(0,e.Uk)(" ### ㉜ 柠檬水找零 ```js 在柠檬水摊上，每一杯柠檬水的售价为 5 美元。 "),Ot=(0,e._)("p",null,"顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。",-1),zt=(0,e._)("p",null,"每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。",-1),Dt=(0,e._)("p",null,"注意，一开始你手头没有任何零钱。",-1),$t=(0,e._)("p",null,"如果你能给每位顾客正确找零，返回 true ，否则返回 false 。",-1),Xt=(0,e._)("p",null,"示例 1：",-1),Kt=(0,e._)("p",null,"输入：[5,5,5,10,20] 输出：true 解释： 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。 由于所有客户都得到了正确的找零，所以我们输出 true。 示例 2：",-1),Jt=(0,e._)("p",null,"输入：[5,5,10] 输出：true 示例 3：",-1),Yt=(0,e._)("p",null,"输入：[10,10] 输出：false 示例 4：",-1),Zt=(0,e._)("p",null,"输入：[5,5,10,10,20] 输出：false 解释： 前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。 对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。 对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。 由于不是每位顾客都得到了正确的找零，所以答案是 false。",-1),Vt=(0,e._)("p",null,"提示：",-1),nl=(0,e._)("p",null,"0 <= bills.length <= 10000 bills[i] 不是 5 就是 10 或是 20",-1),sl=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 问题：找零钱\n    - 策略1：给钱找零，不区分金额直到找到足够的零钱（追求单词找零）\n    - 策略2：给钱找零，优先给金额大的零钱，尽量把零钱放在手里（追求多次找零）(更贪)\n```js\nexport default (arr) => {\n    // 钱箱\n    let hand = []\n        // 是否还有顾客\n    while (arr.length) {\n        // 取出最前面顾客的钱\n        let money = arr.shift()\n        if (money === 5) {\n            hand.push(money)\n        } else {\n            // 手里的零钱降序排列\n            hand.sort((a,b)=>b-a)\n            // 需要的找零\n            let change = money - 5\n            for (let i = 0, len = hand.length; i < len; i++) {\n                if (hand[i] <= change) {\n                    change -= hand[i]\n                    hand.splice(i, 1)\n                        // 删除了元素，数组的长度发生了变化，要维持刚才的i不变\n                    i--\n                }\n                if (change === 0) {\n                    break\n                }\n            }\n            // 没有足够的零钱给顾客\n            if (change !== 0) {\n                return false\n            } else {\n                // 顾客的钱收起来\n                hand.push(money)\n            }\n        }\n    }\n    return true\n}\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br")])],-1),al=(0,e._)("ul",null,[(0,e._)("li",null,"只需要一个个取值时用while"),(0,e._)("li",null,"需要比较等更复杂处理的用for")],-1),el=(0,e._)("h2",{id:"进阶算法之动态规划",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#进阶算法之动态规划","aria-hidden":"true"},"#"),(0,e.Uk)(" 进阶算法之动态规划")],-1),tl=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("概念 "),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("状态转移方程 "),(0,e._)("ul",null,[(0,e._)("li",null,"由最优子结构得到的问题的公式")])]),(0,e._)("li",null,[(0,e.Uk)("最优子结构 "),(0,e._)("ul",null,[(0,e._)("li",null,"问题简化为最简单的情况")])]),(0,e._)("li",null,[(0,e.Uk)("边界 "),(0,e._)("ul",null,[(0,e._)("li",null,"特殊情况")])])])]),(0,e._)("li",null,[(0,e.Uk)("用途 "),(0,e._)("ul",null,[(0,e._)("li",null,"不同路径"),(0,e._)("li",null,"最短路径")])])],-1),ll=(0,e._)("h3",{id:"_33-不同路径ii",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_33-不同路径ii","aria-hidden":"true"},"#"),(0,e.Uk)(" ㉝ 不同路径II")],-1),ol=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,"一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])],-1),pl=(0,e._)("p",null,[(0,e._)("img",{src:b,alt:"机器人路径"})],-1),cl=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("网格中的障碍物和空位置分别用 "),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(" 和 "),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(" 来表示。\n\n说明：m 和 n 的值均不超过 "),(0,e._)("span",{class:"token number"},"100"),(0,e.Uk)("。\n\n示例 "),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token number"},"3"),(0,e.Uk)("x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 "),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(" 条不同的路径：\n"),(0,e._)("span",{class:"token number"},"1."),(0,e.Uk)(" 向右 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" 向右 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" 向下 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" 向下\n"),(0,e._)("span",{class:"token number"},"2."),(0,e.Uk)(" 向下 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" 向下 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" 向右 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" 向右\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br")])],-1),_l=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("思路 "),(0,e._)("img",{src:m,alt:"机器人路径"})]),(0,e._)("li",null,"最后一步有几种情况？最后一步之前的路径等同于如上两个图形。"),(0,e._)("li",null,"状态转移方程如上"),(0,e._)("li",null,"最有子结构在方程中"),(0,e._)("li",null,"边界三种情况：四个方块，一行，一列")],-1),ul=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// leetcode提交超出时间限制！"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" m"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 最优子结构"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"dp"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"dp"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 检查起始或者目标元素是不是1（被占用了），如果起始或者最后那个格就是1，说明怎么都怎么不到那，直接返回0"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("m "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("m "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"includes"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(" m"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n          "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"dp"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"dp"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"dp"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("m"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br")])],-1),rl=(0,e._)("ul",null,[(0,e._)("li",null,"遍历所有的位置，如果遇到障碍物，位置值改为0，如果是起点，位置值改为1，如果是起点的两边，值等于它的前一个值。如果都不是，那等于它的左格子值加上格子值。最后右下角的格子值即为路径条数。")],-1),kl=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// leetcode成功通过"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"uniquePathsWithObstacles"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"obstacleGrid"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" j "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"continue"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"=="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"=="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"continue"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"=="),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(" j"),(0,e._)("span",{class:"token operator"},"=="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"=="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)("obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"continue"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)("obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("j"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("obstacleGrid"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br")])],-1),il=(0,e._)("h3",{id:"_34-k站中转内最便宜的航班",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_34-k站中转内最便宜的航班","aria-hidden":"true"},"#"),(0,e.Uk)(" ㉞ K站中转内最便宜的航班")],-1),bl=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("有 n 个城市通过 m 个航班连接。每个航班都从城市 u 开始，以价格 w 抵达 v。\n\n现在给定所有的城市和航班，以及出发城市 src 和目的地 dst，你的任务是找到从 src 到 dst 最多经过 k 站中转的最便宜的价格。 如果没有这样的路线，则输出 "),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("。\n\n示例 "),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" \nn "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" edges "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"100"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"100"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"500"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\nsrc "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" dst "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"200"),(0,e.Uk)("\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" \n城市航班图如下\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br")])],-1),ml=(0,e._)("p",null,[(0,e._)("img",{src:U,alt:"最有路径1"})],-1),Ul=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("从城市 "),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(" 到城市 "),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(" 在 "),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(" 站中转以内的最便宜价格是 "),(0,e._)("span",{class:"token number"},"200"),(0,e.Uk)("，如图中红色所示。\n示例 "),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)("\n输入"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" \nn "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" edges "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"100"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"100"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"500"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\nsrc "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" dst "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\n输出"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"500"),(0,e.Uk)("\n解释"),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" \n城市航班图如下\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br")])],-1),dl=(0,e._)("p",null,[(0,e._)("img",{src:d,alt:"最有路径2"})],-1),fl=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("从城市 "),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(" 到城市 "),(0,e._)("span",{class:"token number"},"2"),(0,e.Uk)(" 在 "),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(" 站中转以内的最便宜价格是 "),(0,e._)("span",{class:"token number"},"500"),(0,e.Uk)("，如图中蓝色所示。\n提示：\n\nn 范围是 "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"100"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("，城市标签从 "),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(" 到 n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1."),(0,e.Uk)("\n航班数量范围是 "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"*"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"/"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"每个航班的格式"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("src"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" dst"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" price"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("\n每个航班的价格范围是 "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"10000"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("\nk 范围是 "),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" n "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("\n航班没有重复，且不存在环路\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br")])],-1),gl=(0,e._)("p",null,[(0,e._)("img",{src:f,alt:"最优路径3"})],-1),wl=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// leetcode中运行超出时间限制！"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"default"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("fights"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" src"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" dst"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 将fights作为参数和LeetCode一致"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"cheap"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("fights"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" src"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" dst"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" prev "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" fights"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"filter"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(" dst"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" min "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" Math"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"min"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"apply"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" prev"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"map"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"item"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("item"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(" src "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" k "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("k "),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"!=="),(0,e.Uk)(" src"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" Number"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token constant"},"MAX_SAFE_INTEGER"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cheap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("fights"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" src"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" item"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" min\n  "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token comment"},"// 增加返回值是不是Number.MAX_SAFE_INTEGER，如果是返回-1"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" min "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cheap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("fights"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" src"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" dst"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)(" k"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n  "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" min "),(0,e._)("span",{class:"token operator"},">="),(0,e.Uk)(" Number"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token constant"},"MAX_SAFE_INTEGER"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"-"),(0,e._)("span",{class:"token number"},"1"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" min\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br")])],-1),yl=(0,e._)("h2",{id:"【面试题】",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#【面试题】","aria-hidden":"true"},"#"),(0,e.Uk)(" 【面试题】")],-1),hl=(0,e.Uk)(" ### 【1】821. 字符的最短距离 ```js 给定一个字符串 S 和一个字符 C。返回一个代表字符串 S 中每个字符到字符串 S 中的字符 C 的最短距离的数组。 "),vl=(0,e._)("p",null,"示例 1:",-1),xl=(0,e._)("p",null,"输入: S = \"loveleetcode\", C = 'e' 输出: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] 说明:",-1),jl=(0,e._)("p",null,"字符串 S 的长度范围为 [1, 10000]。 C 是一个单字符，且保证是字符串 S 里的字符。 S 和 C 中的所有字母均为小写字母。",-1),Al=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 先求出左边的C到每个字符的最近距离，再求出右边的C到每个字符的最近距离，然后左右中取最小值即可，双指针\n```js\nvar shortestToChar = function(S, C) {\n    let len=S.length;\n    let left=[];let right=[];\n    left[0]=S[0]===C?0:10000;\n    for(var i=1;i<len;i++){\n        left[i]=S[i]===C?0:left[i-1]+1;\n    }\n    right[len-1]=S[len-1]===C?0:10000;\n    for(var i=len-2;i>=0;i--){\n        right[i]=S[i]===C?0:right[i+1]+1;\n    }\n    for(var i=0;i<len;i++){\n        left[i]=Math.min(left[i],right[i])\n    }\n    return left;\n};\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br")])],-1),Wl=(0,e.Uk)(" ### 【2】 845. 数组中的最长山脉 ```js 我们把数组 A 中符合下列属性的任意连续子数组 B 称为 “山脉”： "),Ml=(0,e._)("p",null,"B.length >= 3 存在 0 < i < B.length - 1 使得 B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1] （注意：B 可以是 A 的任意子数组，包括整个数组 A。）",-1),Nl=(0,e._)("p",null,"给出一个整数数组 A，返回最长 “山脉” 的长度。",-1),Pl=(0,e._)("p",null,"如果不含有 “山脉” 则返回 0。",-1),Cl=(0,e._)("p",null,null,-1),Rl=(0,e._)("p",null,"示例 1：",-1),Ll=(0,e._)("p",null,"输入：[2,1,4,7,3,2,5] 输出：5 解释：最长的 “山脉” 是 [1,4,7,3,2]，长度为 5。 示例 2：",-1),Fl=(0,e._)("p",null,"输入：[2,2,2] 输出：0 解释：不含 “山脉”。",-1),Sl=(0,e._)("p",null,"提示：",-1),Ql=(0,e._)("p",null,"0 <= A.length <= 10000 0 <= A[i] <= 10000",-1),El=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"- 三个指针\n```js\n// 没看懂\nvar longestMountain = function(A) {\n    let m=A.length;\n    if(m<3) return 0;\n    let ptrL=0;\n    // 保存最高点\n    let ptrM=0;\n    let ptrR=0;\n    let result=0;\n    while(ptrR<m){\n        // 递增最高点\n        while(ptrM<m-1&&A[ptrM+1]>A[ptrM]) ptrM++;\n        ptrR=ptrM;\n        // 递减最低点\n        while (ptrR < m - 1 && A[ptrR + 1] < A[ptrR])\n\t\t\t\tptrR++;\n            // 有递增，并且有递减，并且\n\t\t\tif (ptrL != ptrM && ptrR != ptrM && result < ptrR - ptrL + 1)\n\t\t\t\tresult = ptrR - ptrL + 1;\n            // 数字相等，跳过这个数字\n            if(ptrL == ptrR)\n                ptrL = ptrM = ++ptrR;\n            // 到最低点之前都不符合，跳过\n            else\n                ptrL = ptrM = ptrR;\n    }\n    return result;\n};\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br")])],-1),Il=(0,e._)("ul",null,[(0,e._)("li",null,"temp是临时的山脉，res是目前为止的最大山脉。")],-1),ql=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(" s"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"4"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"7"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"5"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"var"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"longestMountain"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e._)("span",{class:"token constant"},"A")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" res"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("temp"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" isDown"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token boolean"},"false"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"for"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i "),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)(),(0,e._)("span",{class:"token constant"},"A"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token constant"},"A"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token constant"},"A"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("isDown"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                res "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" res "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" temp "),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(" res "),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" temp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                temp "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                isDown "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            temp"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token constant"},"A"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e._)("span",{class:"token constant"},"A"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("isDown"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                res "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" res "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" temp "),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(" res "),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" temp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                isDown "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            temp "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("isDown"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                temp"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("temp "),(0,e._)("span",{class:"token operator"},"!="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                isDown "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"true"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                temp"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("isDown"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        res "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" res "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" temp "),(0,e._)("span",{class:"token operator"},"?"),(0,e.Uk)(" res "),(0,e._)("span",{class:"token operator"},":"),(0,e.Uk)(" temp"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" res"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br")])],-1),Hl=(0,e.Uk)(" ### 【3】741. 摘樱桃 ```js 一个N x N的网格(grid) 代表了一块樱桃地，每个格子由以下三种数字的一种来表示： "),Tl=(0,e._)("p",null,"0 表示这个格子是空的，所以你可以穿过它。 1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。 -1 表示这个格子里有荆棘，挡着你的路。 你的任务是在遵守下列规则的情况下，尽可能的摘到最多樱桃：",-1),Bl=(0,e._)("p",null,"从位置 (0, 0) 出发，最后到达 (N-1, N-1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为0或者1的格子）； 当到达 (N-1, N-1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子； 当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为0）； 如果在 (0, 0) 和 (N-1, N-1) 之间不存在一条可经过的路径，则没有任何一个樱桃能被摘到。 示例 1:",-1),Gl=(0,e._)("p",null,"输入: grid = [[0, 1, -1], [1, 0, -1], [1, 1, 1]] 输出: 5 解释： 玩家从（0,0）点出发，经过了向下走，向下走，向右走，向右走，到达了点(2, 2)。 在这趟单程中，总共摘到了4颗樱桃，矩阵变成了[[0,1,-1],[0,0,-1],[0,0,0]]。 接着，这名玩家向左走，向上走，向上走，向左走，返回了起始点，又摘到了1颗樱桃。 在旅程中，总共摘到了5颗樱桃，这是可以摘到的最大值了。 说明:",-1),Ol=(0,e._)("p",null,"grid 是一个 N * N 的二维数组，N的取值范围是1 <= N <= 50。 每一个 grid[i][j] 都是集合 {-1, 0, 1}其中的一个数。 可以保证起点 grid[0][0] 和终点 grid[N-1][N-1] 的值都不会是 -1。",-1),zl=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"\n```js\nfunction cherryPickup(grid){\n        let N = grid.length  // 转化为2人同时从(0,0)走到(N-1,N-1)的最大收益\n        let S = (N-1) * pow(2,1)  // 最大步数，即（N-1)*2步走到目的地\n        let dp = new Map([[0,0,0],grid[0][0]])// dp[s,i,j]走了s步且位于两人分别位于i,j两行的最大收益，在下面的循环里仅当(s,i,j)状态可达时才存入哈希\n        let moves = [[0, 0], [1, 0], [0, 1], [1, 1]]  // i,j要考虑的上一时刻到现在可能的变化量\n        for (let s=1; s<=S+1;i++){\n            for(let y1=1;y1<=Math.min(s+1,N);y1++){\n                let x1 = s-y1\n                if (x1 >= N || grid[y1][x1] == -1)  // 该状态不可达\n                    continue\n                for(let y2=1;y2<=Math.min(s+1,N);y2++){// 仅考虑y1<=y2，因为(s,y1,y2)与(s,y2,y1)等价\n                    x2 = s-y2\n                    if (x2 >= N || grid[y2][x2] == -1) // 该状态不可达\n                        continue\n                    _max = -1  // -1占位后面判断可达\n                    for(let [dy1,dy2] in moves){\n                        let [_y1, _y2] = [y1-dy1, y2-dy2]  // 其可能来自的状态\n                        if (_y1 > _y2)\n                            continue\n                        _max = max(_max, dp.get((s-1, _y1, _y2), -1))\n                    \n                    }\n                        \n                    if (_max != -1)  // 仍为-1则说明没有前置状态可以到达当前状态\n                        dp[s, y1, y2] = _max + grid[y1][x1] + grid[y2][x2] if y1 != y2 else _max + grid[y1][x1]  // y1=y2时则只能有一个人获得樱桃\n        } \n            }\n                }\n                \n            \n        return dp.get((S, N-1, N-1), 0)  // 若该状态不可达，返回0\n }\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br")])],-1),Dl=(0,e.Uk)(" ### 【4】[1,{a:13},3,{b:12},12] 统计所有数字之和 ```js let sum=arr.reduce((acc,cur)=>{ if(typeof cur==='object'){ for(key in objs){ if(obj.hasOwnProperty(key)){ acc+=cur[key] } } }else{ acc+=cur } return acc; }) ``` ### 【5】获取一个对象的所有key ```js Object.keys(obj) "),$l=(0,e._)("p",null,"let keys=[]; for(key in obj){ keys.push(key); }",-1),Xl=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"\n### 【6】[{a:34},{a:12},{a:43}]数组排序\n```js\narr.sort((a,b)=>{\n    return a.a-b.a;\n})\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br")])],-1),Kl=(0,e._)("h3",{id:"【7】找出一个长字符串中连续重复次数最多的字符-如-在-nddemdereeeffetcssssfggddregg-中-s-重复出现次数-4-次最多-因此-s-为连续重复出现最长的字符。",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#【7】找出一个长字符串中连续重复次数最多的字符-如-在-nddemdereeeffetcssssfggddregg-中-s-重复出现次数-4-次最多-因此-s-为连续重复出现最长的字符。","aria-hidden":"true"},"#"),(0,e.Uk)(" 【7】找出一个长字符串中连续重复次数最多的字符，如：在\"nddemdereeeffetcssssfggddregg\"中's'重复出现次数(4)次最多，因此's'为连续重复出现最长的字符。")],-1),Jl=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"maxTime"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" reg "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"(\\w)\\1+"),(0,e._)("span",{class:"token regex-delimiter"},"/")]),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" max "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" maxChar "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token string"},"''"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"while"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" result "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" reg"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"exec"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length "),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(" max"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                max "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                maxChar "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            str "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(" str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"slice"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("index "),(0,e._)("span",{class:"token operator"},"+"),(0,e.Uk)(" result"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"break"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" maxChar"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br")])],-1),Yl=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"maxTime"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"str"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    str"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"match"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token regex"},[(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-source language-regex"},"(\\w)\\1+"),(0,e._)("span",{class:"token regex-delimiter"},"/"),(0,e._)("span",{class:"token regex-flags"},"g")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"sort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("b")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)("b"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("a"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br")])],-1),Zl=(0,e.Uk)(' ### 【8】现在一个json，在某一维度中可能会出现\'score\'键，请用任意语言写一个check方法判断该json是否满足要求。要求如下： ```js a. 任意一个键为score的值预期是一个整型数字且大于60，则检查通过 b. 若不存在键为score的值，则检查通过 json参考样例： { "name":"BeJson", "url":"http://www.bejson.com", "score":59, "address":{ "score":20, "city":"江苏苏州", "country":"中国" }, "links":[{ "score":60, "url":"http://www.google.com" }] } ``` ```js function hasScore(json) { let exist = false; let over = false; '),Vl=(0,e._)("pre",null,[(0,e._)("code",null,"function checkScoreChild(obj) {\n    if (obj instanceof Object) {\n        for (key in obj) {\n            checkScoreChild(obj[key]);\n            if (key === 'score') {\n                exist = true;\n                console.log(obj['score']);\n                if (typeof obj['score'] === 'number' && obj['score'] > 60) {\n                    over = true;\n                }\n            }\n        }\n    } else if (obj instanceof Array) {\n        obj.forEach(item => {\n            checkScoreChild(item);\n        })\n    }\n\n}\ncheckScoreChild(JSON.parse(json))\nreturn over || !exist;\n")],-1),no=(0,e._)("p",null,"}",-1),so=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"\n### 【9】实现一个promise,实现promise.all，实现promise.race\n1. 一个类里面有一个变量保存promise状态，new的时候传入一个函数，函数的参数里包含两个方法resolve和reject，在promise初始化时定义了。当new promise异步成功后执行定义的resolve方法，传入成功值，失败调用reject方法，传入失败值。立即执行new传入的函数。\n2. then函数的作用是返回一个新的promise，在里面判断目前的promise状态，成功就调用原promise的成功，失败调用原promise的失败，等待就把原成功和原失败存起来(存的时候函数包一下把参数传进去)，等成功后调用。这样通过一个变量和发布订阅就实现了发送请求和得到请求结果的分离。\n3. 原promise的成功函数执行时出错就执行新promise的失败，成功就执行新promise的成功。其它也是如此\n4. resolvePromise(promise2,x,resolve,reject),执行promise2的resolve，即执行新promise成功时，要先判断原promise成功函数的返回值x是不是一个promise(判断是对象或者函数，并且有then属性即认为是promise)。加上异步以保证能拿到promise2传过去。是promise，就执行它的then方法，按then的结果来判断promise2的状态。\n```js\nlet Promise=require('./promise')\nlet p=new Promise(function(resolve,reject){\n    reject('情人节到了');\n    resolve('情人到了');\n    throw new Error('错误');\n})\n// 链式调用\np.then((value)=>{\n    console.log('success',value);\n    return value;\n},(reason)=>{\n    console.log('error',reason);\n}).then((value)=>{\n\n})\n\n// 值的穿透 \np.then().then().then((data)=>{\n    console.log(data);\n})\np.then().then(1,data=>{\n    console.log(data);\n})\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br")])],-1),ao=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"executor"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 在promise内部定义一个状态 当前promise的状态"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" self"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("value"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"undefined"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("reason"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"undefined"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("onResolvedCallbacks"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("onRejectedCallbacks"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("status"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token string"},"'pending'"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// 默认promise的状态是pending"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("value "),(0,e._)("span",{class:"token keyword"},"instanceof"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token comment"},"// resolve的结果是一个promise，会让这个promise执行，将执行后的结果传递给resolve或者reject"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" value"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("status"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'pending'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("value"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("status"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token string"},"'resolved'"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// 成功状态"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 发布"),(0,e.Uk)("\n            self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("onResolvedCallbacks"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"forEach"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"fn"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"fn"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"reason"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("status"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'pending'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("reason"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("reason"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("status"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token string"},"'rejected'"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// 失败状态"),(0,e.Uk)("\n            self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("onRejectedCallbacks"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"forEach"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"fn"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"fn"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"try"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"executor"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// 说明失败了"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    \n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"resolvePromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("promise2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 判断x是不是promise"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 如果自己等待着自己完成 那么当前就应该走向失败，防止自己等待自己"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("promise2"),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"TypeError"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'循环引用了'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" called"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 表示当前有没有被调用过（规范要求如果resolve和reject都被调用了或者被调用多次，只有第一次有效）"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 按规范来判断"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("x"),(0,e._)("span",{class:"token operator"},"!=="),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token operator"},"&&"),(0,e._)("span",{class:"token keyword"},"typeof"),(0,e.Uk)(" x"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'object'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"typeof"),(0,e.Uk)(" x"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'function'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 很有可能是一个promise"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"try"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" then"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("then"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// then属性具有getter 此时获取时会发生异常"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"typeof"),(0,e.Uk)(" then"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'function'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token comment"},"// 默认是promise"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"call"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"y"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token comment"},"// 不再次取x.then()，防止then的get函数被意外修改，使用call调用一定不会报错"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token comment"},"// y有可能是一个promise。一直解析 直到结果是一个常量为止"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("called"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"return"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// 给别人的promise增加的逻辑"),(0,e.Uk)("\n                    called"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token boolean"},"true"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token function"},"resolvePromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("promise2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("y"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token comment"},"// resolve(y);// 成功拿到成功的结果，让promise2变成成功状态"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"r"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("called"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"return"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    called"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token boolean"},"true"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("r"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// 保证this指向这个promise"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"else"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token comment"},"// 当前这个then是一个普通对象"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"// {a:1}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("called"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"return"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            called"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token boolean"},"true"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"else"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// 普通值 直接成功即可"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("prototype"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"then"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("onFulfilled"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("onRejected")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 值得穿透：给一个默认的返回参数或者抛出错误的函数"),(0,e.Uk)("\n    onFulfilled"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"typeof"),(0,e.Uk)(" onFulfilled"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'function'"),(0,e._)("span",{class:"token operator"},"?"),(0,e._)("span",{class:"token function-variable function"},"onFulfilled"),(0,e._)("span",{class:"token operator"},":"),(0,e._)("span",{class:"token parameter"},"value"),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    onRejected"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"typeof"),(0,e.Uk)(" onRejected"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'function'"),(0,e._)("span",{class:"token operator"},"?"),(0,e._)("span",{class:"token function-variable function"},"onRejected"),(0,e._)("span",{class:"token operator"},":"),(0,e._)("span",{class:"token parameter"},"err"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token keyword"},"throw"),(0,e.Uk)(" err"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" self"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 调用then后需要再次 返回一个新的promise"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 需要拿到当前then方法成功或失败执行后的结果"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 判断then函数的执行结果和promise2的关系"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" promise2 "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("status"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'resolved'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token comment"},"// 这里要使用promise2，需要添加异步保证可以获取到promise2"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"setTimeout"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"try"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" x "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"onFulfilled"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token function"},"resolvePromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("promise2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// 如果执行函数时抛出失败，那么会走向下一个then的失败状态"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("status"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'rejected'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"setTimeout"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token keyword"},"try"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" x "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"onRejected"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("reason"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token function"},"resolvePromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("promise2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("status"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'pending'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token comment"},"// 订阅"),(0,e.Uk)("\n            self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("onResolvedCallbacks"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"setTimeout"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token keyword"},"try"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" x "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"onFulfilled"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token function"},"resolvePromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("promise2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("onRejectedCallbacks"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"push"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"setTimeout"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token keyword"},"try"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" x "),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"onRejected"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("self"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("reason"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token function"},"resolvePromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("promise2"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("x"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                        "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("e"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" promise2"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    \n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token comment"},"// 不属于规范内的。就是返回了个then"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("prototype"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"catch"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"errCallback"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("errCallback"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\nPromise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"resolve"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\nPromise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"reject"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token comment"},"// promise.finally实现原理是什么 try{}catch{}finally{} 无论如何都会执行 也是返回的then"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("prototype"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"finally"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"callback"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"this"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 如果callback是一个函数返回promise 就等待这个promise执行完毕"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 如果finally里返回一个promise，要等这个promise状态改变，再继续执行下面代码.使用resolve即可"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"callback"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// callback();"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// return data;"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// 一定要用resolve，不能用reject，因为resolve有等待的效果"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"callback"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token keyword"},"throw"),(0,e.Uk)(" err"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// callback();"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token comment"},"// throw err;"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"31"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"32"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"33"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"34"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"35"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"36"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"37"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"38"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"39"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"40"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"41"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"42"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"43"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"44"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"45"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"46"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"47"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"48"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"49"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"50"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"51"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"52"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"53"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"54"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"55"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"56"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"57"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"58"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"59"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"60"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"61"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"62"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"63"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"64"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"65"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"66"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"67"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"68"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"69"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"70"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"71"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"72"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"73"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"74"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"75"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"76"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"77"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"78"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"79"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"80"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"81"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"82"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"83"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"84"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"85"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"86"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"87"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"88"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"89"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"90"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"91"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"92"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"93"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"94"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"95"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"96"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"97"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"98"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"99"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"100"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"101"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"102"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"103"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"104"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"105"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"106"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"107"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"108"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"109"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"110"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"111"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"112"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"113"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"114"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"115"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"116"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"117"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"118"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"119"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"120"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"121"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"122"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"123"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"124"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"125"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"126"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"127"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"128"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"129"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"130"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"131"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"132"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"133"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"134"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"135"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"136"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"137"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"138"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"139"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"140"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"141"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"142"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"143"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"144"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"145"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"146"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"147"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"148"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"149"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"150"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"151"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"152"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"153"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"154"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"155"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"156"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"157"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"158"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"159"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"160"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"161"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"162"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"163"),(0,e._)("br")])],-1),eo=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("链式调用 "),(0,e._)("ul",null,[(0,e._)("li",null,"回调地狱")]),(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"url"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        fs"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("url"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},"'utf8'"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("data")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"resolved"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'./name.txt'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br")])]),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("特点 "),(0,e._)("ol",null,[(0,e._)("li",null,"如果一个then方法 返回一个普通值 这个值会传递给下一次then中作为成功的结果"),(0,e._)("li",null,"如果报错，传递给下一个失败"),(0,e._)("li",null,"如果返回的是promise,promise成功结果传给下一个成功，promise失败传给下一个失败"),(0,e._)("li",null,"捕获错误机制：默认会找最近的then的失败"),(0,e._)("li",null,"jquery的链式调用，返回this可以实现。promise.then的链式调用，返回一个新的promise可以实现（因为then后状态已经变为pending，不可以再变成其他。所以要有个新的promise，新的状态）")]),(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'./name.txt'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// return 100;"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"setTimeout"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'哈哈'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"err"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'catch'"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br")])])])])])],-1),to=(0,e._)("h3",{id:"【10】实现一个promise延迟对象-defer",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#【10】实现一个promise延迟对象-defer","aria-hidden":"true"},"#"),(0,e.Uk)(" 【10】实现一个promise延迟对象 defer")],-1),lo=(0,e._)("ul",null,[(0,e._)("li",null,"延迟对象 Q库 减少套用")],-1),oo=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" fs"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'fs'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" Promise"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'./promise'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"url"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" defer"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"defer"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    fs"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("url"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},"'utf8'"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("data")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"reject"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        defer"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" defer"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("promise"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"read"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'./name.txt'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br")])],-1),po=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// promise.js"),(0,e.Uk)("\nPromise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"defer"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" dfd"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    dfd"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("promise"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        dfd"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        dfd"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("reject"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" dfd"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br")])],-1),co=(0,e._)("ul",null,[(0,e._)("li",null,"安装这个库可校验自己写的是否符合promise a+规范")],-1),_o=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("npm install "),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("g promises"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("aplus"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("test\npromises"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("aplus"),(0,e._)("span",{class:"token operator"},"-"),(0,e.Uk)("tests promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("js\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])],-1),uo=(0,e._)("h3",{id:"【11】如何终止promise链",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#【11】如何终止promise链","aria-hidden":"true"},"#"),(0,e.Uk)(" 【11】如何终止promise链？")],-1),ro=(0,e._)("ul",null,[(0,e._)("li",null,"返回一个等待的promise")],-1),ko=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" promise"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\npromise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 走到这希望后面的then不再执行了"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 返回一个空的promise，既不成功也不失败"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br")])],-1),io=(0,e._)("h3",{id:"【12】promise-all",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#【12】promise-all","aria-hidden":"true"},"#"),(0,e.Uk)(" 【12】Promise.all")],-1),bo=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" fs"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token function"},"require"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'fs'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("promises"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"//新版本10版本新增的"),(0,e.Uk)("\nPromise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"all"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("fs"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'./name.txt'"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},"'utf8'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("fs"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'./age.txt'"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},"'utf8'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])],-1),mo=(0,e._)("ul",null,[(0,e._)("li",null,"多个异步并发，使用计数器")],-1),Uo=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"isPromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"value"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"typeof"),(0,e.Uk)(" value"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'function'"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"||"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"typeof"),(0,e.Uk)(" value"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'object'"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" value "),(0,e._)("span",{class:"token operator"},"!=="),(0,e._)("span",{class:"token keyword"},"null"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"typeof"),(0,e.Uk)(" value"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("then"),(0,e._)("span",{class:"token operator"},"==="),(0,e._)("span",{class:"token string"},"'function'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"true"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token boolean"},"false"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\nPromise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"all"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"values"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" arr"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"["),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(),(0,e._)("span",{class:"token function-variable function"},"processData"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("key"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("value")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            arr"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("key"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},";"),(0,e._)("span",{class:"token comment"},"// after函数"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token operator"},"++"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"==="),(0,e.Uk)("value"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("arr"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("values"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" current"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("values"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"isPromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("current"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                current"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"y"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    "),(0,e._)("span",{class:"token function"},"processData"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("y"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"else"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"processData"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("current"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"23"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"24"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"25"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"26"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"27"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"28"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"29"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"30"),(0,e._)("br")])],-1),fo=(0,e._)("h3",{id:"【13】promise-race",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#【13】promise-race","aria-hidden":"true"},"#"),(0,e.Uk)(" 【13】Promise.race")],-1),go=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"race"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("fs"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'./name.txt'"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},"'utf8'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("fs"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"readFile"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token string"},"'./age.txt'"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token string"},"'utf8'"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"1"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br")])],-1),wo=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e.Uk)("Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function-variable function"},"race"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"function"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"values"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token keyword"},"for"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" i"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"0"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"<"),(0,e.Uk)("values"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("length"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("i"),(0,e._)("span",{class:"token operator"},"++"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" current"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("values"),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("i"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token keyword"},"if"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token function"},"isPromise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("current"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                current"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token keyword"},"else"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("current"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n            "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br")])],-1),yo=(0,e._)("h3",{id:"【14】如何终止一个promise-中断promise-promise超时",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#【14】如何终止一个promise-中断promise-promise超时","aria-hidden":"true"},"#"),(0,e.Uk)(" 【14】如何终止一个promise(中断promise) promise超时")],-1),ho=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" p"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token function"},"setTimeout"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e._)("span",{class:"token function"},"resolve"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token number"},"123"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"3000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token function"},"setTimeout"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 让这个promise 变成失败态"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\np"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"err"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br")])],-1),vo=(0,e._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,e._)("pre",{class:"language-javascript"},[(0,e._)("code",null,[(0,e._)("span",{class:"token comment"},"// 解决："),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"wrap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"promise"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" abort"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" newPromise"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"Promise"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},[(0,e.Uk)("resolve"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("reject")]),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        abort"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("reject"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" p"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("Promise"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"race"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("newPromise"),(0,e._)("span",{class:"token punctuation"},","),(0,e.Uk)("promise"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    p"),(0,e._)("span",{class:"token punctuation"},"."),(0,e.Uk)("abort"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("abort"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(" p"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"let"),(0,e.Uk)(" p1"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token function"},"wrap"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("p"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n"),(0,e._)("span",{class:"token function"},"setTimeout"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token comment"},"// 让这个promise 变成失败态"),(0,e.Uk)("\n    p1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"abort"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},","),(0,e._)("span",{class:"token number"},"2000"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\np1"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"then"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"data"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("data"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"catch"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token parameter"},"err"),(0,e._)("span",{class:"token operator"},"=>"),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    console"),(0,e._)("span",{class:"token punctuation"},"."),(0,e._)("span",{class:"token function"},"log"),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("err"),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token punctuation"},"}"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"8"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"9"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"10"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"11"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"12"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"13"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"14"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"15"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"16"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"17"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"18"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"19"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"20"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"21"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"22"),(0,e._)("br")])],-1),xo={render:function(n,s){const a=(0,e.up)("RouterLink"),t=(0,e.up)("mark-question"),l=(0,e.up)("absolute-box"),o=(0,e.up)("mark-cross");return(0,e.wg)(),(0,e.iD)(e.HY,null,[g,(0,e._)("nav",w,[(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#面试算法考点"},{default:(0,e.w5)((()=>[y])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#环境搭建"},{default:(0,e.w5)((()=>[h])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#基础算法-字符串"},{default:(0,e.w5)((()=>[v])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_1-反转字符串中的单词-iii"},{default:(0,e.w5)((()=>[x])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_2-计数二进制子串"},{default:(0,e.w5)((()=>[j])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#基础算法-数组"},{default:(0,e.w5)((()=>[A])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_3-公式运算-电话号码的组合"},{default:(0,e.w5)((()=>[W])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_4-归类运算-卡牌分组"},{default:(0,e.w5)((()=>[M])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_5-筛选运算-种花问题"},{default:(0,e.w5)((()=>[N])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_6-二进制运算-格雷编码"},{default:(0,e.w5)((()=>[P])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#正则表达式"},{default:(0,e.w5)((()=>[C])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_7-重复的子字符串"},{default:(0,e.w5)((()=>[R])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#排序类"},{default:(0,e.w5)((()=>[L])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_9-冒泡排序-先把最大值冒出来-再把倒数第二大的冒出来-以此类推"},{default:(0,e.w5)((()=>[F])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#基础算法之递归类"},{default:(0,e.w5)((()=>[S])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#数据结构之栈"},{default:(0,e.w5)((()=>[Q])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_17-棒球比赛"},{default:(0,e.w5)((()=>[E])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#数据结构之队列"},{default:(0,e.w5)((()=>[I])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_19-设计循环队列"},{default:(0,e.w5)((()=>[q])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#数据结构之链表"},{default:(0,e.w5)((()=>[H])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_21-排序链表"},{default:(0,e.w5)((()=>[T])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#数据结构之矩阵"},{default:(0,e.w5)((()=>[B])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_23-螺旋矩阵"},{default:(0,e.w5)((()=>[G])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#进阶算法-思想"},{default:(0,e.w5)((()=>[O])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#进阶算法之贪心算法"},{default:(0,e.w5)((()=>[z])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#进阶算法之动态规划"},{default:(0,e.w5)((()=>[D])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_33-不同路径ii"},{default:(0,e.w5)((()=>[$])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#_34-k站中转内最便宜的航班"},{default:(0,e.w5)((()=>[X])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#【面试题】"},{default:(0,e.w5)((()=>[K])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#【7】找出一个长字符串中连续重复次数最多的字符-如-在-nddemdereeeffetcssssfggddregg-中-s-重复出现次数-4-次最多-因此-s-为连续重复出现最长的字符。"},{default:(0,e.w5)((()=>[J])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#【10】实现一个promise延迟对象-defer"},{default:(0,e.w5)((()=>[Y])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#【11】如何终止promise链"},{default:(0,e.w5)((()=>[Z])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#【12】promise-all"},{default:(0,e.w5)((()=>[V])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#【13】promise-race"},{default:(0,e.w5)((()=>[nn])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#【14】如何终止一个promise-中断promise-promise超时"},{default:(0,e.w5)((()=>[sn])),_:1})])])])])]),an,en,tn,ln,on,pn,cn,_n,un,rn,kn,bn,mn,Un,dn,fn,gn,wn,yn,hn,vn,(0,e.Wm)(t),xn,jn,An,Wn,Mn,Nn,Pn,Cn,(0,e.Wm)(t),Rn,Ln,Fn,(0,e.Wm)(l,null,{default:(0,e.w5)((()=>[Sn])),_:1}),Qn,En,In,qn,(0,e.Wm)(l,null,{default:(0,e.w5)((()=>[Hn])),_:1}),Tn,Bn,Gn,On,zn,Dn,$n,Xn,Kn,Jn,Yn,(0,e.Wm)(l,null,{default:(0,e.w5)((()=>[Zn,Vn,ns])),_:1}),ss,as,es,ts,ls,os,ps,cs,_s,us,rs,ks,is,bs,ms,(0,e.Wm)(t),Us,ds,fs,gs,ws,ys,hs,vs,xs,js,As,Ws,Ms,Ns,Ps,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("img",{src:n.$withBase("/img/bubbleSort.gif")},null,8,Cs)])]),Rs,(0,e.Wm)(t),Ls,(0,e._)("img",{src:n.$withBase("/img/selectionSort.gif")},null,8,Fs),Ss,(0,e.Wm)(t),Qs,Es,Is,qs,Hs,Ts,Bs,Gs,Os,zs,Ds,(0,e.Wm)(t),$s,Xs,Ks,Js,Ys,Zs,Vs,na,sa,(0,e.Wm)(t),(0,e.Wm)(l,null,{default:(0,e.w5)((()=>[aa])),_:1}),ea,ta,la,oa,pa,ca,_a,ua,(0,e.Wm)(t),(0,e.Wm)(l,null,{default:(0,e.w5)((()=>[ra])),_:1}),ka,ia,ba,ma,Ua,da,fa,ga,wa,(0,e.Wm)(t),ya,ha,va,xa,ja,(0,e.Wm)(t),Aa,Wa,Ma,Na,Pa,Ca,Ra,La,Fa,Sa,Qa,(0,e.Wm)(t),Ea,Ia,qa,Ha,Ta,Ba,Ga,Oa,za,Da,(0,e.Wm)(l,null,{default:(0,e.w5)((()=>[$a])),_:1}),Xa,Ka,Ja,Ya,(0,e.Wm)(t),Za,Va,ne,se,ae,ee,te,le,oe,(0,e.Wm)(o),pe,ce,_e,ue,re,ke,ie,be,me,(0,e.Wm)(o),Ue,de,fe,ge,we,ye,he,ve,xe,je,Ae,We,Me,Ne,Pe,Ce,Re,Le,(0,e.Wm)(t),Fe,Se,Qe,Ee,Ie,qe,He,Te,Be,Ge,Oe,(0,e.Wm)(o),ze,De,$e,Xe,Ke,Je,Ye,Ze,Ve,(0,e.Wm)(o),nt,st,at,et,tt,lt,ot,(0,e.Wm)(o),pt,ct,_t,ut,(0,e.Wm)(o),rt,kt,it,bt,mt,Ut,dt,ft,gt,wt,yt,ht,(0,e.Wm)(o),vt,xt,jt,At,Wt,Mt,Nt,Pt,Ct,Rt,Lt,(0,e.Wm)(t),Ft,St,Qt,Et,It,qt,Ht,Tt,Bt,(0,e.Wm)(t),Gt,Ot,zt,Dt,$t,Xt,Kt,Jt,Yt,Zt,Vt,nl,sl,al,el,tl,ll,ol,pl,cl,_l,ul,rl,kl,il,bl,ml,Ul,dl,fl,gl,wl,yl,(0,e.Wm)(t),hl,vl,xl,jl,Al,(0,e.Wm)(t),Wl,Ml,Nl,Pl,Cl,Rl,Ll,Fl,Sl,Ql,El,Il,ql,(0,e.Wm)(t),Hl,Tl,Bl,Gl,Ol,zl,(0,e.Wm)(t),Dl,$l,Xl,Kl,Jl,Yl,(0,e.Wm)(t),Zl,Vl,no,so,ao,eo,to,lo,oo,po,co,_o,uo,ro,ko,io,bo,mo,Uo,fo,go,wo,yo,ho,vo],64)}}},4327:(n,s,a)=>{n.exports=a.p+"assets/img/17_telephone_keypad.9a099935.png"},629:(n,s,a)=>{n.exports=a.p+"assets/img/divisor.9de465fc.jpg"},3546:(n,s,a)=>{n.exports=a.p+"assets/img/heap.98911d1f.jpg"},8924:(n,s,a)=>{n.exports=a.p+"assets/img/heapsort.c2d7cea8.jpg"},9293:(n,s,a)=>{n.exports=a.p+"assets/img/optimal-path1.4ca257ca.png"},3292:(n,s,a)=>{n.exports=a.p+"assets/img/optimal-path2.4ca257ca.png"},220:(n,s,a)=>{n.exports=a.p+"assets/img/optimal-path3.b9b7631b.png"},9107:(n,s,a)=>{n.exports=a.p+"assets/img/queue1.41828a52.png"},4676:(n,s,a)=>{n.exports=a.p+"assets/img/quick-sort.ce8937ec.png"},8267:(n,s,a)=>{n.exports=a.p+"assets/img/quicksort.8cf74366.png"},6901:(n,s,a)=>{n.exports=a.p+"assets/img/robot-path.986e567c.png"},9579:(n,s,a)=>{n.exports=a.p+"assets/img/robot_maze.baa7b95a.png"},8564:(n,s,a)=>{n.exports=a.p+"assets/img/sort1.7239b8b0.jpg"},4300:(n,s,a)=>{n.exports=a.p+"assets/img/symmetric-binary-tree.6a9c810c.png"},1486:(n,s,a)=>{n.exports=a.p+"assets/img/toMaxDui.8a6731bb.png"}}]);