"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3336],{7601:(e,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t={key:"v-424639bd",path:"/Frontend/js/jsbasic/shenrubibao.html",title:"深入理解javascript原型链和闭包",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"3. prototype原型",slug:"_3-prototype原型",children:[]},{level:2,title:"4. 隐式原型",slug:"_4-隐式原型",children:[]},{level:2,title:"5. Instanceof",slug:"_5-instanceof",children:[]},{level:2,title:"6. 继承",slug:"_6-继承",children:[]},{level:2,title:"7. 原型的灵活性",slug:"_7-原型的灵活性",children:[]},{level:2,title:"8. 简述执行上下文(上)",slug:"_8-简述执行上下文-上",children:[]},{level:2,title:"9. 简述执行上下文(下)",slug:"_9-简述执行上下文-下",children:[]},{level:2,title:"10. this",slug:"_10-this",children:[]},{level:2,title:"11. 执行上下文栈",slug:"_11-执行上下文栈",children:[]},{level:2,title:"12. 简介[作用域]",slug:"_12-简介-作用域",children:[]},{level:2,title:"13. [作用域]和[上下文环境]",slug:"_13-作用域-和-上下文环境",children:[]},{level:2,title:"14. 从【自由变量】到【作用域链】",slug:"_14-从【自由变量】到【作用域链】",children:[]},{level:2,title:"15. 闭包",slug:"_15-闭包",children:[]},{level:2,title:"16. 完结",slug:"_16-完结",children:[]}],filePathRelative:"Frontend/js/jsbasic/shenrubibao.md",git:{updatedTime:1563495258e3,contributors:[]}}},4813:(e,n,a)=>{a.r(n),a.d(n,{default:()=>s});const t=(0,a(6252).uE)('<h1 id="深入理解javascript原型链和闭包" tabindex="-1"><a class="header-anchor" href="#深入理解javascript原型链和闭包" aria-hidden="true">#</a> 深入理解javascript原型链和闭包</h1><ul><li>一切引用类型都是对象，对象是属性的集合。对象都是通过函数来创建的，而函数又是一种对象。</li></ul><h2 id="_3-prototype原型" tabindex="-1"><a class="header-anchor" href="#_3-prototype原型" aria-hidden="true">#</a> 3. prototype原型</h2><ol><li><p>Prototype原型</p></li><li><p>每个函数都有一个属性叫做prototype，这个prototype的属性值是一个对象，默认的只有一个叫做constructor的属性，指向这个函数本身。</p><p>Object.Prototype:</p><p>constructor,</p><p>hasOwnProperty,</p><p>isPrototypeOf,</p><p>propertyIsEnumerable,</p><p>toLocaleString,</p><p>toString,</p><p>ValueOf</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>var $div = $(&#39;div&#39;);\n$div.attr(&#39;myName&#39;, &#39;王福朋&#39;);\n\n//这样实现\n myjQuery.prototype.attr = function () {\n \t\t//……\n };\n $(&#39;div&#39;) = new myjQuery();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Fn是一个函数，fn对象是从Fn函数new出来的，这样fn对象就可以调用Fn.prototype中的属性。</p><p>因为每个对象都有一个隐藏的属性——“_<em>proto</em>_”，这个属性引用了创建这个对象的函数的prototype。即：fn._<em>proto</em>_ === Fn.prototype</p></li></ol><h2 id="_4-隐式原型" tabindex="-1"><a class="header-anchor" href="#_4-隐式原型" aria-hidden="true">#</a> 4. 隐式原型</h2><p>每个对象都有一个__proto__属性，指向创建该对象的函数的prototype。</p><p>但是Object.prototype是特例——它的__proto__指向的是null。</p><p>Function是被自身创建的。所以它的__proto__指向了自身的Prototype。</p><h2 id="_5-instanceof" tabindex="-1"><a class="header-anchor" href="#_5-instanceof" aria-hidden="true">#</a> 5. Instanceof</h2><p>Instanceof运算符的第一个变量是一个对象，暂时称为A；第二个变量一般是一个函数，暂时称为B。</p><p>Instanceof的判断队则是：沿着A的__proto__这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。</p><p>instanceof表示的就是一种继承关系，或者原型链的结构</p><h2 id="_6-继承" tabindex="-1"><a class="header-anchor" href="#_6-继承" aria-hidden="true">#</a> 6. 继承</h2><p>访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着__proto__这条链向上找，这就是原型链。</p><p>所有的对象的原型链找到最后都是Function.prototype=&gt;Object.prototype=&gt;null，所以会继承Function构造函数和Object构造函数上的所有方法。</p><h2 id="_7-原型的灵活性" tabindex="-1"><a class="header-anchor" href="#_7-原型的灵活性" aria-hidden="true">#</a> 7. 原型的灵活性</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//可自定义一个函数，并且自己去修改prototype.toString()方法\nfunction Foo(){}\nval f1=new Foo();\n\nFoo.prototype.toString=function(){\n  return &#39;殷艺&#39;\n}\nconsole.log(f1.toString())//殷艺\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果你要添加内置方法的原型属性，最好做一步判断，如果该属性不存在，则添加。如果本来就存在，就没必要再添加了。</p><h2 id="_8-简述执行上下文-上" tabindex="-1"><a class="header-anchor" href="#_8-简述执行上下文-上" aria-hidden="true">#</a> 8. 简述执行上下文(上)</h2><p>javascript在执行一个代码段之前，都会进行这些“准备工作”来生成执行上下文。这个“代码段”其实分三种情况——全局代码，函数体，eval代码。</p><ul><li>变量、函数表达式——变量声明，默认赋值为undefined；</li><li>this——赋值；</li><li>函数声明——赋值；</li></ul><p>这三种数据的准备情况我们称之为“执行上下文”或者“执行上下文环境”。</p><h2 id="_9-简述执行上下文-下" tabindex="-1"><a class="header-anchor" href="#_9-简述执行上下文-下" aria-hidden="true">#</a> 9. 简述执行上下文(下)</h2><p>函数每被调用一次，都会产生一个新的执行上下文环境。</p><p>函数在定义的时候（不是调用的时候），就已经确定了函数体内部自由变量的作用域</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>var a=10;\nfunction fn(){\n  console.log(a)//a是自由变量，函数创建时，就确定了a要取值的作用域\n}\nfunction bar(f){\n  var a=20;\n  f();//打印10，而不是20\n}\nbar(fn);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>全局代码的上下文环境数据内容为：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>普通变量（包括函数表达式），如： var a = 10;</td><td>声明（默认赋值为undefined）</td></tr><tr><td>函数声明，如： function fn() { }</td><td>赋值</td></tr><tr><td>this</td><td>赋值</td></tr></tbody></table><p>如果代码段是函数体，那么在此基础上需要附加：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>参数</td><td>赋值</td></tr><tr><td>arguments</td><td>赋值</td></tr><tr><td>自由变量的取值作用域</td><td>赋值</td></tr></tbody></table><p>给执行上下文环境下一个通俗的定义——在执行代码之前，把将要用到的所有的变量都事先拿出来，有的直接赋值了，有的先用undefined占个空。</p><h2 id="_10-this" tabindex="-1"><a class="header-anchor" href="#_10-this" aria-hidden="true">#</a> 10. this</h2><p>在函数中this到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确定不了。</p><p><strong>情况1：构造函数</strong></p><p>如果函数作为构造函数用，那么其中的this就代表它即将new出来的对象。</p><p>如果直接调用Foo函数，这种情况下this是window</p><p><strong>情况2：函数作为对象的一个属性</strong></p><p>作为对象的一个属性被调用时，函数中的this指向该对象。</p><p>如果fn函数被赋值到了另一个变量中，并没有作为obj的一个属性被调用，那么this的值就是window，this.x为undefined。</p><p><strong>情况3：函数用call或者apply调用</strong></p><p>this的值取传入的对象的值。</p><p><strong>情况4：全局 &amp;调用普通函数</strong></p><p>在全局环境下，this永远是window</p><p>普通函数在调用时，其中的this也都是window。</p><p>以下情况注意：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>var obj={\n  x:10,\n  fn:function(){\n    function f(){\n      console.log(this);//Window\n      console.log(this.x)//undefined\n    }\n    fn();\n  }\n}\nobj.fn();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>函数f虽然是在obj.fn内部定义的，但是它仍然是一个普通的函数，this仍然指向window。</p><h2 id="_11-执行上下文栈" tabindex="-1"><a class="header-anchor" href="#_11-执行上下文栈" aria-hidden="true">#</a> 11. 执行上下文栈</h2><p>执行全局代码时，会产生一个执行上下文环境，每次调用函数都又会产生执行上下文环境。当函数调用完成时，这个上下文环境以及其中的数据都会被消除，再重新回到全局上下文环境。处于活动状态的执行上下文环境只有一个。</p><h2 id="_12-简介-作用域" tabindex="-1"><a class="header-anchor" href="#_12-简介-作用域" aria-hidden="true">#</a> 12. 简介[作用域]</h2><p><strong>javascript除了全局作用域之外，只有函数可以创建的作用域。</strong></p><p>所以，我们在声明变量时，全局代码要在代码前端声明，函数中要在函数体一开始就声明好。除了这两个地方，其他地方都不要出现变量声明。而且建议用“单var”形式。</p><p>作用域有上下级的关系，上下级关系的确定就看函数是在哪个作用域下创建的。</p><p>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p><p>jQuery源码的最外层是一个自动执行的匿名函数：原因就是在jQuery源码中，声明了大量的变量，这些变量将通过一个函数被限制在一个独立的作用域中，而不会与全局作用域或者其他函数作用域的同名变量产生冲突。</p><h2 id="_13-作用域-和-上下文环境" tabindex="-1"><a class="header-anchor" href="#_13-作用域-和-上下文环境" aria-hidden="true">#</a> 13. [作用域]和[上下文环境]</h2><p>作用域只是一个“地盘”，一个抽象的概念，其中没有变量。要通过作用域对应的执行上下文环境来获取变量的值。</p><p>作用域中变量的值是在执行过程中产生的确定的，而作用域却是在函数创建时就确定了。</p><p>如果要查找一个作用域下某个变量的值，就需要找到这个作用域对应的执行上下文环境，再在其中寻找变量的值。</p><h2 id="_14-从【自由变量】到【作用域链】" tabindex="-1"><a class="header-anchor" href="#_14-从【自由变量】到【作用域链】" aria-hidden="true">#</a> 14. 从【自由变量】到【作用域链】</h2><p>自由变量:</p><p>在A作用域中使用的变量x，却没有在A作用域中声明（即在其他作用域中声明的），对于A作用域来说，x就是一个自由变量。</p><h2 id="_15-闭包" tabindex="-1"><a class="header-anchor" href="#_15-闭包" aria-hidden="true">#</a> 15. 闭包</h2><p>两个应用场景：函数作为返回值，函数作为参数传递。</p><p>要去创建这个函数的作用域取值，而不是“父作用域”。</p><p>这就是需要理解闭包的核心内容。</p><h2 id="_16-完结" tabindex="-1"><a class="header-anchor" href="#_16-完结" aria-hidden="true">#</a> 16. 完结</h2>',67),s={render:function(e,n){return t}}}}]);