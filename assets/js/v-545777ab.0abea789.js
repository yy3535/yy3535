"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2676],{2127:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-545777ab",path:"/frontend/js/runenv/",title:"运行环境",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"HTTP协议",slug:"http协议",children:[{level:3,title:"UDP和TCP",slug:"udp和tcp",children:[]}]},{level:2,title:"页面加载",slug:"页面加载",children:[{level:3,title:"浏览器加载资源的过程",slug:"浏览器加载资源的过程",children:[]},{level:3,title:"为何要把 css 放在 head 中",slug:"为何要把-css-放在-head-中",children:[]},{level:3,title:"为何要把 JS 放在 body 最后",slug:"为何要把-js-放在-body-最后",children:[]},{level:3,title:"window.onload和DOMContentLoaded区别",slug:"window-onload和domcontentloaded区别",children:[]},{level:3,title:"加载资源优化",slug:"加载资源优化",children:[]},{level:3,title:"渲染优化",slug:"渲染优化",children:[]},{level:3,title:"详细解说",slug:"详细解说",children:[]}]},{level:2,title:"安全性",slug:"安全性",children:[{level:3,title:"推荐书",slug:"推荐书",children:[]},{level:3,title:"web 攻击方式",slug:"web-攻击方式",children:[]}]}],filePathRelative:"frontend/js/runenv/README.md",git:{updatedTime:1630227828e3,contributors:[]}}},3376:(n,s,a)=>{a.r(s),a.d(s,{default:()=>os});var p=a(6252);const t=(0,p._)("h1",{id:"运行环境",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#运行环境","aria-hidden":"true"},"#"),(0,p.Uk)(" 运行环境")],-1),e={class:"table-of-contents"},o=(0,p.Uk)("HTTP协议"),l=(0,p.Uk)("UDP和TCP"),c=(0,p.Uk)("页面加载"),u=(0,p.Uk)("浏览器加载资源的过程"),i=(0,p.Uk)("为何要把 css 放在 head 中"),r=(0,p.Uk)("为何要把 JS 放在 body 最后"),k=(0,p.Uk)("window.onload和DOMContentLoaded区别"),m=(0,p.Uk)("加载资源优化"),b=(0,p.Uk)("渲染优化"),d=(0,p.Uk)("详细解说"),g=(0,p.Uk)("安全性"),h=(0,p.Uk)("推荐书"),f=(0,p.Uk)("web 攻击方式"),w=(0,p.uE)('<h2 id="http协议" tabindex="-1"><a class="header-anchor" href="#http协议" aria-hidden="true">#</a> HTTP协议</h2><ul><li>HTTP协议的主要特点 <ul><li>简单快速(每个资源是固定的，处理起来简单，访问资源输入URI就行)</li><li>灵活（每个http协议头部分有个类型，可请求不同类型资源）</li><li>无连接【重要】（连接一次就会断掉，不会保持连接）</li><li>无状态【重要】（客户端和服务端是两种身份，单http协议上是不能区分两次连接的身份的）</li></ul></li><li>HTTP报文的组成部分 <ul><li>请求报文 <ul><li>请求行 <ul><li>请求方法</li><li>URL</li><li>http协议以及版本</li></ul></li><li>首部 <ul><li>key,value值告诉服务端我要哪些内容，哪些类型</li></ul></li><li>空行 <ul><li>请求头和请求体的分割</li></ul></li><li>主体 <ul><li>数据部分</li></ul></li></ul></li></ul></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token comment">&lt;!-- 请求行 --&gt;</span>\nPOST /search HTTP/1.1  \n<span class="token comment">&lt;!-- 首部 --&gt;</span>\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, \napplication/msword, application/x-silverlight, application/x-shockwave-flash, <span class="token italic"><span class="token punctuation">*</span><span class="token content">/</span><span class="token punctuation">*</span></span>  \nReferer: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.google.cn/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>http://www.google.cn/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>  \nAccept-Language: zh-cn  \nAccept-Encoding: gzip, deflate  \nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; TheWorld)  \nHost: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.google.cn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>www.google.cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>  \nConnection: Keep-Alive  \nCookie: PREF=ID=80a06da87be9ae3c:U=f7167333e2c3b714:NW=1:TM=1261551909:LM=1261551917:S=ybYcq2wpfefs4V9g; \nNID=31=ojj8d-IygaEtSxLgaJmqSjVhCspkviJrB6omjamNrSm8lZhKy_yMfO2M4QMRKcH1g0iQv9u-2hfBW7bUFwVh7pGaRUb0RnHcJU37y-\nFxlRugatx63JLv7CWMD6UB_O_r  \n\nhl=zh-CN&amp;source=hp&amp;q=domety\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>响应报文 <ul><li>状态行</li><li>首部</li><li>空行</li><li>主体</li></ul></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token comment">&lt;!-- 状态行 --&gt;</span>\nHTTP/1.1 200 OK\n<span class="token comment">&lt;!-- 响应头 --&gt;</span>\nDate: Sat, 31 Dec 2005 23:59:59 GMT\nContent-Type: text/html;charset=ISO-8859-1\nContent-Length: 122\n\n＜html＞\n＜head＞\n＜title＞Wrox Homepage＜/title＞\n＜/head＞\n＜body＞\n＜!-- body goes here --＞\n＜/body＞\n＜/html＞\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',5),v=(0,p.uE)("<p>HTTP方法</p><ul><li><p>get(获取资源)</p></li><li><p>post(传输资源)</p></li><li><p>put(更新资源)</p></li><li><p>delete(删除资源)</p></li><li><p>options(试探请求，跨域时会用到)</p></li><li><p>head(获得报文首部)</p></li><li><p>前四个叫做resful风格</p></li></ul>",2),y=(0,p.Uk)("POST和GET的区别"),x=(0,p.Uk)(" - "),q=(0,p.Uk)("GET在浏览器回退时是无害的，而POST会再次提交请求"),_=(0,p.Uk)(" - "),T=(0,p.Uk)("GET请求会被浏览器主动缓存，而POST不可以"),S=(0,p.Uk)(" - "),U=(0,p.Uk)("GET请求参数会被完整保留在浏览器历史纪录里，而POST中的参数不会被保留"),j=(0,p.Uk)(" - "),E=(0,p.Uk)("GET请求在URL中传送的参数是有长度限制的，而POST没有限制"),C=(0,p.Uk)(" - 不同浏览器不一样，如果使用get请求，拼接的url不能太长，否则会被浏览器截断，http协议对长度有限制，所以太长发不出去，会截断 - "),P=(0,p.Uk)("对参数的数据类型，GET只接受ASCII字符，而POST没有限制"),W=(0,p.Uk)(" - "),L=(0,p.Uk)("GET参数通过URL传递，POST放在Request body中（了解）"),D=(0,p.Uk)(" - GET产生的URL可以被收藏，而POST不可以(可不记) - GET请求只能进行url编码，而POST支持多种编码方式(可记可不记) - GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息(了解) - 【总结】 - Get 请求能缓存，Post 不能 - Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里（当然你想写到 body 里也是可以的），且会被浏览器保存历史纪录。Post 不会，但是在抓包的情况下都是一样的。 - URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的 - Post 支持更多的编码类型且不对数据类型限制 "),M=(0,p.uE)('<li><p>HTTP状态码</p><table><thead><tr><th>状态</th><th>含义</th><th></th></tr></thead><tbody><tr><td>1XX</td><td>Informational(信息性状态码)</td><td></td></tr><tr><td>2XX</td><td>Success(成功状态码)</td><td></td></tr><tr><td>3XX</td><td>Redirection(重定向)</td><td></td></tr><tr><td>4XX</td><td>Client Error(客户端错误状态码)</td><td></td></tr><tr><td>5XX</td><td>Server Error(服务器错误状态吗)</td><td></td></tr></tbody></table><ul><li>2XX 成功 <ul><li>200 OK 客户端发过来的数据被正常处理</li><li>204 Not Content 正常响应，没有实体</li><li>206 Partial Content 范围请求，返回部分数据，响应报文中由Content-Range指定实体内容(较多，audio,video标签，文件很大时会返回这个)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>curl <span class="token operator">-</span>v <span class="token operator">--</span>header <span class="token string">&quot;Range:bytes=0-3&quot;</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">www.baidu.com</span><span class="token regex-delimiter">/</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>3XX 重定向 <ul><li>301 Moved Permanently：永久重定向(换域名)</li><li>302 Found：临时重定向，规范要求方法名不变，但是都会改变</li><li>303(See Other) 和302类似，但必须用GET方法</li><li>304 Not Modified：配合(If-Match、If-Modified-Since、If-None_Match、If-Range、If-Unmodified-Since)。客户端有缓冲的文档并发出了一个条件性的请求，服务器告诉客户，原来的缓冲文档还可以继续使用</li><li>307(Temporary Redirect) 临时重定向，不该改变请求方法</li></ul></li><li>4XX 客户端错误 <ul><li>400 Bad Request：请求报文语法错误</li><li>401 Unauthorized：需要认证（没权限）</li><li>403 Forbidden：服务器拒绝访问对应的资源(较多，某页面的地址只能通过服务器来访问)</li><li>404 Not Found：服务器上无法找到资源</li></ul></li><li>5XX 服务器端错误 <ul><li>500 Internal Server Error：服务器故障</li><li>503 Server Unavailable：服务器处于超负载或正在停机维护</li></ul></li></ul></li>',1),O=(0,p.Uk)("什么是持久连接"),I=(0,p.Uk)(" - http普通模式是无连接无状态，但是"),R=(0,p.Uk)("可设置keep-alive模式支持持久链接"),H=(0,p.Uk)("，当出现对服务器的后继请求事，避免了建立或者重新建立连接。从http1.1版本开始才支持。 "),X=(0,p.Uk)("什么是管线化"),N=(0,p.Uk)(" - "),F=(0,p.Uk)("普通持久连接"),G=(0,p.Uk)(" - "),B=(0,p.Uk)("请求1->响应1->请求2->响应2->请求3->响应3"),A=(0,p.Uk)(" - "),J=(0,p.Uk)("管线化持久连接"),z=(0,p.Uk)(" - "),Q=(0,p.Uk)("请求1->请求2->请求3->响应1->响应2->响应3(请求打包过去，响应打包发回来)"),V=(0,p.Uk)(" - "),K=(0,p.Uk)("管线化机制通过持久连接完成，http1.1才支持"),Y=(0,p.Uk)(" - "),Z=(0,p.Uk)("只有GET和HEAD请求可以管线化，而POST有所限制"),$=(0,p.Uk)(" - "),nn=(0,p.Uk)("初次创建连接不应启动管线机制，因为对方服务器不一定支持http/1.1版本的协议"),sn=(0,p.Uk)(" - 管线化不会影响响应到来的顺序 - http/1.1要求服务端支持管线化，但并不要求服务端对响应进行管线化处理，只要求对管线化的请求不失败即可 - 因为以上服务端问题，开启管线化可能并不会大幅度提升性能，而且很多服务器和代理程序对管线化支持并不好，因此Chrome和Firefox默认并未开启管线化支持 "),an=(0,p.uE)('<h3 id="udp和tcp" tabindex="-1"><a class="header-anchor" href="#udp和tcp" aria-hidden="true">#</a> UDP和TCP</h3><ul><li>UDP 1.面向无连接 2.有单播，多播，广播的功能 3.UDP 是面向报文的 4.不可靠性 5.头部开销小，传输数据报文时是很高效的。</li><li>TCP <ol><li>TCP 连接过程(三次握手)</li><li>TCP 断开链接（四次挥手）</li><li>特点</li></ol><ul><li>面向连接</li><li>仅支持单播传输</li><li>面向字节流</li><li>可靠传输</li><li>提供拥塞控制</li><li>TCP 提供全双工通信</li></ul></li><li>总结 <ul><li>TCP 向上层提供面向连接的可靠服务 ，UDP 向上层提供无连接不可靠服务。</li><li>虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为</li><li>对数据准确性要求高，速度可以相对较慢的，可以选用 TCP</li></ul></li></ul><h2 id="页面加载" tabindex="-1"><a class="header-anchor" href="#页面加载" aria-hidden="true">#</a> 页面加载</h2><h3 id="浏览器加载资源的过程" tabindex="-1"><a class="header-anchor" href="#浏览器加载资源的过程" aria-hidden="true">#</a> 浏览器加载资源的过程</h3>',4),pn=(0,p.Uk)(" #### 加载资源的形式 "),tn=(0,p._)("ul",null,[(0,p._)("li",null,"输入 url 加载 html"),(0,p._)("li",null,"http://coding.m.imooc.com"),(0,p._)("li",null,"加载 html 中的静态资源"),(0,p._)("li",null,[(0,p._)("code",null,'<script src="/static/js/jquery.js"><\/script>')])],-1),en=(0,p.Uk)(" #### 从输入url到得到html的过程 "),on=(0,p._)("ul",null,[(0,p._)("li",null,"浏览器根据 DNS 服务器得到域名的 IP 地址"),(0,p._)("li",null,"向这个 IP 的机器发送 http 请求"),(0,p._)("li",null,"服务器收到、处理并返回 http 请求"),(0,p._)("li",null,"浏览器得到返回内容")],-1),ln=(0,p.uE)(' ### 浏览器渲染页面的过程 <ul><li>根据 HTML 结构生成 DOM Tree</li><li>根据 CSS 生成 CSS Rule</li><li>将 DOM 和 CSSOM 整合形成 RenderTree</li><li>根据 RenderTree 开始渲染和展示</li><li>遇到<code>&lt;script&gt;</code>时，会执行并阻塞渲染</li></ul><h3 id="为何要把-css-放在-head-中" tabindex="-1"><a class="header-anchor" href="#为何要把-css-放在-head-中" aria-hidden="true">#</a> 为何要把 css 放在 head 中</h3><h3 id="为何要把-js-放在-body-最后" tabindex="-1"><a class="header-anchor" href="#为何要把-js-放在-body-最后" aria-hidden="true">#</a> 为何要把 JS 放在 body 最后</h3>',4),cn=(0,p.uE)('<h3 id="window-onload和domcontentloaded区别" tabindex="-1"><a class="header-anchor" href="#window-onload和domcontentloaded区别" aria-hidden="true">#</a> <code>window.onload</code>和<code>DOMContentLoaded</code>区别</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 页面的全部资源加载完才会执行，包括图片、视频等</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// DOM 渲染完即可执行，此时图片、视频还可能没有加载完</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',2),un=(0,p.Uk)(" ## 性能优化 - 原则 - 多使用内存、缓存或者其他方法 - 减少 CPU 计算、较少网络 "),rn={id:"加载资源优化",tabindex:"-1"},kn=(0,p._)("a",{class:"header-anchor",href:"#加载资源优化","aria-hidden":"true"},"#",-1),mn=(0,p.Uk)(),bn=(0,p.Uk)("加载资源优化"),dn=(0,p.uE)('<ul><li>静态资源的压缩合并（JS代码压缩合并、CSS代码压缩合并、雪碧图）</li><li>静态资源缓存（资源名称加 MD5 戳）</li><li>使用 CND 让资源加载更快</li><li>使用 SSR 后端渲染，数据直接突出到 HTML 中</li></ul><ol start="3"><li>合并请求：nginxMok ,sprite雪碧图</li><li>缓存 from cache(memory,disk) localstorage 本地缓存策略优化 HTTP头的缓存cache-control:max-age-60</li><li>tcp网络连接优化，tcp调优 http/2 keep-alive</li><li>硬件 加大带宽 使用cdn(对象存储)</li><li>资源大小：gzip,webp,image压缩，cookie体积减小</li><li>预加载：dns预解析,多个cdn域名,异步读取js(defer async)</li></ol>',2),gn={id:"渲染优化",tabindex:"-1"},hn=(0,p._)("a",{class:"header-anchor",href:"#渲染优化","aria-hidden":"true"},"#",-1),fn=(0,p.Uk)(),wn=(0,p.Uk)("渲染优化"),vn=(0,p.uE)('<ul><li>CSS 放前面 JS 放后面</li><li>尽早执行操作（<code>DOMContentLoaded</code>）</li><li>懒加载（图片懒加载、下拉加载更多）</li><li>减少DOM 查询，对 DOM 查询做缓存</li><li>减少DOM 操作，多个操作尽量合并在一起执行（<code>DocumentFragment</code>）</li><li>事件节流</li></ul><h3 id="详细解说" tabindex="-1"><a class="header-anchor" href="#详细解说" aria-hidden="true">#</a> 详细解说</h3><h4 id="静态资源的压缩合并" tabindex="-1"><a class="header-anchor" href="#静态资源的压缩合并" aria-hidden="true">#</a> 静态资源的压缩合并</h4><p>如果不合并，每个都会走一遍之前介绍的请求过程</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>b.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果压缩了，就只走一遍请求过程</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="静态资源缓存" tabindex="-1"><a class="header-anchor" href="#静态资源缓存" aria-hidden="true">#</a> 静态资源缓存</h4><p>通过连接名称控制缓存</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc_1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>只有内容改变的时候，链接名称才会改变</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc_2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="使用-cnd-让资源加载更快" tabindex="-1"><a class="header-anchor" href="#使用-cnd-让资源加载更快" aria-hidden="true">#</a> 使用 CND 让资源加载更快</h4><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="使用-ssr-后端渲染" tabindex="-1"><a class="header-anchor" href="#使用-ssr-后端渲染" aria-hidden="true">#</a> 使用 SSR 后端渲染</h4><p>如果提到 Vue 和 React 时，可以说一下</p><h4 id="css-放前面-js-放后面" tabindex="-1"><a class="header-anchor" href="#css-放前面-js-放后面" aria-hidden="true">#</a> CSS 放前面 JS 放后面</h4><p>将浏览器渲染的时候，已经提高</p><h4 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载" aria-hidden="true">#</a> 懒加载</h4><p>一开始先给为 src 赋值成一个通用的预览图，下拉时候再动态赋值成正式的图片</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preview.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-realsrc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="dom-查询做缓存" tabindex="-1"><a class="header-anchor" href="#dom-查询做缓存" aria-hidden="true">#</a> DOM 查询做缓存</h4><p>两端代码做一下对比</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> pList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> i\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> i\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>总结：DOM 操作，无论查询还是修改，都是非常耗费性能的，尽量减少</p><h4 id="合并-dom-插入" tabindex="-1"><a class="header-anchor" href="#合并-dom-插入" aria-hidden="true">#</a> 合并 DOM 插入</h4><p>DOM 操作是非常耗费性能的，因此插入多个标签时，先插入 Fragment 然后再统一插入DOM</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> listNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 要插入 10 个 li 标签</span>\n<span class="token keyword">var</span> frag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> x<span class="token punctuation">,</span> li<span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;List item &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">;</span>\n    frag<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nlistNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>frag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',29),yn=(0,p._)("h4",{id:"防抖和节流",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#防抖和节流","aria-hidden":"true"},"#"),(0,p.Uk)(" 防抖和节流")],-1),xn=(0,p._)("li",null,"防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的情况会每隔一定时间（参数wait）调用函数。",-1),qn=(0,p.Uk)("防抖(debounce)"),_n=(0,p.Uk)(" - "),Tn=(0,p.Uk)("让某个时间期限（如上面的1000毫秒）内，事件处理函数只执行最后一次"),Sn=(0,p.Uk)(" - underscore的debounce方法 松手后隔会再执行 "),Un=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> timeoutId\ntextarea<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token comment">// 如果有连续动作，那取消执行。直到1s内没有第二次点击，才不会取消执行。</span>\n    <span class="token punctuation">}</span>\n    timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;内容修改了&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// debounce</span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>immediate</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>immediate<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">let</span> callNow<span class="token operator">=</span><span class="token operator">!</span>timeout<span class="token punctuation">;</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    timeout<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      timeout<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 第三个参数表示首次点击有效果，之后就没效果了</span>\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token function">debounce</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>',1),jn=(0,p.Uk)("节流(Throttle)"),En=(0,p.Uk)(" - "),Cn=(0,p.Uk)("一段时间内，代码只执行一次。"),Pn=(0,p.Uk)(" - 执行一次后，暂时失效，过了一段时间后再重新激活 - underscore库中的throttle方法 "),Wn=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 事件功能有效</span>\ntextarea<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    valid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 事件功能失效</span>\n    timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;内容修改了&#39;</span><span class="token punctuation">)</span>\n        valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 事件功能有效</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 节流</span>\n<span class="token keyword">let</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 问题：最后一次不能触发，但希望最后一次可以触发</span>\n<span class="token comment">// function throttle(func,wait){</span>\n<span class="token comment">//   let previous=0;</span>\n<span class="token comment">//   return function (){</span>\n<span class="token comment">//     let now=Date.now();</span>\n<span class="token comment">//     if(now-previous&gt;wait){</span>\n<span class="token comment">//       func.apply(this,arguments);</span>\n<span class="token comment">//       previous=now;</span>\n<span class="token comment">//     }</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span>\n\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// trailing最后一次应该触发（默认触发）</span>\n  <span class="token keyword">let</span> args<span class="token punctuation">,</span>context<span class="token punctuation">,</span>previous<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>timeout<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">later</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    previous<span class="token operator">=</span>options<span class="token punctuation">.</span>leading<span class="token operator">===</span><span class="token boolean">false</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    args<span class="token operator">=</span>context<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">throttled</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    args<span class="token operator">=</span>arguments<span class="token punctuation">;</span>\n    context<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> now<span class="token operator">=</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>previous<span class="token operator">&amp;&amp;</span>options<span class="token punctuation">.</span>leading<span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span> previous<span class="token operator">=</span>now<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> remaning<span class="token operator">=</span>wait<span class="token operator">-</span><span class="token punctuation">(</span>now<span class="token operator">-</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>remaining<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token comment">// 第一次</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      previous<span class="token operator">=</span>now<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>trailing<span class="token operator">!==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      timeout<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span>remaning<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> throttled<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token function">throttle</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token punctuation">{</span>trailing<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><ul><li>loadash库中，将两个合起来成为一个</li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./debounce.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./throttle.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 第三个参数 表示首次 先触发一下</span>\n    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// debounce.js</span>\n<span class="token comment">// 防抖 + 节流</span>\n<span class="token comment">// debounce 就是上来后 先开一个定时 只要一直点击  到时间什么都不做 就在开一个定时器</span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> maxWait<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;maxWait&#39;</span> <span class="token keyword">in</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    maxWait <span class="token operator">=</span> opts<span class="token punctuation">.</span>maxWait<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> leading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 第一次点击时触发</span>\n  <span class="token keyword">let</span> trailing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 最后一次也要触发</span>\n  <span class="token comment">// loadash 定时器实现的</span>\n  <span class="token keyword">let</span> lastCallTime<span class="token punctuation">;</span> <span class="token comment">// 最后调用的时间 previous</span>\n  <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> lastThis<span class="token punctuation">;</span> <span class="token comment">// 返回函数的this</span>\n  <span class="token keyword">let</span> lastArgs<span class="token punctuation">;</span> <span class="token comment">// 返回函数的参数</span>\n  <span class="token comment">// shouldInvoke 是否应该调用</span>\n  <span class="token keyword">let</span> lastInvokeTime<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">shouldInvoke</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">now</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> sinceLastTime <span class="token operator">=</span> now <span class="token operator">-</span> lastCallTime<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> sinceLastInvoke <span class="token operator">=</span> now <span class="token operator">-</span> lastInvokeTime<span class="token punctuation">;</span>\n    <span class="token comment">// 第一次</span>\n    <span class="token keyword">return</span> lastCallTime <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> sinceLastTime <span class="token operator">&gt;</span> wait <span class="token operator">||</span> sinceLastInvoke <span class="token operator">&gt;=</span> maxWait<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// leadingEdge 是否第一次执行</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">invokeFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    lastInvokeTime <span class="token operator">=</span> time<span class="token punctuation">;</span> <span class="token comment">// 最终的调用函数的时间</span>\n    <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>lastThis<span class="token punctuation">,</span> lastArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// startTimer就是开启了一个定时器</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">startTimer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">timerExpired<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>timerExpired<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">remainingWait</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">now</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastCallTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">trailingEdge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    timeout <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>trailing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">invokeFunc</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">timerExpired</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前定时器到时间了 看看是否需要执行这个函数</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldInvoke</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果需要调用</span>\n      <span class="token comment">// 触发结束的方法</span>\n      <span class="token keyword">return</span> <span class="token function">trailingEdge</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">startTimer</span><span class="token punctuation">(</span>timerExpired<span class="token punctuation">,</span> <span class="token function">remainingWait</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">leadingEdge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    lastInvokeTime <span class="token operator">=</span> time<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 需要执行就调用函数</span>\n      <span class="token function">invokeFunc</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">startTimer</span><span class="token punctuation">(</span>timerExpired<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启一个定时器 看下一次定时器到了 是否需要执行func</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">debounced</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    lastThis <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    lastArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 判断当前的debounce时是否需要执行</span>\n    <span class="token keyword">let</span> isInvoking <span class="token operator">=</span> <span class="token function">shouldInvoke</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    lastCallTime <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isInvoking<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">leadingEdge</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> debounced<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// throttle.js</span>\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token comment">// maxWait最大的点击时间</span>\n    maxWait<span class="token operator">:</span>wait\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span>20000000px</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">scroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        flag <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>loggeer<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">loggeer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span>scroll<span class="token punctuation">)</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',6),Ln=(0,p.uE)(' - 应用 - 搜索框input事件，例如要支持输入实时搜索可以使用节流方案（间隔一段时间就必须查询相关内容），或者实现输入间隔大于某个值（如500ms），就当做用户输入完成，然后开始搜索，具体使用哪种方案要看业务需求。 - 页面resize事件，常见于需要做页面适配的时候。需要根据最终呈现的页面情况进行dom渲染（这种情形一般是使用防抖，因为只需要判断最后一次的变化情况） #### 尽早执行操作 <div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 页面的全部资源加载完才会执行，包括图片、视频等</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// DOM 渲染完即可执行，此时图片、视频还可能没有加载完</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性" aria-hidden="true">#</a> 安全性</h2><h3 id="推荐书" tabindex="-1"><a class="header-anchor" href="#推荐书" aria-hidden="true">#</a> 推荐书</h3><ul><li>阅读《白帽子讲web安全》</li></ul><h3 id="web-攻击方式" tabindex="-1"><a class="header-anchor" href="#web-攻击方式" aria-hidden="true">#</a> web 攻击方式</h3>',6),Dn=(0,p._)("li",null,[(0,p._)("p",null,"SQL注入"),(0,p._)("ul",null,[(0,p._)("li",null,"例如做一个系统的登录界面，输入用户名和密码，提交之后，后端直接拿到数据就拼接 SQL 语句去查询数据库。如果在输入时进行了恶意的 SQL 拼装，那么最后生成的 SQL 就会有问题。但是现在稍微大型的一点系统，都不会这么做，从提交登录信息到最后拿到授权，都经过层层的验证。因此，SQL 注入都只出现在比较低端小型的系统上。")])],-1),Mn=(0,p.uE)('<p>XSS</p><ul><li>基本概念和缩写 <ul><li>Cross Site Scripting，【记】跨站脚本攻击</li></ul></li><li>攻击原理 <ul><li>与CSRF区别，不需要任何验证，通过合法方式向页面注入js，比如评论</li></ul></li><li>攻击类型 <ul><li>反射型 <ul><li>查询的参数里有代码</li><li>查询参数用encodeURIComponent编译即可。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// index.js</span>\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 关闭浏览器的XSS拦截</span>\n  res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;X-XSS-Protection&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>\n  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Express&#39;</span><span class="token punctuation">,</span>xss<span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>xss <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// index.ejs</span>\n<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> xss <span class="token operator">%</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n\n<span class="token comment">// 篡改页面内容，自动触发</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3000/?xss=&lt;img src=&quot;null&quot; onerror=&quot;alert(1)&quot;/&gt;</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// 篡改页面内容，引诱触发</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3000/?xss=&lt;p onclick=&quot;alert(&#39;点我&#39;)&quot;&gt;点我&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// 篡改页面内容，最简单的广告插入</span>\n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3000/?xss=&lt;iframe src=&quot;//baidu.com/t.html&quot;&gt;&lt;/iframe&gt;</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li>DOM-Based <ul><li>基于后端</li></ul></li><li>存储型 <ul><li>恶意脚本存储到了服务器上，所有人访问都会有问题，比反射性和DOM-Baseed范围更大</li></ul></li></ul></li><li>攻击方式 <ul><li>盗用cookie，获取敏感信息</li><li>破坏页面结构，插入一些内容</li><li>利用flash，了解即可</li><li>DDOS(分布式拒绝服务攻击)，是目前最为强大最难以防御的攻击方式之一。 <ul><li>DOS攻击：利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器的响应</li><li>DDOS是在传统的DOS攻击上产生的一类攻击方式</li></ul></li><li>ServerlimitDOS(当http header过长的时候，web server会产生一个400或者是4开头的错误，如果这些超长的数据保存在cookie中，能够让用户每次访问的时候造成http头超长，导致一些用户无法访问域名)</li></ul></li></ul>',2),On=(0,p.Uk)(' - 防御 - 客户端传递给服务器时，需要先校验过滤一下 - 服务端再做一次过滤 - 直接在输出的时候过滤 ```js function html_encode(str){ var s=\'\'; if(str.length==0) return ""; s=str.replace(/&/g,"&"); s=s.replace(/\\s/g," "); s=s.replace(/\\\'/g,"\'"); s=s.replace(/\\"/g,"""); s=s.replace(/\\n/g,"'),In=(0,p._)("br",null,null,-1),Rn=(0,p.Uk)("\"); console.log('s',s) return s; } ``` "),Hn=(0,p.Uk)("转义"),Xn=(0,p._)("pre",null,[(0,p._)("code",null,"- 对用户输入的数据进行HTML Entity转义，显示为转义字符\n<absolute-box>两种转义字符的方式：<br/>1. 反斜杠加在特定的字符之前表示转义。<br/>2. 使用HTML Entity转义字符串</absolute-box>\n\n| 转义字符 | 意义                                | ASCII码值（十进制） |\n| -------- | ----------------------------------- | ------------------- |\n| \\a       | 响铃(BEL)                           | 007                 |\n| \\b       | 退格(BS) ，将当前位置移到前一列     | 008                 |\n| \\f       | 换页(FF)，将当前位置移到下页开头    | 012                 |\n| \\n       | 换行(LF) ，将当前位置移到下一行开头 | 010                 |\n| \\r       | 回车(CR) ，将当前位置移到本行开头   | 013                 |\n| \\t       | 水平制表(HT) （跳到下一个TAB位置）  | 009                 |\n| \\v       | 垂直制表(VT)                        | 011                 |\n| \\\\       | 代表一个反斜线字符''\\'              | 092                 |\n| \\'       | 代表一个单引号（撇号）字符          | 039                 |\n| \\\"       | 代表一个双引号字符                  | 034                 |\n| \\?       | 代表一个问号                        | 063                 |\n| \\0       | 空字符(NUL)                         | 000                 |\n| \\ddd     | 1到3位八进制数所代表的任意字符      | 三位八进制          |\n| \\xhh     | 十六进制所代表的任意字符            | 十六进制            |\n")],-1),Nn={class:"custom-container tip"},Fn=(0,p._)("p",{class:"custom-container-title"},"HTML Entity",-1),Gn=(0,p._)("p",null,"一个HTML 实体 是一段文本（“串”），以与符号（开始&）和结束用分号（;）。实体通常用于显示保留字符（否则将被解释为HTML代码）和不可见字符（例如不间断空格）。",-1),Bn=(0,p._)("pre",null,[(0,p._)("code",null,'  |字符|实体|HTML实体名称|注意|\n  |:---:|:---:|:---:|\n  |     "      | \\&quot; |解释为属性值的开始和结束。|\n  |     &      | \\&amp;  |解释为实体或字符引用的开始。|\n  |     <      |  \\&lt;  |解释为标签的开头|\n  |     >      |  \\&gt;  |解释为标签的结尾|\n  | 不断开空格   | \\&nbsp; ||\n')],-1),An={href:"https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references",target:"_blank",rel:"noopener noreferrer"},Jn=(0,p.Uk)("HTML保留字符列表"),zn=(0,p.Uk)("过滤"),Qn=(0,p._)("pre",null,[(0,p._)("code",null,"- 移除用户上传的DOM属性，如onerror等\n- 移除用户上传的Style节点、Script节点、Iframe节点等。\n")],-1),Vn={start:"2"},Kn=(0,p.Uk)("校正"),Yn=(0,p._)("pre",null,[(0,p._)("code",null,"- 避免直接对HTML Entity解码\n- 使用DOM Parse转换，矫正不配对的DOM标签\n")],-1),Zn=(0,p._)("ul",null,[(0,p._)("li",null,"实战"),(0,p._)("li",null,[(0,p.Uk)("插件库 "),(0,p._)("ul",null,[(0,p._)("li",null,"encode.js：可以使用https://github.com/mathiasbynens/he 中的he.js"),(0,p._)("li",null,"domParse：可以用https://github.com/blowsie/Pure-JavaScript-HTML5-Parser 中的htmlparser.js")])])],-1),$n=(0,p.uE)('<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>// 通过构建Node服务和简历一个评论功能，实例演示XSS的攻击及预防\n// index.ejs\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>&lt;%= title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>stylesheet<span class="token punctuation">&#39;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>/stylesheets/style.css<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/javascripts/encode.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/javascripts/domParse.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      <span class="token keyword">var</span> <span class="token function-variable function">parse</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> results<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n          <span class="token comment">// 先反转义（解码），再domparse</span>\n          <span class="token function">HTMLParser</span><span class="token punctuation">(</span>he<span class="token punctuation">.</span><span class="token function">unescape</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">{</span>strict<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n            <span class="token function-variable function">start</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>unary</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token comment">// 开始标签</span>\n              <span class="token comment">// 【防xss】2. 过滤危险标签</span>\n              <span class="token comment">// style标签可控制元素是否显示</span>\n              <span class="token comment">// iframe通常用来插入广告（是跨域的）</span>\n              <span class="token keyword">if</span><span class="token punctuation">(</span>tag<span class="token operator">==</span><span class="token string">&#39;script&#39;</span><span class="token operator">||</span>tag<span class="token operator">==</span><span class="token string">&#39;style&#39;</span><span class="token operator">||</span>tag<span class="token operator">==</span><span class="token string">&#39;link&#39;</span><span class="token operator">||</span>tag<span class="token operator">==</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n              results<span class="token operator">+=</span><span class="token string">&#39;&lt;&#39;</span><span class="token operator">+</span>tag<span class="token punctuation">;</span>\n              <span class="token comment">// 【防xss】3. 所有属性都不添加，即去掉了onclick onerror等等</span>\n              <span class="token comment">// for(var i=0,len=attrs.length;i&lt;len;i++){</span>\n              <span class="token comment">//   results+=&quot; &quot;+attrs[i].name+&#39;=&quot;&#39;+attrs[i].escaped+&#39;&quot;&#39;;</span>\n              <span class="token comment">// }</span>\n              results<span class="token operator">+=</span><span class="token punctuation">(</span>unary<span class="token operator">?</span><span class="token string">&quot;/&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">end</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token comment">// 结束标签</span>\n              results<span class="token operator">+=</span><span class="token string">&quot;&lt;/&quot;</span><span class="token operator">+</span>tag<span class="token operator">+</span><span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">chars</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token comment">// 标签中间部分</span>\n              results<span class="token operator">+=</span>text<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">comment</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token comment">// 注释部分</span>\n              results<span class="token operator">+=</span><span class="token string">&quot;&lt;!--&quot;</span><span class="token operator">+</span>text<span class="token operator">+</span><span class="token string">&quot;--&gt;&quot;</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token keyword">return</span> results\n        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>\n\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>&lt;%= title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Welcome to &lt;%= title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txt<span class="token punctuation">&quot;</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>30<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>sks <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/1.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>评论<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>获取评论<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      <span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> get<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> txt<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;txt&quot;</span><span class="token punctuation">)</span>\n      btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> url<span class="token operator">=</span><span class="token string">&#39;/comment?comment=&#39;</span><span class="token operator">+</span>txt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      get<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> url<span class="token operator">=</span><span class="token string">&#39;/getComment&#39;</span><span class="token punctuation">;</span>\n        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token keyword">var</span> com<span class="token operator">=</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token comment">// var com=JSON.parse(xhr.response).comment;</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token keyword">var</span> txt<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              txt<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>com<span class="token punctuation">;</span>\n              document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// index.js</span>\n<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> comments<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 【防xss】1.字符转义，前端或者后端做都可以</span>\n<span class="token keyword">function</span> <span class="token function">html_encode</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> s<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n  s<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;nbsp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\&#39;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\&quot;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&amp;quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&lt;br/&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> s<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* GET home page. */</span>\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Express&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/comment&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  comments<span class="token punctuation">.</span>v<span class="token operator">=</span><span class="token function">html_encode</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// comments.v=req.query.comment;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;插入的&#39;</span><span class="token punctuation">,</span>comments<span class="token punctuation">.</span>v<span class="token punctuation">)</span>\n  \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nrouter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/getComment&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>comments<span class="token punctuation">.</span>v<span class="token punctuation">)</span>\n  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    comment<span class="token operator">:</span>comments<span class="token punctuation">.</span>v\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><ul><li>CSP</li><li></li></ul><p>CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。</p><p>通常可以通过两种方式来开启 CSP：</p><ul><li>设置 HTTP Header 中的 Content-Security-Policy</li><li>设置 meta 标签的方式 <meta http-equiv="Content-Security-Policy"></li></ul><p>这里以设置 HTTP Header 来举例</p><p>只允许加载本站资源</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code><span class="token header-name keyword">Content-Security-Policy:</span> default-src ‘self’\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>只允许加载 HTTPS 协议图片</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code><span class="token header-name keyword">Content-Security-Policy:</span> img-src https://*\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>允许加载任何来源框架</p><div class="language-http ext-http line-numbers-mode"><pre class="language-http"><code><span class="token header-name keyword">Content-Security-Policy:</span> child-src &#39;none&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当然可以设置的属性远不止这些，你可以通过查阅 文档 的方式来学习，这里就不过多赘述其他的属性了。</p><p>对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。</p>',15),ns=(0,p._)("p",null,"CSRF",-1),ss=(0,p._)("li",null,[(0,p.Uk)("基本概念和缩写 "),(0,p._)("ul",null,[(0,p._)("li",null,"Cross-site request forgery，【记】跨站请求伪造")])],-1),as=(0,p.Uk)("攻击原理 "),ps=["src"],ts=(0,p._)("li",null,[(0,p.Uk)("防御措施 "),(0,p._)("ul",null,[(0,p._)("li",null,"Token验证(链接自动携带cookie，但是不会自动携带token)"),(0,p._)("li",null,"Referer验证(页面来源，判断来源是否是本站点下的页面)"),(0,p._)("li",null,"隐藏令牌(隐藏在http header头中)")])],-1),es=(0,p._)("li",null,[(0,p._)("p",null,"XSS和CSRF区别"),(0,p._)("ul",null,[(0,p._)("li",null,"XSS是上传输入的js脚本，并执行"),(0,p._)("li",null,"CSRF是需要用户已登录，帮你自动执行接口")])],-1),os={render:function(n,s){const a=(0,p.up)("RouterLink"),os=(0,p.up)("highlight-box"),ls=(0,p.up)("mark-check"),cs=(0,p.up)("underline-box"),us=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("nav",e,[(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#http协议"},{default:(0,p.w5)((()=>[o])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#udp和tcp"},{default:(0,p.w5)((()=>[l])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#页面加载"},{default:(0,p.w5)((()=>[c])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#浏览器加载资源的过程"},{default:(0,p.w5)((()=>[u])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#为何要把-css-放在-head-中"},{default:(0,p.w5)((()=>[i])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#为何要把-js-放在-body-最后"},{default:(0,p.w5)((()=>[r])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#window-onload和domcontentloaded区别"},{default:(0,p.w5)((()=>[k])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#加载资源优化"},{default:(0,p.w5)((()=>[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[m])),_:1})])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#渲染优化"},{default:(0,p.w5)((()=>[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[b])),_:1})])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#详细解说"},{default:(0,p.w5)((()=>[d])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#安全性"},{default:(0,p.w5)((()=>[g])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#推荐书"},{default:(0,p.w5)((()=>[h])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#web-攻击方式"},{default:(0,p.w5)((()=>[f])),_:1})])])])])]),w,(0,p._)("ul",null,[(0,p._)("li",null,[v,(0,p.Wm)(ls,{id:"post&get"})]),(0,p._)("li",null,[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[y])),_:1}),x,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[q])),_:1}),_,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[T])),_:1}),S,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[U])),_:1}),j,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[E])),_:1}),C,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[P])),_:1}),W,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[L])),_:1}),D]),M,(0,p._)("li",null,[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[O])),_:1}),I,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[R])),_:1}),H]),(0,p._)("li",null,[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[X])),_:1}),N,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[F])),_:1}),G,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[B])),_:1}),A,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[J])),_:1}),z,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[Q])),_:1}),V,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[K])),_:1}),Y,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[Z])),_:1}),$,(0,p.Wm)(cs,null,{default:(0,p.w5)((()=>[nn])),_:1}),sn])]),an,(0,p.Wm)(ls,{id:"jiazaiziyuan"}),pn,tn,(0,p.Wm)(ls,{id:"url2html"}),en,on,(0,p.Wm)(ls,{id:"yemianxuanran"}),ln,(0,p.Wm)(ls,{id:"onloadDomContentLoaded"}),cn,(0,p.Wm)(ls,{id:"xingnengyouhua"}),un,(0,p._)("h3",rn,[kn,mn,(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[bn])),_:1})]),dn,(0,p._)("h3",gn,[hn,fn,(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[wn])),_:1})]),vn,(0,p.Wm)(ls,{id:"fangdoujieliu"}),yn,(0,p._)("ul",null,[xn,(0,p._)("li",null,[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[qn])),_:1}),_n,(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[Tn])),_:1}),Sn])]),Un,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[jn])),_:1}),En,(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[Cn])),_:1}),Pn])]),Wn,(0,p.Wm)(ls,{id:"fangdoujieliuyingyong"}),Ln,(0,p._)("ul",null,[Dn,(0,p._)("li",null,[Mn,(0,p.Wm)(ls,{id:"xssfangyu"}),On,In,Rn,(0,p._)("ol",null,[(0,p._)("li",null,[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[Hn])),_:1})])]),Xn,(0,p._)("div",Nn,[Fn,Gn,Bn,(0,p._)("p",null,[(0,p._)("a",An,[Jn,(0,p.Wm)(us)])])]),(0,p._)("ol",null,[(0,p._)("li",null,[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[zn])),_:1})])]),Qn,(0,p._)("ol",Vn,[(0,p._)("li",null,[(0,p.Wm)(os,null,{default:(0,p.w5)((()=>[Kn])),_:1})])]),Yn,Zn])]),$n,(0,p._)("ul",null,[(0,p._)("li",null,[ns,(0,p._)("ul",null,[ss,(0,p._)("li",null,[as,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("img",{src:n.$withBase("/img/攻击原理.jpg")},null,8,ps)])])]),ts])]),es])],64)}}}}]);