"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6414],{2552:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5b3d42e9",path:"/frontend/js/es6/",title:"ES6",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"let和const",slug:"let和const",children:[{level:3,title:"let",slug:"let",children:[]},{level:3,title:"块级作用域",slug:"块级作用域",children:[]},{level:3,title:"const",slug:"const",children:[]},{level:3,title:"ES6声明变量的六种方法",slug:"es6声明变量的六种方法",children:[]},{level:3,title:"顶层对象的属性",slug:"顶层对象的属性",children:[]},{level:3,title:"globalThis对象",slug:"globalthis对象",children:[]}]},{level:2,title:"解构赋值(deconstruction)",slug:"解构赋值-deconstruction",children:[{level:3,title:"定义",slug:"定义",children:[]},{level:3,title:"规则",slug:"规则",children:[]},{level:3,title:"本质",slug:"本质",children:[]},{level:3,title:"默认值",slug:"默认值",children:[]},{level:3,title:"对象的解构赋值",slug:"对象的解构赋值",children:[]},{level:3,title:"注意点",slug:"注意点",children:[]},{level:3,title:"字符串的解构赋值",slug:"字符串的解构赋值",children:[]},{level:3,title:"数值和布尔值的解构赋值",slug:"数值和布尔值的解构赋值",children:[]},{level:3,title:"函数参数的解构赋值",slug:"函数参数的解构赋值",children:[]},{level:3,title:"圆括号问题",slug:"圆括号问题",children:[]},{level:3,title:"用途",slug:"用途",children:[]}]},{level:2,title:"字符串的扩展",slug:"字符串的扩展",children:[{level:3,title:"字符的 Unicode 表示法",slug:"字符的-unicode-表示法",children:[]},{level:3,title:"直接输入U+2028和U+2029",slug:"直接输入u-2028和u-2029",children:[]},{level:3,title:"JSON.stringify() 的改造",slug:"json-stringify-的改造",children:[]},{level:3,title:"模板字符串",slug:"模板字符串",children:[]},{level:3,title:"标签模板",slug:"标签模板",children:[]}]},{level:2,title:"字符串的新增方法",slug:"字符串的新增方法",children:[]},{level:2,title:"正则的扩展",slug:"正则的扩展",children:[]},{level:2,title:"数值的扩展",slug:"数值的扩展",children:[]},{level:2,title:"函数的扩展",slug:"函数的扩展",children:[]},{level:2,title:"数组的扩展",slug:"数组的扩展",children:[]},{level:2,title:"对象的扩展",slug:"对象的扩展",children:[{level:3,title:"属性",slug:"属性",children:[]},{level:3,title:"super 关键字",slug:"super-关键字",children:[]},{level:3,title:"扩展运算符（对象）[ES2018]",slug:"扩展运算符-对象-es2018",children:[]}]},{level:2,title:"对象的新增方法",slug:"对象的新增方法",children:[]},{level:2,title:"Symbol",slug:"symbol",children:[{level:3,title:"引入原因",slug:"引入原因",children:[]},{level:3,title:"概念",slug:"概念",children:[]},{level:3,title:"参数",slug:"参数",children:[]},{level:3,title:"值",slug:"值",children:[]},{level:3,title:"Symbol API",slug:"symbol-api",children:[]},{level:3,title:"作为对象属性名",slug:"作为对象属性名",children:[]},{level:3,title:"作为常量",slug:"作为常量",children:[]}]},{level:2,title:"Set 和 Map 数据结构",slug:"set-和-map-数据结构",children:[{level:3,title:"Set",slug:"set",children:[]},{level:3,title:"WeakSet",slug:"weakset",children:[]},{level:3,title:"Map",slug:"map",children:[]},{level:3,title:"WeakMap",slug:"weakmap",children:[]}]},{level:2,title:"Proxy",slug:"proxy",children:[{level:3,title:"概述",slug:"概述",children:[]},{level:3,title:"参数",slug:"参数-3",children:[]},{level:3,title:"注意",slug:"注意",children:[]},{level:3,title:"操作方法",slug:"操作方法",children:[]},{level:3,title:"Proxy.revocable()",slug:"proxy-revocable",children:[]},{level:3,title:"用途",slug:"用途-2",children:[]}]},{level:2,title:"Reflect",slug:"reflect",children:[{level:3,title:"概念",slug:"概念-3",children:[]},{level:3,title:"静态方法（大部分与Object对象的同名方法的作用相同，而且它与Proxy对象的方法是一一对应的。）",slug:"静态方法-大部分与object对象的同名方法的作用相同-而且它与proxy对象的方法是一一对应的。",children:[]},{level:3,title:"使用 Proxy 实现观察者模式",slug:"使用-proxy-实现观察者模式",children:[]}]},{level:2,title:"Promise对象",slug:"promise对象",children:[{level:3,title:"概念",slug:"概念-4",children:[]},{level:3,title:"参数",slug:"参数-4",children:[]},{level:3,title:"实例方法",slug:"实例方法-1",children:[]},{level:3,title:"Promise实现一个Ajax操作",slug:"promise实现一个ajax操作",children:[]},{level:3,title:"Promise高级用法",slug:"promise高级用法",children:[]},{level:3,title:"promise a+ 规范",slug:"promise-a-规范",children:[]},{level:3,title:"应用",slug:"应用",children:[]}]},{level:2,title:"Iterator和for..of循环",slug:"iterator和for-of循环",children:[{level:3,title:"概念",slug:"概念-5",children:[]},{level:3,title:"Iterator接口",slug:"iterator接口",children:[]},{level:3,title:"具备Iterator接口的数据结构",slug:"具备iterator接口的数据结构",children:[]},{level:3,title:"调用Iterator接口的场合",slug:"调用iterator接口的场合",children:[]},{level:3,title:"遍历器对象部署的方法",slug:"遍历器对象部署的方法",children:[]},{level:3,title:"for...of循环",slug:"for-of循环",children:[]}]},{level:2,title:"Generator 函数的语法",slug:"generator-函数的语法",children:[{level:3,title:"概念",slug:"概念-6",children:[]},{level:3,title:"next()方法",slug:"next-方法",children:[]},{level:3,title:"构造函数",slug:"构造函数",children:[]},{level:3,title:"Generator函数里执行Generator函数。",slug:"generator函数里执行generator函数。",children:[]},{level:3,title:"作为对象属性",slug:"作为对象属性",children:[]},{level:3,title:"作为状态机",slug:"作为状态机",children:[]},{level:3,title:"应用（可以暂停函数执行，返回任意表达式的值。）",slug:"应用-可以暂停函数执行-返回任意表达式的值。",children:[]}]},{level:2,title:"Generator 函数的异步应用",slug:"generator-函数的异步应用",children:[{level:3,title:"ES5的异步处理方法",slug:"es5的异步处理方法",children:[]},{level:3,title:"传统异步编程的解决方案（多任务的解决方案）协程",slug:"传统异步编程的解决方案-多任务的解决方案-协程",children:[]},{level:3,title:"协程在ES6中的实现（Generator 函数）",slug:"协程在es6中的实现-generator-函数",children:[]},{level:3,title:"co模块",slug:"co模块",children:[]}]},{level:2,title:"async函数",slug:"async函数",children:[{level:3,title:"是 Generator 函数的语法糖。",slug:"是-generator-函数的语法糖。",children:[]},{level:3,title:"基本用法",slug:"基本用法",children:[]},{level:3,title:"await命令",slug:"await命令",children:[]},{level:3,title:"async函数实现原理",slug:"async函数实现原理",children:[]}]},{level:2,title:"扩展运算符…",slug:"扩展运算符-1",children:[{level:3,title:"用于对象的展开(es7)",slug:"用于对象的展开-es7",children:[]},{level:3,title:"用于数组的展开",slug:"用于数组的展开",children:[]},{level:3,title:"用于剩余运算符",slug:"用于剩余运算符",children:[]}]},{level:2,title:"Class 的基本语法",slug:"class-的基本语法",children:[{level:3,title:"简介",slug:"简介",children:[]},{level:3,title:"静态方法（不会被实例继承，而是直接通过类来调用）",slug:"静态方法-不会被实例继承-而是直接通过类来调用",children:[]},{level:3,title:"静态属性()",slug:"静态属性",children:[]},{level:3,title:"实例属性",slug:"实例属性",children:[]},{level:3,title:"私有方法和私有属性",slug:"私有方法和私有属性",children:[]},{level:3,title:"new.target 属性",slug:"new-target-属性",children:[]}]},{level:2,title:"Class 的继承",slug:"class-的继承",children:[{level:3,title:"简介",slug:"简介-1",children:[]},{level:3,title:"获取父类",slug:"获取父类",children:[]},{level:3,title:"super 关键字",slug:"super-关键字-1",children:[]},{level:3,title:"类的 prototype 属性和__proto__属性",slug:"类的-prototype-属性和-proto-属性",children:[]},{level:3,title:"原生构造函数（js内置构造函数）的继承",slug:"原生构造函数-js内置构造函数-的继承",children:[]},{level:3,title:"Mixin模式的实现",slug:"mixin模式的实现",children:[]}]},{level:2,title:"Module的语法",slug:"module的语法",children:[{level:3,title:"概述",slug:"概述-1",children:[]},{level:3,title:"export命令",slug:"export命令",children:[]},{level:3,title:"import命令",slug:"import命令",children:[]},{level:3,title:"模块的整体加载",slug:"模块的整体加载",children:[]},{level:3,title:"export default命令",slug:"export-default命令",children:[]},{level:3,title:"export 与 import 的复合写法",slug:"export-与-import-的复合写法",children:[]},{level:3,title:"import()",slug:"import",children:[]}]},{level:2,title:"Module的加载实现",slug:"module的加载实现",children:[{level:3,title:"浏览器加载",slug:"浏览器加载",children:[]},{level:3,title:"ES6 模块与 CommonJS 模块的差异",slug:"es6-模块与-commonjs-模块的差异",children:[]},{level:3,title:"Node加载",slug:"node加载",children:[]},{level:3,title:"ES6 模块的转码",slug:"es6-模块的转码",children:[]}]},{level:2,title:"编程风格",slug:"编程风格",children:[{level:3,title:"块级作用域",slug:"块级作用域-1",children:[]},{level:3,title:"字符串",slug:"字符串",children:[]},{level:3,title:"解构赋值",slug:"解构赋值-1",children:[]},{level:3,title:"对象",slug:"对象",children:[]},{level:3,title:"数组",slug:"数组",children:[]},{level:3,title:"函数",slug:"函数",children:[]},{level:3,title:"Map结构",slug:"map结构",children:[]},{level:3,title:"Class",slug:"class",children:[]},{level:3,title:"模块",slug:"模块",children:[]},{level:3,title:"ESLint 的使用",slug:"eslint-的使用",children:[]}]},{level:2,title:"异步遍历器",slug:"异步遍历器",children:[]},{level:2,title:"ArrayBuffer",slug:"arraybuffer",children:[]},{level:2,title:"最新提案",slug:"最新提案",children:[]},{level:2,title:"修饰器",slug:"修饰器",children:[]},{level:2,title:"es5中的类",slug:"es5中的类",children:[{level:3,title:"用es5实现es6Class类",slug:"用es5实现es6class类",children:[]}]},{level:2,title:"第三方模块",slug:"第三方模块",children:[{level:3,title:"babel",slug:"babel",children:[]},{level:3,title:"moment",slug:"moment",children:[]}]},{level:2,title:"Promise",slug:"promise",children:[{level:3,title:"高阶函数",slug:"高阶函数",children:[]},{level:3,title:"aop Aspect Oriented Programming 面向切片编程 装饰器@",slug:"aop-aspect-oriented-programming-面向切片编程-装饰器",children:[]},{level:3,title:"lodash after函数",slug:"lodash-after函数",children:[]},{level:3,title:"发布订阅",slug:"发布订阅",children:[]},{level:3,title:"观察者模式",slug:"观察者模式",children:[]},{level:3,title:"promise应用",slug:"promise应用",children:[]},{level:3,title:"手写promise a+ 规范",slug:"手写promise-a-规范",children:[]},{level:3,title:"generator + co",slug:"generator-co",children:[]},{level:3,title:"async+await",slug:"async-await",children:[]},{level:3,title:"最终案例",slug:"最终案例",children:[]}]}],filePathRelative:"frontend/js/es6/README.md",git:{updatedTime:1630227828e3,contributors:[]}}},4881:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Ja});var p=a(6252);const t=(0,p._)("h1",{id:"es6",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#es6","aria-hidden":"true"},"#"),(0,p.Uk)(" ES6")],-1),e={class:"table-of-contents"},l=(0,p.Uk)("let和const"),o=(0,p.Uk)("let"),c=(0,p.Uk)("块级作用域"),u=(0,p.Uk)("const"),i=(0,p.Uk)("ES6声明变量的六种方法"),r=(0,p.Uk)("顶层对象的属性"),k=(0,p.Uk)("globalThis对象"),b=(0,p.Uk)("解构赋值(deconstruction)"),d=(0,p.Uk)("定义"),m=(0,p.Uk)("规则"),h=(0,p.Uk)("本质"),g=(0,p.Uk)("默认值"),f=(0,p.Uk)("对象的解构赋值"),v=(0,p.Uk)("注意点"),y=(0,p.Uk)("字符串的解构赋值"),w=(0,p.Uk)("数值和布尔值的解构赋值"),x=(0,p.Uk)("函数参数的解构赋值"),j=(0,p.Uk)("圆括号问题"),_=(0,p.Uk)("用途"),S=(0,p.Uk)("字符串的扩展"),U=(0,p.Uk)("字符的 Unicode 表示法"),P=(0,p.Uk)("直接输入U+2028和U+2029"),W=(0,p.Uk)("JSON.stringify() 的改造"),q=(0,p.Uk)("模板字符串"),O=(0,p.Uk)("标签模板"),E=(0,p.Uk)("字符串的新增方法"),M=(0,p.Uk)("正则的扩展"),C=(0,p.Uk)("数值的扩展"),I=(0,p.Uk)("函数的扩展"),A=(0,p.Uk)("数组的扩展"),N=(0,p.Uk)("对象的扩展"),J=(0,p.Uk)("属性"),G=(0,p.Uk)("super 关键字"),R=(0,p.Uk)("扩展运算符（对象）[ES2018]"),T=(0,p.Uk)("对象的新增方法"),F=(0,p.Uk)("Symbol"),D=(0,p.Uk)("引入原因"),z=(0,p.Uk)("概念"),H=(0,p.Uk)("参数"),K=(0,p.Uk)("值"),$=(0,p.Uk)("Symbol API"),B=(0,p.Uk)("作为对象属性名"),Y=(0,p.Uk)("作为常量"),L=(0,p.Uk)("Set 和 Map 数据结构"),V=(0,p.Uk)("Set"),X=(0,p.Uk)("WeakSet"),Z=(0,p.Uk)("Map"),Q=(0,p.Uk)("WeakMap"),nn=(0,p.Uk)("Proxy"),sn=(0,p.Uk)("概述"),an=(0,p.Uk)("参数"),pn=(0,p.Uk)("注意"),tn=(0,p.Uk)("操作方法"),en=(0,p.Uk)("Proxy.revocable()"),ln=(0,p.Uk)("用途"),on=(0,p.Uk)("Reflect"),cn=(0,p.Uk)("概念"),un=(0,p.Uk)("静态方法（大部分与Object对象的同名方法的作用相同，而且它与Proxy对象的方法是一一对应的。）"),rn=(0,p.Uk)("使用 Proxy 实现观察者模式"),kn=(0,p.Uk)("Promise对象"),bn=(0,p.Uk)("概念"),dn=(0,p.Uk)("参数"),mn=(0,p.Uk)("实例方法"),hn=(0,p.Uk)("Promise实现一个Ajax操作"),gn=(0,p.Uk)("Promise高级用法"),fn=(0,p.Uk)("promise a+ 规范"),vn=(0,p.Uk)("应用"),yn=(0,p.Uk)("Iterator和for..of循环"),wn=(0,p.Uk)("概念"),xn=(0,p.Uk)("Iterator接口"),jn=(0,p.Uk)("具备Iterator接口的数据结构"),_n=(0,p.Uk)("调用Iterator接口的场合"),Sn=(0,p.Uk)("遍历器对象部署的方法"),Un=(0,p.Uk)("for...of循环"),Pn=(0,p.Uk)("Generator 函数的语法"),Wn=(0,p.Uk)("概念"),qn=(0,p.Uk)("next()方法"),On=(0,p.Uk)("构造函数"),En=(0,p.Uk)("Generator函数里执行Generator函数。"),Mn=(0,p.Uk)("作为对象属性"),Cn=(0,p.Uk)("作为状态机"),In=(0,p.Uk)("应用（可以暂停函数执行，返回任意表达式的值。）"),An=(0,p.Uk)("Generator 函数的异步应用"),Nn=(0,p.Uk)("ES5的异步处理方法"),Jn=(0,p.Uk)("传统异步编程的解决方案（多任务的解决方案）协程"),Gn=(0,p.Uk)("协程在ES6中的实现（Generator 函数）"),Rn=(0,p.Uk)("co模块"),Tn=(0,p.Uk)("async函数"),Fn=(0,p.Uk)("是 Generator 函数的语法糖。"),Dn=(0,p.Uk)("基本用法"),zn=(0,p.Uk)("await命令"),Hn=(0,p.Uk)("async函数实现原理"),Kn=(0,p.Uk)("扩展运算符…"),$n=(0,p.Uk)("用于对象的展开(es7)"),Bn=(0,p.Uk)("用于数组的展开"),Yn=(0,p.Uk)("用于剩余运算符"),Ln=(0,p.Uk)("Class 的基本语法"),Vn=(0,p.Uk)("简介"),Xn=(0,p.Uk)("静态方法（不会被实例继承，而是直接通过类来调用）"),Zn=(0,p.Uk)("静态属性()"),Qn=(0,p.Uk)("实例属性"),ns=(0,p.Uk)("私有方法和私有属性"),ss=(0,p.Uk)("new.target 属性"),as=(0,p.Uk)("Class 的继承"),ps=(0,p.Uk)("简介"),ts=(0,p.Uk)("获取父类"),es=(0,p.Uk)("super 关键字"),ls=(0,p.Uk)("类的 prototype 属性和__proto__属性"),os=(0,p.Uk)("原生构造函数（js内置构造函数）的继承"),cs=(0,p.Uk)("Mixin模式的实现"),us=(0,p.Uk)("Module的语法"),is=(0,p.Uk)("概述"),rs=(0,p.Uk)("export命令"),ks=(0,p.Uk)("import命令"),bs=(0,p.Uk)("模块的整体加载"),ds=(0,p.Uk)("export default命令"),ms=(0,p.Uk)("export 与 import 的复合写法"),hs=(0,p.Uk)("import()"),gs=(0,p.Uk)("Module的加载实现"),fs=(0,p.Uk)("浏览器加载"),vs=(0,p.Uk)("ES6 模块与 CommonJS 模块的差异"),ys=(0,p.Uk)("Node加载"),ws=(0,p.Uk)("ES6 模块的转码"),xs=(0,p.Uk)("编程风格"),js=(0,p.Uk)("块级作用域"),_s=(0,p.Uk)("字符串"),Ss=(0,p.Uk)("解构赋值"),Us=(0,p.Uk)("对象"),Ps=(0,p.Uk)("数组"),Ws=(0,p.Uk)("函数"),qs=(0,p.Uk)("Map结构"),Os=(0,p.Uk)("Class"),Es=(0,p.Uk)("模块"),Ms=(0,p.Uk)("ESLint 的使用"),Cs=(0,p.Uk)("异步遍历器"),Is=(0,p.Uk)("ArrayBuffer"),As=(0,p.Uk)("最新提案"),Ns=(0,p.Uk)("修饰器"),Js=(0,p.Uk)("es5中的类"),Gs=(0,p.Uk)("用es5实现es6Class类"),Rs=(0,p.Uk)("第三方模块"),Ts=(0,p.Uk)("babel"),Fs=(0,p.Uk)("moment"),Ds=(0,p.Uk)("Promise"),zs=(0,p.Uk)("高阶函数"),Hs=(0,p.Uk)("aop Aspect Oriented Programming 面向切片编程 装饰器@"),Ks=(0,p.Uk)("lodash after函数"),$s=(0,p.Uk)("发布订阅"),Bs=(0,p.Uk)("观察者模式"),Ys=(0,p.Uk)("promise应用"),Ls=(0,p.Uk)("手写promise a+ 规范"),Vs=(0,p.Uk)("generator + co"),Xs=(0,p.Uk)("async+await"),Zs=(0,p.Uk)("最终案例"),Qs=(0,p.uE)('<h2 id="let和const" tabindex="-1"><a class="header-anchor" href="#let和const" aria-hidden="true">#</a> let和const</h2><h3 id="let" tabindex="-1"><a class="header-anchor" href="#let" aria-hidden="true">#</a> let</h3><ul><li>有作用域(声明的变量，只在let命令所在的代码块内有效。)</li><li>不存在变量提升</li><li>暂时性死区(TDZ) <ul><li>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。凡是在声明之前就使用这些变量，就会报错。</li></ul><div class="language-JS ext-JS line-numbers-mode"><pre class="language-JS"><code>var tmp = 123;\nif (true) {\n  tmp = &#39;abc&#39;; // ReferenceError\n  let tmp;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>不允许重复声明</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 报错</span>\n<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域" aria-hidden="true">#</a> 块级作用域</h3><ul><li>为什么需要块级作用域？ <ul><li>内层变量可能会覆盖外层变量。</li><li>用来计数的循环变量泄露为全局变量。</li></ul></li><li>ES6块级作用域 <ul><li>let为 JavaScript 新增了块级作用域</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// IIFE 写法</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 块级作用域写法</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>S5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。ES6允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。</li></ul></li></ul><h3 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> const</h3><ul><li>声明一个只读的常量。一旦声明，常量的值就不能改变。</li><li>一旦声明变量，就必须立即初始化，不能留到以后赋值。</li><li>只能保证变量指向的那个内存地址所保存的数据不得改动，对于复合类型的数据（主要是对象和数组），指向的数据结构不能保证不可变</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可执行</span>\na<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 可执行</span>\na <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Dave&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 报错</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>冻结对象：<code>Object.freeze</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 常规模式时，下面一行不起作用；</span>\n<span class="token comment">// 严格模式时，该行会报错</span>\nfoo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>彻底冻结对象：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">constantize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">constantize</span><span class="token punctuation">(</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>用处(模块引用等不需要更改的地方)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfs<span class="token punctuation">.</span>xxx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="es6声明变量的六种方法" tabindex="-1"><a class="header-anchor" href="#es6声明变量的六种方法" aria-hidden="true">#</a> ES6声明变量的六种方法</h3><ul><li>ES5:var,function</li><li>ES6添加四种：let,const,import,class</li></ul><h3 id="顶层对象的属性" tabindex="-1"><a class="header-anchor" href="#顶层对象的属性" aria-hidden="true">#</a> 顶层对象的属性</h3><ul><li>顶层对象 <ul><li>浏览器环境：window对象</li><li>Node：global对象</li><li>ES5 之中，顶层对象的属性与全局变量是等价的。 <ul><li>问题 <ul><li>没法在编译时就报出变量未声明的错误，只有运行时才能知道</li><li>程序员很容易不知不觉地就创建了全局变量（比如打字出错）</li><li>window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</li></ul></li></ul></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\na <span class="token comment">// 1</span>\n\na <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span>a <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</li><li>为了保持兼容性,var命令和function命令声明的全局变量，依旧是顶层对象的属性；</li><li>let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// 如果在 Node 的 REPL 环境，可以写成 global.a</span>\n<span class="token comment">// 或者采用通用方法，写成 this.a</span>\nwindow<span class="token punctuation">.</span>a <span class="token comment">// 1</span>\n\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nwindow<span class="token punctuation">.</span>b <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="globalthis对象" tabindex="-1"><a class="header-anchor" href="#globalthis对象" aria-hidden="true">#</a> globalThis对象</h3><ul><li>顶层对象（提供全局作用域） <ul><li>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</li><li>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。</li><li>Node 里面，顶层对象是global，但其他环境都不支持。</li></ul></li><li>为了能够在各种环境，都能取到顶层对象，一般使用this变量 <ul><li>局限性 <ul><li>全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。</li><li>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。</li><li>不管是严格模式，还是普通模式，new Function(&#39;return this&#39;)()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。</li></ul></li><li>解决</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>\n<span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span>\n  <span class="token operator">?</span> window\n  <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> process <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>\n      <span class="token keyword">typeof</span> require <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>\n      <span class="token keyword">typeof</span> global <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>\n    <span class="token operator">?</span> global\n    <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 方法二</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getGlobal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> self<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> window<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> global<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;unable to locate global object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>提案 <ul><li>引入globalThis作为顶层对象（任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。）</li></ul></li></ul></li></ul><h2 id="解构赋值-deconstruction" tabindex="-1"><a class="header-anchor" href="#解构赋值-deconstruction" aria-hidden="true">#</a> 解构赋值(deconstruction)</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><ul><li>按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">,</span> baz<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 解构不成功，变量的值就等于undefined</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>bar<span class="token punctuation">,</span> foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 不完全解构(等号左边的模式，只匹配一部分的等号右边的数组)，解构依然可以成功。</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na <span class="token comment">// 1</span>\nb <span class="token comment">// 2</span>\nd <span class="token comment">// 4</span>\n<span class="token comment">// 只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。否则会报错。</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// Set和Generator都可以，因为有Iterator接口</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nx <span class="token comment">// &quot;a&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h3><ul><li>只要等号右边的值不是对象或数组，就先将其转为对象。</li></ul><h3 id="本质" tabindex="-1"><a class="header-anchor" href="#本质" aria-hidden="true">#</a> 本质</h3><ul><li>属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</li></ul><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h3><ul><li>解构赋值允许指定默认值。</li><li>只有当一个数组成员严格等于undefined，默认值才会生效。</li><li>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</li><li>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nfoo <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// x=&#39;a&#39;, y=&#39;b&#39;</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// x=&#39;a&#39;, y=&#39;b&#39;</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// x=1; y=1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="对象的解构赋值" tabindex="-1"><a class="header-anchor" href="#对象的解构赋值" aria-hidden="true">#</a> 对象的解构赋值</h3><ul><li>数组的取值由它的位置决定；而对象属性变量必须与属性同名，才能取到正确的值。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token string">&#39;bbb&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>内部机制是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> baz <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token string">&#39;bbb&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nbaz <span class="token comment">// &quot;aaa&quot;</span>\nfoo <span class="token comment">// error: foo is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h3><ul><li>大括号不要在行首，否则会解释为代码块，需要加上小括号解决</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>可以对数组进行对象属性的解构(数组本质是特殊的对象)</li></ul><h3 id="字符串的解构赋值" tabindex="-1"><a class="header-anchor" href="#字符串的解构赋值" aria-hidden="true">#</a> 字符串的解构赋值</h3><ul><li>字符串被转换成了一个类似数组的对象。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\na <span class="token comment">// &quot;h&quot;</span>\nb <span class="token comment">// &quot;e&quot;</span>\nc <span class="token comment">// &quot;l&quot;</span>\nd <span class="token comment">// &quot;l&quot;</span>\ne <span class="token comment">// &quot;o&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>类似数组的对象都有一个length属性</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span>length <span class="token operator">:</span> len<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\nlen <span class="token comment">// 5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="数值和布尔值的解构赋值" tabindex="-1"><a class="header-anchor" href="#数值和布尔值的解构赋值" aria-hidden="true">#</a> 数值和布尔值的解构赋值</h3><ul><li>数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span>toString<span class="token operator">:</span> s<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\ns <span class="token operator">===</span> <span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">{</span>toString<span class="token operator">:</span> s<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\ns <span class="token operator">===</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>undefined和null无法转为对象，所以对它们进行解构赋值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> prop<span class="token operator">:</span> x <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> prop<span class="token operator">:</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="函数参数的解构赋值" tabindex="-1"><a class="header-anchor" href="#函数参数的解构赋值" aria-hidden="true">#</a> 函数参数的解构赋值</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n\n<span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 8]</span>\n<span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 0]</span>\n<span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 0]</span>\n<span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 0]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="圆括号问题" tabindex="-1"><a class="header-anchor" href="#圆括号问题" aria-hidden="true">#</a> 圆括号问题</h3><ul><li>变量声明语句，不能使用圆括号。</li><li>函数参数也属于变量声明，不能带有圆括号。</li><li>赋值语句，模式部分不能放在圆括号中。</li><li>赋值语句的非模式部分，可以使用圆括号</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">{</span> p<span class="token operator">:</span> a <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span> p<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 报错</span>\n<span class="token punctuation">[</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="用途" tabindex="-1"><a class="header-anchor" href="#用途" aria-hidden="true">#</a> 用途</h3><ul><li>交换变量的值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>从函数返回多个值</li><li>函数参数的定义</li><li>提取 JSON 数据</li><li>函数参数的默认值</li><li>遍历 Map 结构</li><li>输入模块的指定方法</li></ul><h2 id="字符串的扩展" tabindex="-1"><a class="header-anchor" href="#字符串的扩展" aria-hidden="true">#</a> 字符串的扩展</h2><h3 id="字符的-unicode-表示法" tabindex="-1"><a class="header-anchor" href="#字符的-unicode-表示法" aria-hidden="true">#</a> 字符的 Unicode 表示法</h3><ul><li>现在共有 6 种方法可以表示一个字符。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;\\z&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;z&#39;</span>  <span class="token comment">// true</span>\n<span class="token string">&#39;\\172&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;z&#39;</span> <span class="token comment">// true</span>\n<span class="token string">&#39;\\x7A&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;z&#39;</span> <span class="token comment">// true</span>\n<span class="token string">&#39;\\u007A&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;z&#39;</span> <span class="token comment">// true</span>\n<span class="token string">&#39;\\u{7A}&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;z&#39;</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>字符串的遍历器接口 <ul><li>最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 字符串可以被for...of循环遍历。</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> codePoint <span class="token keyword">of</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>codePoint<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// &quot;f&quot;</span>\n<span class="token comment">// &quot;o&quot;</span>\n<span class="token comment">// &quot;o&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">0x20BB7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// &quot; &quot;</span>\n<span class="token comment">// &quot; &quot;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// &quot;𠮷&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="直接输入u-2028和u-2029" tabindex="-1"><a class="header-anchor" href="#直接输入u-2028和u-2029" aria-hidden="true">#</a> 直接输入U+2028和U+2029</h3><ul><li>JavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。 <ul><li>U+005C：反斜杠（reverse solidus)</li><li>U+000D：回车（carriage return）</li><li>U+2028：行分隔符（line separator）</li><li>U+2029：段分隔符（paragraph separator）</li><li>U+000A：换行符（line feed） JSON 格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符）。这样一来，服务器输出的 JSON 被JSON.parse解析，就有可能直接报错。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token string">&#39;&quot;\\u2028&quot;&#39;</span><span class="token punctuation">;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能报错</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>JSON 格式已经冻结（RFC 7159），没法修改了。为了消除这个报错，ES2019 允许 JavaScript 字符串直接输入 U+2028（行分隔符）和 U+2029（段分隔符）。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PS</span> <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;\\u2029&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="json-stringify-的改造" tabindex="-1"><a class="header-anchor" href="#json-stringify-的改造" aria-hidden="true">#</a> JSON.stringify() 的改造</h3><ul><li>根据标准，JSON 数据必须是 UTF-8 编码。但是，现在的JSON.stringify()方法有可能返回不符合 UTF-8 标准的字符串。</li><li>为了确保返回的是合法的 UTF-8 字符，ES2019 改变了JSON.stringify()的行为。如果遇到0xD800到0xDFFF之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;\\u{D834}&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;&quot;\\\\uD834&quot;&quot;</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;\\uDF06\\uD834&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;&quot;\\\\udf06\\\\ud834&quot;&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#result&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  There are &lt;b&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>basket<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/b&gt; items\n   in your basket, &lt;em&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>basket<span class="token punctuation">.</span>onSale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/em&gt;\n  are on sale!\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n`\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>用`（反引号）标识，用${}将变量括起来。支持换行</li><li>所有的空格,缩进和换行都会被保留</li><li>可以放入任意的JavaScript表达式，可以进行运算</li><li>可以调用函数</li><li>需要使用反引号，则前面要用反斜杠转义。</li><li>嵌套使用</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">tmpl</span> <span class="token operator">=</span> <span class="token parameter">addrs</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  &lt;table&gt;\n  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>addrs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">addr</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;tr&gt;&lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>addr<span class="token punctuation">.</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>addr<span class="token punctuation">.</span>last<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/td&gt;&lt;/tr&gt;\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n  &lt;/table&gt;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token string">&#39;&lt;Jane&gt;&#39;</span><span class="token punctuation">,</span> last<span class="token operator">:</span> <span class="token string">&#39;Bond&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token string">&#39;Lars&#39;</span><span class="token punctuation">,</span> last<span class="token operator">:</span> <span class="token string">&#39;&lt;Croft&gt;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tmpl</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>引用模板字符串本身，在需要时执行，可以写成函数。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;Hello Jack!&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="标签模板" tabindex="-1"><a class="header-anchor" href="#标签模板" aria-hidden="true">#</a> 标签模板</h3><ul><li>定义 <ul><li>紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 无参数</span>\nalert<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">123</span><span class="token template-punctuation string">`</span></span>\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>\n<span class="token comment">// 有参数</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\ntag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token operator">+</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> world </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token operator">*</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token comment">// 等同于</span>\n<span class="token comment">// 第一个参数是一个数组(是模板字符串中那些没有变量替换的部分)（包括一个自带的raw属性，保存了转译后的原第一个参数的数组[&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;]）</span>\n<span class="token comment">// 其他参数是模板字符串各个变量被替换后的值</span>\n<span class="token function">tag</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Hello &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; world &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>应用 <ul><li>过滤 HTML 字符串，防止用户输入恶意内容。</li><li>多语言转换（国际化处理）</li><li>通过标签函数，代替Mustache 之类的模板库（添加条件判断和循环处理功能）</li><li>调用其他语言的函数，在 JavaScript 语言之中嵌入其他语言。</li></ul></li></ul><h2 id="字符串的新增方法" tabindex="-1"><a class="header-anchor" href="#字符串的新增方法" aria-hidden="true">#</a> 字符串的新增方法</h2><ul><li>见api</li></ul><h2 id="正则的扩展" tabindex="-1"><a class="header-anchor" href="#正则的扩展" aria-hidden="true">#</a> 正则的扩展</h2><ul><li>见正则基础</li></ul><h2 id="数值的扩展" tabindex="-1"><a class="header-anchor" href="#数值的扩展" aria-hidden="true">#</a> 数值的扩展</h2><ul><li>见变量部分</li></ul><h2 id="函数的扩展" tabindex="-1"><a class="header-anchor" href="#函数的扩展" aria-hidden="true">#</a> 函数的扩展</h2><ul><li>见函数API</li></ul><h2 id="数组的扩展" tabindex="-1"><a class="header-anchor" href="#数组的扩展" aria-hidden="true">#</a> 数组的扩展</h2><ul><li>见数组API</li></ul><h2 id="对象的扩展" tabindex="-1"><a class="header-anchor" href="#对象的扩展" aria-hidden="true">#</a> 对象的扩展</h2><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><h4 id="属性的写法" tabindex="-1"><a class="header-anchor" href="#属性的写法" aria-hidden="true">#</a> 属性的写法</h4><ul><li>简洁表示法 <ul><li>直接写变量（属性名为变量名, 属性值为变量的值）</li><li>简写函数</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li>属性名表达式 <ul><li>属性名的两种写法<code>obj.foo = true;</code>和<code>obj[&#39;a&#39; + &#39;bc&#39;] = 123;</code></li><li>字面量方式(大括号)定义对象，ES6规定可用<code>[&#39;a&#39; + &#39;bc&#39;]</code>定义属性</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> propKey <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>propKey<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;bc&#39;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;h&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;ello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><ul><li>属性名表达式与简洁表示法，不能同时使用</li></ul></div><h4 id="函数属性的name属性" tabindex="-1"><a class="header-anchor" href="#函数属性的name属性" aria-hidden="true">#</a> 函数属性的name属性</h4><ul><li>方法的name属性返回函数名</li><li>方法使用了取值函数（getter）和存值函数（setter），返回值是方法名前加上get和set。</li><li>bind方法创造的函数，name属性返回bound加上原函数的名字</li><li>Function构造函数创造的函数，name属性返回anonymous。</li></ul><h4 id="属性遍历" tabindex="-1"><a class="header-anchor" href="#属性遍历" aria-hidden="true">#</a> 属性遍历</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>可枚举性 <ul><li>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象。其中有个<code>enumerable</code>为false即不可枚举。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//  {</span>\n<span class="token comment">//    value: 123,</span>\n<span class="token comment">//    writable: true,</span>\n<span class="token comment">//    enumerable: true,</span>\n<span class="token comment">//    configurable: true</span>\n<span class="token comment">//  }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li>不可枚举的属性 <ul><li>所有 Class 的原型的方法都是不可枚举的。</li><li>toString</li><li>length</li></ul></li><li>忽略不可枚举属性的方法 <ul><li>for...in循环：只遍历对象自身的和继承的可枚举的属性。</li><li>Object.keys()：返回对象自身的所有可枚举的属性的键名。</li><li>JSON.stringify()：只串行化对象自身的可枚举的属性。</li><li>Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li></ul></li></ul></div><ul><li>属性遍历的五种方法 <ul><li>for...in</li><li>Object.keys(obj)</li><li>Object.getOwnPropertyNames(obj)</li><li>Object.getOwnPropertySymbols(obj)</li><li>Reflect.ownKeys(obj)</li></ul></li></ul><h3 id="super-关键字" tabindex="-1"><a class="header-anchor" href="#super-关键字" aria-hidden="true">#</a> super 关键字</h3><ul><li>指向当前对象的原型对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> proto<span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;hello&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>注意 <ul><li>只能用在对象的方法之中</li></ul></li></ul><h3 id="扩展运算符-对象-es2018" tabindex="-1"><a class="header-anchor" href="#扩展运算符-对象-es2018" aria-hidden="true">#</a> 扩展运算符（对象）[ES2018]</h3><h4 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值" aria-hidden="true">#</a> 解构赋值</h4><h4 id="扩展运算符" tabindex="-1"><a class="header-anchor" href="#扩展运算符" aria-hidden="true">#</a> 扩展运算符</h4><ul><li>数组是特殊的对象，所以对象的扩展运算符也可以用于数组。</li><li>扩展运算符后面不是对象，则会自动将其转为对象。</li><li>对象的扩展运算符等同于使用Object.assign()方法。</li><li>后面可以跟表达式。</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>完整克隆一个对象（对象实例的属性+对象原型的属性）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 写法一</span>\n<span class="token keyword">const</span> clone1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  __proto__<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>obj\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 写法二</span>\n<span class="token keyword">const</span> clone2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>\n  Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  obj\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 写法三</span>\n<span class="token keyword">const</span> clone3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>\n  Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><ul><li>用处 <ul><li>拷贝对象(另辟一个空间)<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;zfpx&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> school<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">深拷贝与浅拷贝</p><ul><li>浅拷贝(对象的对象引用地址还是同一个) <ul><li>扩展运算符<code>...</code></li><li>Object.assign</li></ul></li><li>深拷贝 <ul><li>$.extend</li><li>实现深拷贝(通过递归)<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>a<span class="token operator">:</span>b<span class="token operator">:</span><span class="token punctuation">{</span>abc<span class="token operator">:</span>abc<span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token operator">!=</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> newObj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newObj\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> newReg<span class="token operator">=</span><span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newReg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul></li></ul></div></li><li>合并对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> ab <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 等同于</span>\n<span class="token keyword">let</span> ab <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="对象的新增方法" tabindex="-1"><a class="header-anchor" href="#对象的新增方法" aria-hidden="true">#</a> 对象的新增方法</h2><ul><li>见对象API</li></ul><h2 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h2><h3 id="引入原因" tabindex="-1"><a class="header-anchor" href="#引入原因" aria-hidden="true">#</a> 引入原因</h3><ul><li>对象的属性名容易冲突（引入后对象的属性名有两种类型，一种是字符串，另一种是Symbol 类型，可保证不会冲突）</li></ul><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><ul><li>表示独一无二的值。</li><li>是第七种原始数据类型(js的数据类型：<code>number</code> <code>string</code> <code>boolean</code> <code>null</code> <code>undefined</code> <code>object</code>)</li><li>Symbol函数前不能使用new命令，不是对象，不能添加属性（类似字符串的数据类型）</li></ul><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><ul><li>接受一个字符串作为参数</li><li>如果 参数是一个对象，就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。</li><li>相同参数的返回值是不相等的(参数只是表示对当前 Symbol 值的描述)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns1 <span class="token comment">// Symbol(foo)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="值" tabindex="-1"><a class="header-anchor" href="#值" aria-hidden="true">#</a> 值</h3><ul><li>不能与其他类型的值进行运算</li><li>可以显式转为字符串，可以转为布尔值，不能转为数值</li></ul><h3 id="symbol-api" tabindex="-1"><a class="header-anchor" href="#symbol-api" aria-hidden="true">#</a> Symbol API</h3><h4 id="构造函数方法" tabindex="-1"><a class="header-anchor" href="#构造函数方法" aria-hidden="true">#</a> 构造函数方法</h4><ul><li>Symbol(str) <ul><li>返回一个Symbol值</li><li>会被登记在全局环境中供搜索</li></ul></li><li>Symbol.for(str) <ul><li>搜索有没有以该参数作为名称的 Symbol 值。有就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。</li><li>不会被登记在全局环境中</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span>\n<span class="token comment">// true</span>\n<span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span>\n<span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li>Symbol.keyFor(str) <ul><li>返回一个已登记的 Symbol 类型值的key。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nSymbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">// &quot;foo&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul><h4 id="_11个内置的symbol值" tabindex="-1"><a class="header-anchor" href="#_11个内置的symbol值" aria-hidden="true">#</a> 11个内置的Symbol值</h4><ul><li><p>Symbol.hasInstance</p><ul><li>对象的Symbol.hasInstance属性，指向一个内部方法。当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> foo <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul></li><li><p>Symbol.isConcatSpreadable</p><ul><li>等于一个布尔值，表示该对象用于Array.prototype.concat()时，是否可以展开。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>\narr1<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token comment">// undefined</span>\n\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr2<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, [&#39;c&#39;,&#39;d&#39;], &#39;e&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li><li><p>Symbol.species</p><ul><li>对象的Symbol.species属性，指向一个构造函数。创建衍生对象时，会使用该属性。</li><li>实例对象在运行过程中，需要再次调用自身的构造函数时，会调用该属性指定的构造函数。</li></ul></li><li><p>Symbol.match</p><ul><li>对象的Symbol.match属性，指向一个函数。当执行str.match(myObject)时，如果该属性存在，会调用它，返回该方法的返回值。</li></ul></li><li><p>Symbol.replace</p><ul><li>对象的Symbol.replace属性，指向一个方法，当该对象被String.prototype.replace方法调用时，会返回该方法的返回值。</li></ul></li><li><p>Symbol.search</p><ul><li>对象的Symbol.search属性，指向一个方法，当该对象被String.prototype.search方法调用时，会返回该方法的返回值。</li></ul></li><li><p>Symbol.split</p><ul><li>对象的Symbol.split属性，指向一个方法，当该对象被String.prototype.split方法调用时，会返回该方法的返回值。</li></ul></li><li><p>Symbol.iterator</p><ul><li>对象的Symbol.iterator属性，指向该对象的默认遍历器方法。对象进行for...of循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器</li></ul></li><li><p>Symbol.toPrimitive</p><ul><li>对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</li></ul></li><li><p>Symbol.toStringTag</p><ul><li>对象的Symbol.toStringTag属性，指向一个方法。在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型。</li></ul></li><li><p>Symbol.unscopables</p><ul><li>对象的Symbol.unscopables属性，指向一个对象。该对象指定了使用with关键字时，哪些属性会被with环境排除。</li></ul></li></ul><h4 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法" aria-hidden="true">#</a> 实例方法</h4><ul><li>Symbol.prototype.description <ul><li>返回 Symbol 的描述。</li></ul></li><li></li></ul><h3 id="作为对象属性名" tabindex="-1"><a class="header-anchor" href="#作为对象属性名" aria-hidden="true">#</a> 作为对象属性名</h3><ul><li>不能用点运算符。</li></ul><h4 id="属性名的遍历" tabindex="-1"><a class="header-anchor" href="#属性名的遍历" aria-hidden="true">#</a> 属性名的遍历</h4><ul><li>只能用<code>Object.getOwnPropertySymbols</code>获取指定对象的所有 Symbol 属性名。</li><li>因为不会被常规方法遍历得到，可以为对象定义一些非私有的、但又希望只用于内部的方法。</li></ul><h3 id="作为常量" tabindex="-1"><a class="header-anchor" href="#作为常量" aria-hidden="true">#</a> 作为常量</h3><ul><li>保证一组常量的值都是不相等的</li><li>可以保证上面的switch语句会按设计的方式工作。</li><li>将魔术字符串的变量值改成Symbol 值，确保不会冲突。<div class="custom-container warning"><p class="custom-container-title">魔术字符串</p><p>在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。</p></div></li></ul><h2 id="set-和-map-数据结构" tabindex="-1"><a class="header-anchor" href="#set-和-map-数据结构" aria-hidden="true">#</a> Set 和 Map 数据结构</h2><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><h4 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h4><ul><li>类似于数组，但是成员的值都是唯一的，没有重复的值。</li><li>没有键名，只有键值（键名和键值是同一个值）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 2 3 5 4(不会添加重复的值)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">数组去重</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 去除数组的重复成员</span>\n<span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">]</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><h4 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h4><ul><li>一个用来初始化的具有 iterable 接口的集合</li></ul><h4 id="值-1" tabindex="-1"><a class="header-anchor" href="#值-1" aria-hidden="true">#</a> 值</h4><ul><li>在 Set 内部，两个NaN是相等。两个空对象不相等</li></ul><h4 id="实例的属性和方法" tabindex="-1"><a class="header-anchor" href="#实例的属性和方法" aria-hidden="true">#</a> 实例的属性和方法</h4><div class="custom-container warning"><p class="custom-container-title">属性</p><ul><li>Set.prototype.constructor：构造函数，默认就是Set函数。</li><li>Set.prototype.size：返回Set实例的成员总数。</li></ul></div><div class="custom-container warning"><p class="custom-container-title">操作方法</p><ul><li>add(value)：添加某个值，返回 Set 结构本身。</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否为Set的成员。</li><li>clear()：清除所有成员，没有返回值。</li></ul></div><div class="custom-container warning"><p class="custom-container-title">遍历操作</p><ul><li>keys()：返回键名的遍历器</li><li>values()：返回键值的遍历器</li><li>entries()：返回键值对的遍历器</li><li>forEach((value,key)=&gt;{})：使用回调函数遍历每个成员 <ul><li>第二个参数，表示绑定处理函数内部的this对象。</li></ul></li></ul></div><h4 id="数组的方法间接用于set" tabindex="-1"><a class="header-anchor" href="#数组的方法间接用于set" aria-hidden="true">#</a> 数组的方法间接用于Set</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 返回Set结构：{2, 4, 6}</span>\n\n<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 返回Set结构：{2, 4}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="实现并集、交集、差集" tabindex="-1"><a class="header-anchor" href="#实现并集、交集、差集" aria-hidden="true">#</a> 实现并集、交集、差集</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 并集</span>\n<span class="token keyword">let</span> union <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set {1, 2, 3, 4}</span>\n\n<span class="token comment">// 交集</span>\n<span class="token keyword">let</span> intersect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// set {2, 3}</span>\n\n<span class="token comment">// 差集</span>\n<span class="token keyword">let</span> difference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Set {1}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset" aria-hidden="true">#</a> WeakSet</h3><ul><li>与Set类似，但成员只能是对象，而不能是其他类型的值。</li><li>WeakSet 不可遍历（因为垃圾回收机制不考虑 WeakSet 对该对象的引用，所以一旦引用对象被回收，成员数就会减少）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h4><ul><li>WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。</li><li>WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。</li><li>WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中</li></ul><h4 id="用处" tabindex="-1"><a class="header-anchor" href="#用处" aria-hidden="true">#</a> 用处</h4><ul><li>储存 DOM 节点 <ul><li>不用担心这些节点从文档移除时，会引发内存泄漏。</li></ul></li></ul><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><h4 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2" aria-hidden="true">#</a> 概念</h4><ul><li>类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="参数-2" tabindex="-1"><a class="header-anchor" href="#参数-2" aria-hidden="true">#</a> 参数</h4><ul><li>任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构</li><li>Set和Map都可以用来生成新的 Map。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Author&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="实例的属性" tabindex="-1"><a class="header-anchor" href="#实例的属性" aria-hidden="true">#</a> 实例的属性</h4><ul><li>size <ul><li>返回 Map 结构的成员总数。</li></ul></li></ul><h4 id="实例的操作方法" tabindex="-1"><a class="header-anchor" href="#实例的操作方法" aria-hidden="true">#</a> 实例的操作方法</h4><ul><li>set(key, value) <ul><li>设置键名key对应的键值为value，然后返回整个 Map 结构。</li><li>如果key已经有值，则键值会被更新，否则就新生成该键。</li><li>可以采用链式写法(返回的是当前的Map对象)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li>get(key) <ul><li>读取key对应的键值，如果找不到key，返回undefined。</li></ul></li><li>has(key) <ul><li>返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li></ul></li><li>delete(key) <ul><li>删除某个键，返回true。如果删除失败，返回false。</li></ul></li><li>clear() <ul><li>清除所有成员，没有返回值。</li></ul></li></ul><h4 id="遍历方法" tabindex="-1"><a class="header-anchor" href="#遍历方法" aria-hidden="true">#</a> 遍历方法</h4><ul><li>keys()：返回键名的遍历器。</li><li>values()：返回键值的遍历器。</li><li>entries()：返回所有成员的遍历器。</li><li>forEach((value,key,map)=&gt;{})：遍历 Map 的所有成员。 <ul><li>第二个参数，用来绑定this。</li></ul></li></ul><h4 id="数组的方法间接用于map" tabindex="-1"><a class="header-anchor" href="#数组的方法间接用于map" aria-hidden="true">#</a> 数组的方法间接用于Map</h4><div class="language-JS ext-JS line-numbers-mode"><pre class="language-JS"><code>const map0 = new Map()\n  .set(1, &#39;a&#39;)\n  .set(2, &#39;b&#39;)\n  .set(3, &#39;c&#39;);\n\nconst map1 = new Map(\n  [...map0].filter(([k, v]) =&gt; k &lt; 3)\n);\n// 产生 Map 结构 {1 =&gt; &#39;a&#39;, 2 =&gt; &#39;b&#39;}\n\nconst map2 = new Map(\n  [...map0].map(([k, v]) =&gt; [k * 2, &#39;_&#39; + v])\n    );\n// 产生 Map 结构 {2 =&gt; &#39;_a&#39;, 4 =&gt; &#39;_b&#39;, 6 =&gt; &#39;_c&#39;}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap" aria-hidden="true">#</a> WeakMap</h3><ul><li>与Map结构类似，但只接受对象作为键名（null除外），不接受其他类型的值作为键名。</li><li>键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。</li><li>WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="weakmap-api" tabindex="-1"><a class="header-anchor" href="#weakmap-api" aria-hidden="true">#</a> WeakMap API</h4><ul><li>无遍历操作，无size属性，无clear</li><li>get()</li><li>set()</li><li>has()</li><li>delete()</li></ul><h4 id="用途-1" tabindex="-1"><a class="header-anchor" href="#用途-1" aria-hidden="true">#</a> 用途</h4><ul><li>DOM 节点作为键名</li><li>一旦这个 DOM 节点删除，该状态就会自动消失，不存在内存泄漏风险。</li><li>部署私有属性 <ul><li>如果删除实例，它们也就随之消失，不会造成内存泄漏。</li></ul></li></ul><h2 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> Proxy</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><ul><li>为了操作对象而提供的新 API</li><li>表示由它来“代理”某些操作，可以译为“代理器”。（对外界的访问进行过滤和改写）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="参数-3" tabindex="-1"><a class="header-anchor" href="#参数-3" aria-hidden="true">#</a> 参数</h3><ul><li>target（所要拦截的目标对象）</li><li>handler（一个对象，用来定制拦截行为）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">35</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nproxy<span class="token punctuation">.</span>time <span class="token comment">// 35</span>\nproxy<span class="token punctuation">.</span>name <span class="token comment">// 35</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ul><li>必须针对Proxy实例进行操作，而不是针对目标对象进行操作</li><li>如果handler没有设置任何拦截，那就等同于直接通向原对象。</li><li>可将 Proxy 对象，设置到object.proxy属性，从而可以在object对象上调用。</li></ul><h3 id="操作方法" tabindex="-1"><a class="header-anchor" href="#操作方法" aria-hidden="true">#</a> 操作方法</h3><ul><li>get(target, propKey, receiver) <ul><li>拦截对象属性的读取，比如proxy.foo和proxy[&#39;foo&#39;]。</li></ul></li><li>set(target, propKey, value, receiver) <ul><li>拦截对象属性的设置，比如proxy.foo = v或proxy[&#39;foo&#39;] = v，返回一个布尔值。</li></ul></li><li>has(target, propKey) <ul><li>拦截propKey in proxy的操作，返回一个布尔值。</li></ul></li><li>construct(target, args) <ul><li>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。</li></ul></li><li>deleteProperty(target, propKey) <ul><li>拦截delete proxy[propKey]的操作，返回一个布尔值。</li></ul></li><li>defineProperty(target, propKey, propDesc) <ul><li>拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</li></ul></li><li>getOwnPropertyDescriptor(target, propKey) <ul><li>拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li></ul></li><li>getPrototypeOf(target) <ul><li>拦截Object.getPrototypeOf(proxy)，返回一个对象。</li></ul></li><li>isExtensible(target) <ul><li>拦截Object.isExtensible(proxy)，返回一个布尔值。</li></ul></li><li>ownKeys(target) <ul><li>拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</li></ul></li><li>preventExtensions(target) <ul><li>拦截Object.preventExtensions(proxy)，返回一个布尔值。</li></ul></li><li>setPrototypeOf(target, proto) <ul><li>拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li></ul></li><li>apply(target, object, args) <ul><li>拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。</li></ul></li></ul><h3 id="proxy-revocable" tabindex="-1"><a class="header-anchor" href="#proxy-revocable" aria-hidden="true">#</a> Proxy.revocable()</h3><ul><li>返回一个可取消的 Proxy 实例。</li></ul><h3 id="用途-2" tabindex="-1"><a class="header-anchor" href="#用途-2" aria-hidden="true">#</a> 用途</h3><ul><li>Web 服务的客户端</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token function">createWebService</span><span class="token punctuation">(</span><span class="token string">&#39;http://example.com/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nservice<span class="token punctuation">.</span><span class="token function">employees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> employees <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ···</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">createWebService</span><span class="token punctuation">(</span><span class="token parameter">baseUrl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propKey<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">httpGet</span><span class="token punctuation">(</span>baseUrl<span class="token operator">+</span><span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> propKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>实现数据库的 ORM 层</li></ul><h2 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect" aria-hidden="true">#</a> Reflect</h2><h3 id="概念-3" tabindex="-1"><a class="header-anchor" href="#概念-3" aria-hidden="true">#</a> 概念</h3><ul><li>为了操作对象而提供的新 API</li><li>Object对象的一些明显属于语言内部的方法，未来的新方法将只部署在Reflect对象上，只有Reflect对象上可以拿到语言内部的方法。</li><li>修改某些Object方法的返回结果，让其变得更合理。</li><li>让Object操作都变成函数行为。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 老写法</span>\n<span class="token string">&#39;assign&#39;</span> <span class="token keyword">in</span> Object <span class="token comment">// true</span>\n<span class="token comment">// 新写法</span>\nReflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>Object<span class="token punctuation">,</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>与Proxy对象的方法一一对应，Proxy对象可以方便地调用对应的Reflect方法，完成默认行为。</li></ul><h3 id="静态方法-大部分与object对象的同名方法的作用相同-而且它与proxy对象的方法是一一对应的。" tabindex="-1"><a class="header-anchor" href="#静态方法-大部分与object对象的同名方法的作用相同-而且它与proxy对象的方法是一一对应的。" aria-hidden="true">#</a> 静态方法（大部分与Object对象的同名方法的作用相同，而且它与Proxy对象的方法是一一对应的。）</h3><ul><li>Reflect.apply(target, thisArg, args)</li><li>Reflect.construct(target, args)</li><li>Reflect.get(target, name, receiver)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>Reflect.set(target, name, value, receiver)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>myObject<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmyObject<span class="token punctuation">.</span>foo <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Reflect.defineProperty(target, name, desc)</li><li>Reflect.deleteProperty(target, name)</li><li>Reflect.has(target, name)</li><li>Reflect.ownKeys(target)</li><li>Reflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li>Reflect.getOwnPropertyDescriptor(target, name)</li><li>Reflect.getPrototypeOf(target)</li><li>Reflect.setPrototypeOf(target, prototype)</li></ul><h3 id="使用-proxy-实现观察者模式" tabindex="-1"><a class="header-anchor" href="#使用-proxy-实现观察者模式" aria-hidden="true">#</a> 使用 Proxy 实现观察者模式</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>person<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>person<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">observe</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>\nperson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 输出</span>\n<span class="token comment">// 李四, 20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> queuedObservers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">observe</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> queuedObservers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">observable</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>set<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  queuedObservers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observer</span> <span class="token operator">=&gt;</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="promise对象" tabindex="-1"><a class="header-anchor" href="#promise对象" aria-hidden="true">#</a> Promise对象</h2><h3 id="概念-4" tabindex="-1"><a class="header-anchor" href="#概念-4" aria-hidden="true">#</a> 概念</h3>',223),na=(0,p._)("li",null,"Promise 是一个对象，从它可以获取异步操作的消息。",-1),sa=(0,p.Uk)("特点"),aa=(0,p.Uk)(" - promise对象的异步操作的"),pa=(0,p.Uk)("三种状态"),ta=(0,p.Uk)(":"),ea=(0,p.Uk)("pending"),la=(0,p.Uk)("（进行中）、"),oa=(0,p.Uk)("fulfilled"),ca=(0,p.Uk)("（已成功）和"),ua=(0,p.Uk)("rejected"),ia=(0,p.Uk)("（已失败） - "),ra=(0,p.Uk)("状态改变"),ka=(0,p.Uk)("：`从pending变为fulfilled`和`从pending变为rejected` "),ba=(0,p._)("h3",{id:"参数-4",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#参数-4","aria-hidden":"true"},"#"),(0,p.Uk)(" 参数")],-1),da=(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Uk)("一个函数（函数参数resolve和reject，由js引擎提供，不用自己部署） "),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Uk)("resolve "),(0,p._)("ul",null,[(0,p._)("li",null,"将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；")])]),(0,p._)("li",null,[(0,p.Uk)("reject "),(0,p._)("ul",null,[(0,p._)("li",null,"将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。")])])])])],-1),ma=(0,p.uE)(' ```js const promise = new Promise(function(resolve, reject) { /* 某异步操作 */ if (/* 异步操作成功 */){ resolve(value); } else { reject(error); } }); <div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n### 构造函数方法\n- Promise()\n&lt;mark-check id=&quot;promiseresolve&quot;&gt;&lt;/mark-check&gt;\n- &lt;highlight-box&gt;Promise.resolve()&lt;/highlight-box&gt;\n  - 将现有对象转为 状态为resolved 的Promise 对象\n  - then会立即执行\n  ```js\n  Promise.resolve(&#39;foo&#39;)\n  // 等价于\n  new Promise(resolve =&gt; resolve(&#39;foo&#39;))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>四种参数 <ul><li>参数是一个 Promise 实例（直接返回这个实例）</li><li>参数是一个thenable对象（将这个对象转为 Promise 对象，然后立即执行thenable对象的then方法。）</li><li>参数不是具有then方法的对象，或根本就不是对象（则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。）</li><li>不带有任何参数（返回一个resolved状态的 Promise 对象。）</li></ul><div class="custom-container warning"><p class="custom-container-title">快速得到一个promise对象</p><p>希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise.resolve()方法。</p></div></li></ul>',3),ha=(0,p.Uk)(" - "),ga=(0,p.Uk)("Promise.reject(reason)"),fa=(0,p.Uk)(" - 返回一个状态为rejected的Promise 实例 - 回调函数立即执行 - 参数会作为reject的理由，变成后续方法的参数。 ```js const p = Promise.reject('出错了'); // 等同于 const p = new Promise((resolve, reject) => reject('出错了')) p.then(null, function (s) { console.log(s) }); // 出错了 ``` "),va=(0,p.Uk)(" - "),ya=(0,p.Uk)("Promise.all([p1,p2,p3]) "),wa=(0,p.uE)(' - 所有成员返回成功才会成功，有一个失败就失败 - 将多个 Promise 实例，包装成一个新的 Promise 实例 - 参数是具有 Iterator 接口的对象，且每个成员都是Promise实例(不是会自使用resolve转) - 如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。 ```js var promise1 = Promise.resolve(3); var promise2 = 42; var promise3 = new Promise(function(resolve, reject) { setTimeout(resolve, 100, &#39;foo&#39;); }); <p>Promise.all([promise1, promise2, promise3]).then(function(values) { console.log(values); }); // expected output: Array [3, 42, &quot;foo&quot;]</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;mark-check id=&quot;promiserace&quot;&gt;&lt;/mark-check&gt;\n- &lt;highlight-box&gt;Promise.race([p1,p2,p3]) &lt;/highlight-box&gt;\n- 将多个 Promise 实例，包装成一个新的 Promise 实例。\n- 参数是具有 Iterator 接口的对象，且每个成员都是Promise实例(不是会自使用resolve转)\n- 只要有一个参数promise状态改变，就产生结果\n```js\nvar promise1 = new Promise(function(resolve, reject) {\n  setTimeout(resolve, 500, &#39;one&#39;);\n});\n\nvar promise2 = new Promise(function(resolve, reject) {\n  setTimeout(resolve, 100, &#39;two&#39;);\n});\n\nPromise.race([promise1, promise2]).then(function(value) {\nconsole.log(value);\n// Both resolve, but promise2 is faster\n});\n// expected output: &quot;two&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="实例方法-1" tabindex="-1"><a class="header-anchor" href="#实例方法-1" aria-hidden="true">#</a> 实例方法</h3>',4),xa=(0,p.Uk)(" - "),ja=(0,p.Uk)("Promise.prototype.then()"),_a=(0,p.Uk)(' - 参数1(回调函数)：状态变为resolved时调用 - 参数2(回调函数)：状态变为rejected时调用 - 返回的是一个新的Promise实例（可以链式调用,第一个then方法指定的回调函数，返回的是另一个Promise对象。） ```js promise.then(function(value) { // success }, function(error) { // failure }); ``` ```js getJSON("/post/1.json").then( post => getJSON(post.commentURL) ).then( comments => console.log("resolved: ", comments), err => console.log("rejected: ", err) ); ``` '),Sa=(0,p.Uk)(" - "),Ua=(0,p.Uk)("Promise.prototype.catch()"),Pa=(0,p.Uk)(" - 指定发生错误时的回调函数 - "),Wa=(0,p.Uk)(".then(null, rejection)或.then(undefined, rejection)的别名"),qa=(0,p.Uk)(" - 建议使用catch方法，而不使用then方法的第二个参数。 ```js getJSON('/posts.json').then(function(posts) { // ... }).catch(function(error) { // 处理 getJSON 和 前一个回调函数运行时发生的错误 console.log('发生错误！', error); }); ``` "),Oa=(0,p.Uk)(" - "),Ea=(0,p.Uk)("Promise.prototype.finally() [ES2018]"),Ma=(0,p.uE)(' - 指定不管 Promise 对象最后状态如何，都会执行的操作。(本质上是then方法的特例) ```JS promise .then(result =&gt; {···}) .catch(error =&gt; {···}) .finally(() =&gt; {···}); ``` <h3 id="promise实现一个ajax操作" tabindex="-1"><a class="header-anchor" href="#promise实现一个ajax操作" aria-hidden="true">#</a> Promise实现一个Ajax操作</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getJSON</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    client<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> handler<span class="token punctuation">;</span>\n    client<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>\n    client<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> promise<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">&quot;/posts.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Contents: &#39;</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;出错了&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">ajax</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行3&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timeout3&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">ajax</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行4&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;出错了&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;log&#39;</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;catch&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;log&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;catch&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="promise高级用法" tabindex="-1"><a class="header-anchor" href="#promise高级用法" aria-hidden="true">#</a> Promise高级用法</h3><h4 id="promise-all" tabindex="-1"><a class="header-anchor" href="#promise-all" aria-hidden="true">#</a> Promise.all</h4><ul><li>所有参数的promise状态都改变后才会执行then。</li><li>每个新闻的三张图片都加载完成后再放到页面上，用户体验更好，看不到闪</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> img<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span>src<span class="token operator">=</span>src<span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">showImgs</span><span class="token punctuation">(</span><span class="token parameter">imgs</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token string">&#39;http://i4.buimg.com/567571/df1ef0720bea6832.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token string">&#39;http://i4.buimg.com/567571/2b07ee25b08930ba.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token string">&#39;http://i4.buimg.com/567571/5eb8190d6b2a1c9c.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>showImgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="promise-race" tabindex="-1"><a class="header-anchor" href="#promise-race" aria-hidden="true">#</a> Promise.race</h4><ul><li>多个实例中有一个状态改变就会执行then，其它的都不会响应了。</li><li>有三张图片放在不同的位置，需要加载这个图片，但不知道三张哪个返回比较快，加载一个就可以。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> img<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span>src<span class="token operator">=</span>src<span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">showImgs</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nPromise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token string">&#39;http://i4.buimg.com/567571/df1ef0720bea6832.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token string">&#39;http://i4.buimg.com/567571/2b07ee25b08930ba.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token string">&#39;http://i4.buimg.com/567571/5eb8190d6b2a1c9c.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>showImgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="promise-a-规范" tabindex="-1"><a class="header-anchor" href="#promise-a-规范" aria-hidden="true">#</a> promise a+ 规范</h3>',13),Ca={href:"https://promisesaplus.com",target:"_blank",rel:"noopener noreferrer"},Ia=(0,p.Uk)("promise a+ 规范"),Aa=(0,p._)("li",null,"所有人写的promise都要符合这个规范，方便使用",-1),Na=(0,p.uE)('<h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><ul><li>加载图片 <ul><li>将图片的加载写成一个Promise，一旦加载完成，Promise的状态就发生变化。</li></ul></li><li>Generator 函数与 Promise 的结合</li><li>同步和异步同样处理 <ul><li>Promise.try提案</li></ul></li></ul><h2 id="iterator和for-of循环" tabindex="-1"><a class="header-anchor" href="#iterator和for-of循环" aria-hidden="true">#</a> Iterator和for..of循环</h2><h3 id="概念-5" tabindex="-1"><a class="header-anchor" href="#概念-5" aria-hidden="true">#</a> 概念</h3><ul><li>统一的接口机制，来处理所有不同的数据结构（Array,Object,Map,Set）。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作<code>for...of</code></li></ul><h3 id="iterator接口" tabindex="-1"><a class="header-anchor" href="#iterator接口" aria-hidden="true">#</a> Iterator接口</h3><ul><li>一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）（Symbol.iterator属性名是symbol内置对象，属性值是个函数，执行这个函数，就会返回一个遍历器。）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          done<span class="token operator">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="具备iterator接口的数据结构" tabindex="-1"><a class="header-anchor" href="#具备iterator接口的数据结构" aria-hidden="true">#</a> 具备Iterator接口的数据结构</h3><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 对象</li><li>NodeList 对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 手动遍历</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> iter <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\niter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;a&#39;, done: false }</span>\niter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;b&#39;, done: false }</span>\niter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;c&#39;, done: false }</span>\niter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">类数组（存在数值键名和length属性）部署 Iterator 接口</p><p>Symbol.iterator方法引用数组的 Iterator 接口。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> iterable <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>\n  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>\n  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>\n  length<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;a&#39;, &#39;b&#39;, &#39;c&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><h3 id="调用iterator接口的场合" tabindex="-1"><a class="header-anchor" href="#调用iterator接口的场合" aria-hidden="true">#</a> 调用Iterator接口的场合</h3><ul><li><p>任何接受数组作为参数的场合（数组的遍历会调用遍历器接口）</p><ul><li>for...of</li><li>Array.from()</li><li>Map(), Set(), WeakMap(), WeakSet()（比如new Map([[&#39;a&#39;,1],[&#39;b&#39;,2]])）</li><li>Promise.all()</li><li>Promise.race()</li></ul></li><li><p>解构赋值</p></li><li><p>扩展运算符</p></li><li><p>yield*</p></li></ul><h3 id="遍历器对象部署的方法" tabindex="-1"><a class="header-anchor" href="#遍历器对象部署的方法" aria-hidden="true">#</a> 遍历器对象部署的方法</h3><ul><li>next()</li><li>return <ul><li>如果for...of循环提前退出（通常是因为出错，或者有break语句），就会调用return方法。(如果一个对象在完成遍历前，需要清理或释放资源，就可以部署return方法。)</li></ul></li><li>throw <ul><li>配合 Generator 函数使用</li></ul></li></ul><h3 id="for-of循环" tabindex="-1"><a class="header-anchor" href="#for-of循环" aria-hidden="true">#</a> for...of循环</h3><ul><li>数组 <ul><li>代替forEach方法</li><li>for...in循环读取键名，for...of循环读取键值</li><li>for...in返回所有属性，for...of只返回具有数字索引的属性</li></ul></li><li>Set和Map <ul><li>遍历的顺序是按照各个成员被添加进数据结构的顺序</li><li>Set 结构遍历时，返回的是一个值， Map 结构遍历时，返回的是一个数组(数组的两个成员分别为当前 Map 成员的键名和键值)</li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">遍历语法总结</p><ul><li>for循环（麻烦）</li><li>forEach(无法中途跳出循环，break和return都无效)</li><li>for...in(遍历键名) <ul><li>会遍历手动添加的其他键，甚至包括原型链上的键。</li><li>可能会以任意顺序遍历键名。</li></ul></li><li>for...of <ul><li>语法简洁，没有for...in的缺点。</li><li>可以与break、continue和return配合使用。</li><li>提供了遍历所有数据结构的统一操作接口。</li></ul></li></ul></div><h2 id="generator-函数的语法" tabindex="-1"><a class="header-anchor" href="#generator-函数的语法" aria-hidden="true">#</a> Generator 函数的语法</h2><h3 id="概念-6" tabindex="-1"><a class="header-anchor" href="#概念-6" aria-hidden="true">#</a> 概念</h3><ul><li>状态机，封装了多个内部状态</li><li>调用后返回一个遍历器对象（遍历器生成函数），可以依次遍历 Generator 函数内部的每一个状态。</li><li>function关键字与函数名之间有一个星号(没有规定是哪个位置)，函数体内部使用yield表达式（定义不同的内部状态）</li><li>分段执行，调用遍历器对象的next方法进入下一个状态（yield表达式是暂停执行的标记）</li><li>next() <ul><li>遇到yiedl或者return返回一个有value(内部状态的值)和done(是否遍历结束)属性的对象。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;ending&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> hw <span class="token operator">=</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// { value: &#39;hello&#39;, done: false }</span>\nhw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// { value: &#39;world&#39;, done: false }</span>\nhw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// { value: &#39;ending&#39;, done: true }</span>\nhw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// { value: undefined, done: true }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="yield表达式" tabindex="-1"><a class="header-anchor" href="#yield表达式" aria-hidden="true">#</a> yield表达式</h4><ul><li>yield表达式只能用在 Generator 函数里面</li><li>yiedl具备记忆位置功能，return不具备</li><li>如果用在另一个表达式之中，必须放在圆括号里面。</li><li>用作函数参数或放在赋值表达式的右边，可以不加括号。</li></ul><h4 id="iterator接口赋值generator" tabindex="-1"><a class="header-anchor" href="#iterator接口赋值generator" aria-hidden="true">#</a> Iterator接口赋值Generator</h4><ul><li>可以把 Generator 赋值给对象的Symbol.iterator属性(Generator 函数就是遍历器生成函数)</li></ul><h3 id="next-方法" tabindex="-1"><a class="header-anchor" href="#next-方法" aria-hidden="true">#</a> next()方法</h3><ul><li>带一个参数，该参数就会被当作上一个yield表达式的返回值。</li></ul><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h3><ul><li>Generator.prototype.throw() <ul><li>在函数体外抛出错误，然后在 Generator 函数体内捕获。</li><li>接受一个参数，该参数会被catch语句接收，建议抛出Error对象的实例。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;内部捕获&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ni<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  i<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  i<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;外部捕获&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 内部捕获 a</span>\n<span class="token comment">// 外部捕获 b</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>Generator.prototype.return() <ul><li>返回给定的值(参数)，并且终结遍历 Generator 函数。</li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">next(),throw(),return</p><ul><li>让 Generator 函数恢复执行，并且使用不同的语句替换yield表达式。 <ul><li>next()是将yield表达式替换成一个值。</li><li>throw()是将yield表达式替换成一个throw语句。</li><li>return()是将yield表达式替换成一个return语句。</li></ul></li></ul></div><h3 id="generator函数里执行generator函数。" tabindex="-1"><a class="header-anchor" href="#generator函数里执行generator函数。" aria-hidden="true">#</a> Generator函数里执行Generator函数。</h3><ul><li>yiedl* 表达式</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 等同于</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 等同于</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> v<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// &quot;x&quot;</span>\n<span class="token comment">// &quot;a&quot;</span>\n<span class="token comment">// &quot;b&quot;</span>\n<span class="token comment">// &quot;y&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="作为对象属性" tabindex="-1"><a class="header-anchor" href="#作为对象属性" aria-hidden="true">#</a> 作为对象属性</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">*</span> <span class="token function">myGeneratorMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ···\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 等同于</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">myGeneratorMethod</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ···</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="作为状态机" tabindex="-1"><a class="header-anchor" href="#作为状态机" aria-hidden="true">#</a> 作为状态机</h3><ul><li>Generator 是实现状态机的最佳结构。</li><li>不用外部变量保存状态，因为它本身就包含了一个状态信息（目前是否处于暂停态）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES5状态机</span>\n<span class="token keyword">var</span> ticking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">clock</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ticking<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tick!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tock!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ticking <span class="token operator">=</span> <span class="token operator">!</span>ticking<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Generator状态机</span>\n<span class="token keyword">var</span> <span class="token function-variable function">clock</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tick!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tock!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="应用-可以暂停函数执行-返回任意表达式的值。" tabindex="-1"><a class="header-anchor" href="#应用-可以暂停函数执行-返回任意表达式的值。" aria-hidden="true">#</a> 应用（可以暂停函数执行，返回任意表达式的值。）</h3><ul><li>异步操作的同步化表达<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&quot;http://some.url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">makeAjaxCall</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li>控制流管理</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Promise实现</span>\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>step1<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>step2<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>step3<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>step4<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something with value4</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Handle any error from step1 through step4</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Generator改善</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">longRunningTask</span><span class="token punctuation">(</span><span class="token parameter">value1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> value2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">step1</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> value3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">step2</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> value4 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">step3</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> value5 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">step4</span><span class="token punctuation">(</span>value4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Do something with value4</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Handle any error from step1 through step4</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li>部署 Iterator 接口</li><li>作为数据结构 <ul><li>可以看作是一个数组结构<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;world.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;and-such.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 像数组一样用for of遍历</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>task <span class="token keyword">of</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// task是一个函数，可以像回调函数那样使用它</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li></ul><h2 id="generator-函数的异步应用" tabindex="-1"><a class="header-anchor" href="#generator-函数的异步应用" aria-hidden="true">#</a> Generator 函数的异步应用</h2><h3 id="es5的异步处理方法" tabindex="-1"><a class="header-anchor" href="#es5的异步处理方法" aria-hidden="true">#</a> ES5的异步处理方法</h3><ul><li>回调函数</li><li>事件监听</li><li>发布/订阅</li><li>Promise 对象 <ul><li>不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。</li><li>代码冗余（原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then）原来的语义变得很不清楚。</li></ul></li></ul><h3 id="传统异步编程的解决方案-多任务的解决方案-协程" tabindex="-1"><a class="header-anchor" href="#传统异步编程的解决方案-多任务的解决方案-协程" aria-hidden="true">#</a> 传统异步编程的解决方案（多任务的解决方案）协程</h3><ul><li>概念 <ul><li>第一步，协程A开始执行。</li><li>第二步，协程A执行到一半，进入暂停，执行权转移到协程B。</li><li>第三步，（一段时间后）协程B交还执行权。</li><li>第四步，协程A恢复执行</li></ul></li></ul><h3 id="协程在es6中的实现-generator-函数" tabindex="-1"><a class="header-anchor" href="#协程在es6中的实现-generator-函数" aria-hidden="true">#</a> 协程在ES6中的实现（Generator 函数）</h3><ul><li>可以交出函数的执行权（即暂停执行）。 <ul><li>Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用yield语句注明。</li></ul></li></ul><h3 id="co模块" tabindex="-1"><a class="header-anchor" href="#co模块" aria-hidden="true">#</a> co模块</h3><ul><li>自动执行Genrerator函数 <ul><li>接受 Generator 函数作为参数，返回一个 Promise 对象。</li><li>源码：利用递归执行next不停进行then回调</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">gen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/fstab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/shells&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> co <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;co&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">co</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">co</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Generator 函数执行完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// co源码</span>\n<span class="token keyword">function</span> <span class="token function">co</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> gen <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> gen <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gen <span class="token operator">||</span> <span class="token keyword">typeof</span> gen<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">co</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> gen <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> gen <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>gen <span class="token operator">||</span> <span class="token keyword">typeof</span> gen<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> ret<span class="token punctuation">;</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        ret <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">next</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">toPromise</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token function">isPromise</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>\n    <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>\n      <span class="token string">&#39;You may only yield a function, promise, generator, array, or object, &#39;</span>\n      <span class="token operator">+</span> <span class="token string">&#39;but the following object was passed: &quot;&#39;</span>\n      <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n      <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><ul><li>支持并发的异步操作 <ul><li>要把并发的操作都放在数组或对象里面，跟在yield语句后面。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 数组的写法</span>\n<span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">[</span>\n    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 对象的写法</span>\n<span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">{</span>\n    <span class="token number">1</span><span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token number">2</span><span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="async函数" tabindex="-1"><a class="header-anchor" href="#async函数" aria-hidden="true">#</a> async函数</h2><h3 id="是-generator-函数的语法糖。" tabindex="-1"><a class="header-anchor" href="#是-generator-函数的语法糖。" aria-hidden="true">#</a> 是 Generator 函数的语法糖。</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Generator</span>\n<span class="token keyword">const</span> <span class="token function-variable function">gen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/fstab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/shells&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// async</span>\n<span class="token keyword">const</span> <span class="token function-variable function">asyncReadFile</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/fstab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/shells&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>改善 <ul><li>内置执行器（Generator 函数，需要调用next方法，或者用co模块，才能真正执行）。</li><li>更好的语义</li><li>更广的适用性（await后可以是 Promise 对象和原始类型的值，co模块的yield后只能是Thunk函数或Promise对象）</li><li>返回值是Promise(Generator 函数的返回值是 Iterator 对象)</li><li>z总之：async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</li></ul></li></ul><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><ul><li>async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</li><li>async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;title&gt;([\\s\\S]+)&lt;\\/title&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token string">&#39;https://tc39.github.io/ecma262/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>\n<span class="token comment">// &quot;ECMAScript 2017 Language Specification&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="await命令" tabindex="-1"><a class="header-anchor" href="#await命令" aria-hidden="true">#</a> await命令</h3><ul><li>await命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</li><li>错误处理 <ul><li>将其放在try...catch代码块之中</li><li>有多个await命令，可以统一放在try...catch结构中。</li></ul></li><li>注意点 <ul><li>最好把await命令放在try...catch代码块中。（await命令后面的Promise对象，运行结果可能是rejected）</li><li>多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 多个await</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 写法一</span>\n<span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 写法二</span>\n<span class="token keyword">let</span> fooPromise <span class="token operator">=</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> barPromise <span class="token operator">=</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> fooPromise<span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> barPromise<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li>await命令只能用在async函数之中 <ul><li>如果将forEach方法的参数改成async函数，也有问题。正确的写法是采用for循环。</li></ul></li><li>async 函数可以保留运行堆栈。</li></ul></li></ul><h3 id="async函数实现原理" tabindex="-1"><a class="header-anchor" href="#async函数实现原理" aria-hidden="true">#</a> async函数实现原理</h3><ul><li>将 Generator 函数和自动执行器，包装在一个函数里。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 等同于</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="扩展运算符-1" tabindex="-1"><a class="header-anchor" href="#扩展运算符-1" aria-hidden="true">#</a> 扩展运算符<code>…</code></h2><ul><li><code>...</code>的作用就是删掉外面的{}</li></ul><h3 id="用于对象的展开-es7" tabindex="-1"><a class="header-anchor" href="#用于对象的展开-es7" aria-hidden="true">#</a> 用于对象的展开(es7)</h3><h3 id="用于数组的展开" tabindex="-1"><a class="header-anchor" href="#用于数组的展开" aria-hidden="true">#</a> 用于数组的展开</h3><h3 id="用于剩余运算符" tabindex="-1"><a class="header-anchor" href="#用于剩余运算符" aria-hidden="true">#</a> 用于剩余运算符</h3><h2 id="class-的基本语法" tabindex="-1"><a class="header-anchor" href="#class-的基本语法" aria-hidden="true">#</a> Class 的基本语法</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><h4 id="生成实例对象的传统方法是通过构造函数。" tabindex="-1"><a class="header-anchor" href="#生成实例对象的传统方法是通过构造函数。" aria-hidden="true">#</a> 生成实例对象的传统方法是通过构造函数。</h4><h4 id="es6引入了-class-类-这个概念-作为对象的模板。【只是一个语法糖】" tabindex="-1"><a class="header-anchor" href="#es6引入了-class-类-这个概念-作为对象的模板。【只是一个语法糖】" aria-hidden="true">#</a> ES6引入了 Class（类）这个概念，作为对象的模板。【只是一个语法糖】</h4><ul><li>与ES5一致的 <ul><li>让对象原型的写法更加清晰、更像面向对象编程的语法。不需要加上function这个关键字,方法之间不需要逗号分隔(构造函数的另一种写法)</li><li>类的数据类型就是函数，类本身就指向构造函数。</li><li>使用也是对类使用new命令</li><li>类的所有方法都定义在类的prototype属性上面。(Object.assign方法一次向类添加多个方法)</li><li>prototype对象的constructor属性，直接指向“类”的本身，</li></ul></li><li>与ES5不一致的 <ul><li>类的内部所有定义的方法，都是不可枚举的</li><li>类必须使用new调用，否则会报错（普通构造函数不用new也可以执行）</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES5</span>\n<span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ES6</span>\n<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">typeof</span> Point <span class="token comment">// &quot;function&quot;</span>\nPoint <span class="token operator">===</span> <span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token comment">// true</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">toValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 等同于</span>\n<span class="token class-name">Point</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">toValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="constructor【与es5一致】" tabindex="-1"><a class="header-anchor" href="#constructor【与es5一致】" aria-hidden="true">#</a> constructor【与ES5一致】</h4><ul><li>默认方法，如果定义，会添加一个空的constructor方法。（通过new命令生成对象实例时，自动调用该方法。）</li><li>默认返回实例对象（即this），可以指定返回另外一个对象。</li></ul><h4 id="类的实例【与es5一致】" tabindex="-1"><a class="header-anchor" href="#类的实例【与es5一致】" aria-hidden="true">#</a> 类的实例【与ES5一致】</h4><ul><li>使用new命令</li><li>实例的属性除非显式定义在其本身（this对象上），否则都是定义在原型上（class上）。</li></ul><h4 id="取值函数-getter-和存值函数-setter-【与es5一致】" tabindex="-1"><a class="header-anchor" href="#取值函数-getter-和存值函数-setter-【与es5一致】" aria-hidden="true">#</a> 取值函数（getter）和存值函数（setter）【与ES5一致】</h4><ul><li>对某个属性设置存值函数和取值函数，拦截该属性的存取行为。 <ul><li>存值函数和取值函数是设置在属性的 Descriptor 对象上的。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;getter&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">set</span> <span class="token function">prop</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setter: &#39;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ninst<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token comment">// setter: 123</span>\ninst<span class="token punctuation">.</span>prop\n<span class="token comment">// &#39;getter&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="属性表达式" tabindex="-1"><a class="header-anchor" href="#属性表达式" aria-hidden="true">#</a> 属性表达式</h4><ul><li>类的属性名，可以采用表达式。</li></ul><h4 id="class用表达式形式定义" tabindex="-1"><a class="header-anchor" href="#class用表达式形式定义" aria-hidden="true">#</a> Class用表达式形式定义</h4><ul><li>类的名字只在 Class 的内部可用，指代当前类。在 Class 外部，只能用变量名引用。</li><li>可简写省略名字</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> MyClass <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Me</span> <span class="token punctuation">{</span>\n  <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Me<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> MyClass <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1" aria-hidden="true">#</a> 注意</h4><ul><li>类和模块的内部，默认是严格模式</li><li>类不存在变量提升（hoist）</li><li>类函数的许多特性都被Class继承，包括name属性</li><li>如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。</li><li>类的方法内部如果含有this，它默认指向类的实例。</li></ul><h3 id="静态方法-不会被实例继承-而是直接通过类来调用" tabindex="-1"><a class="header-anchor" href="#静态方法-不会被实例继承-而是直接通过类来调用" aria-hidden="true">#</a> 静态方法（不会被实例继承，而是直接通过类来调用）</h3><ul><li>在一个方法前，加上static关键字</li></ul><h3 id="静态属性" tabindex="-1"><a class="header-anchor" href="#静态属性" aria-hidden="true">#</a> 静态属性()</h3><ul><li>ES6 明确规定，Class 内部只有静态方法，没有静态属性。只能采取这种方法</li><li>有提案提供像静态方法一样的static关键字</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\nFoo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nFoo<span class="token punctuation">.</span>prop <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="实例属性" tabindex="-1"><a class="header-anchor" href="#实例属性" aria-hidden="true">#</a> 实例属性</h3><ul><li>定义 <ul><li>定义在constructor()方法里面</li><li>定义在类的最顶层（这时，不需要在实例属性前面加上this。）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">IncreasingCounter</span> <span class="token punctuation">{</span>\n  _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Getting the current value!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_count<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_count<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="私有方法和私有属性" tabindex="-1"><a class="header-anchor" href="#私有方法和私有属性" aria-hidden="true">#</a> 私有方法和私有属性</h3><ul><li>只能在类的内部访问的方法和属性，外部不能访问。</li><li>ES6 不提供，可以采取以下三种方法模拟实现，（#语法目前在提案中） <ul><li>在命名上加以区别。</li><li>将私有方法移出模块</li><li>利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。</li></ul></li></ul><h3 id="new-target-属性" tabindex="-1"><a class="header-anchor" href="#new-target-属性" aria-hidden="true">#</a> new.target 属性</h3><ul><li>用在构造函数之中，返回new命令作用于的那个构造函数。</li><li>如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，</li><li>可以用来确定构造函数是怎么调用的。</li></ul><h2 id="class-的继承" tabindex="-1"><a class="header-anchor" href="#class-的继承" aria-hidden="true">#</a> Class 的继承</h2><h3 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1" aria-hidden="true">#</a> 简介</h3><ul><li>通过extends关键字实现继承</li><li>super关键字表示父类的构造函数</li><li>子类必须在constructor方法中调用super方法 <ul><li>子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</li></ul><div class="custom-container warning"><p class="custom-container-title">ES5继承和ES6继承区别</p><ul><li>ES5 先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。</li><li>ES6 先将父类实例对象的属性和方法，加到this上面，然后再用子类的构造函数修改this。</li></ul></div></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的constructor(x, y)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的toString()</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="获取父类" tabindex="-1"><a class="header-anchor" href="#获取父类" aria-hidden="true">#</a> 获取父类</h3><ul><li>判断一个类是否继承了另一个类。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>ColorPoint<span class="token punctuation">)</span> <span class="token operator">===</span> Point\n<span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="super-关键字-1" tabindex="-1"><a class="header-anchor" href="#super-关键字-1" aria-hidden="true">#</a> super 关键字</h3><ul><li>作为函数，代表父类的构造函数，用来继承父类方法</li><li>作为对象 <ul><li>在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</li></ul></li></ul><h3 id="类的-prototype-属性和-proto-属性" tabindex="-1"><a class="header-anchor" href="#类的-prototype-属性和-proto-属性" aria-hidden="true">#</a> 类的 prototype 属性和__proto__属性</h3><ul><li>作为构造函数的语法糖，同时有prototype属性和__proto__属性，因此同时存在两条继承链。 <ul><li>子类的__proto__属性，表示构造函数的继承，总是指向父类。</li><li>子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。</li></ul></li></ul><h3 id="原生构造函数-js内置构造函数-的继承" tabindex="-1"><a class="header-anchor" href="#原生构造函数-js内置构造函数-的继承" aria-hidden="true">#</a> 原生构造函数（js内置构造函数）的继承</h3><ul><li>原生构造函数是指语言内置的构造函数，通常用来生成数据结构。 <ul><li>Boolean()</li><li>Number()</li><li>String()</li><li>Array()</li><li>Date()</li><li>Function()</li><li>RegExp()</li><li>Error()</li><li>Object()</li></ul></li></ul><h3 id="mixin模式的实现" tabindex="-1"><a class="header-anchor" href="#mixin模式的实现" aria-hidden="true">#</a> Mixin模式的实现</h3><ul><li>Mixin <ul><li>多个对象合成一个新的对象，新对象具有各个组成成员的接口。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 将多个类的接口“混入”（mix in）另一个类。</span>\n<span class="token keyword">function</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>mixins</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">class</span> <span class="token class-name">Mix</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> mixin <span class="token keyword">of</span> mixins<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">copyProperties</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">mixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝实例属性</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> mixin <span class="token keyword">of</span> mixins<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">copyProperties</span><span class="token punctuation">(</span>Mix<span class="token punctuation">,</span> mixin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝静态属性</span>\n    <span class="token function">copyProperties</span><span class="token punctuation">(</span><span class="token class-name">Mix</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> mixin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝原型属性</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> Mix<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">copyProperties</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span> key <span class="token operator">!==</span> <span class="token string">&#39;constructor&#39;</span>\n      <span class="token operator">&amp;&amp;</span> key <span class="token operator">!==</span> <span class="token string">&#39;prototype&#39;</span>\n      <span class="token operator">&amp;&amp;</span> key <span class="token operator">!==</span> <span class="token string">&#39;name&#39;</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="module的语法" tabindex="-1"><a class="header-anchor" href="#module的语法" aria-hidden="true">#</a> Module的语法</h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1" aria-hidden="true">#</a> 概述</h3><ul><li>ES6之前，CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。</li><li>ES6 在语言标准的层面上，实现了模块功能，而且得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</li></ul><div class="custom-container warning"><p class="custom-container-title">区别</p><ul><li>CMD和AMD运行时才能确定模块的依赖关系，输入时必须查找对象属性，而ES6编译时就能确定</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// CommonJS模块(整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取 3 个方法。</span>\n<span class="token comment">// “运行时加载”，因为只有运行时才能得到这个对象)</span>\n<span class="token comment">// CommonJS 模块输出的是值的缓存，不存在动态更新，</span>\n<span class="token keyword">let</span> <span class="token punctuation">{</span> stat<span class="token punctuation">,</span> exists<span class="token punctuation">,</span> readFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ES6模块(从fs模块加载 3 个方法，其他方法不加载。</span>\n<span class="token comment">// “编译时加载”或者静态加载,编译时就完成模块加载)</span>\n<span class="token comment">// 值动态更新</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> stat<span class="token punctuation">,</span> exists<span class="token punctuation">,</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><ul><li>ES6模块优点 <ul><li>静态加载</li><li>不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。</li><li>将来浏览器的新 API 就能用模块格式提供</li><li>不再需要对象作为命名空间（比如Math对象），可以通过模块提供。</li></ul></li><li>注意 <ul><li>ES6的模块自动采用严格模式</li><li>ES6模块中，顶层的this指向undefined(不应该在顶层代码使用this)</li></ul></li></ul><h3 id="export命令" tabindex="-1"><a class="header-anchor" href="#export命令" aria-hidden="true">#</a> export命令</h3><ul><li>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。</li><li>可使用as重命名</li><li>export命令规定的是对外的接口，所以输出的必须是接口（必须在接口名与模块内部变量之间建立一一对应的关系，通过接口取到值，而不能直接输出值）</li><li>export语句输出的接口，与其对应的值是动态绑定关系（通过该接口，可以取到模块内部实时的值）</li><li>export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 写法一</span>\n<span class="token keyword">export</span> <span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string">&#39;Michael&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string">&#39;Jackson&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 写法二（优先考虑）</span>\n<span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string">&#39;Michael&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string">&#39;Jackson&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">v1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> v1 <span class="token keyword">as</span> streamV1 <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 报错</span>\n<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> m<span class="token punctuation">;</span>\n<span class="token comment">// 报错</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">export</span> f<span class="token punctuation">;</span>\n<span class="token comment">// 写法一</span>\n<span class="token keyword">export</span> <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// 写法二</span>\n<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>m<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 写法三</span>\n<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>n <span class="token keyword">as</span> m<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 正确</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 正确</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>f<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> foo <span class="token operator">=</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出变量foo，值为bar，500毫秒后变成baz</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="import命令" tabindex="-1"><a class="header-anchor" href="#import命令" aria-hidden="true">#</a> import命令</h3><ul><li>接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块对外接口的名称相同。</li><li>使用as关键字，将输入的变量重命名。</li><li>输入的变量是只读的(不允许在加载模块的脚本里面，改写接口。但对象的属性是可以改写的。改写后其他模块也能读取，所以很难查错)</li><li>from，位置，.js后缀可以省略，只是模块名，必须有配置文件，告诉js引擎该模块的位置</li><li>import命令具有提升效果，会提升到整个模块的头部，首先执行。</li><li>import是静态执行，所以不能使用表达式和变量（运行时才能得到结果的语法）</li><li>没有from,import语句会执行所加载的模块</li><li>多次重复执行同一句import语句，只会执行一次</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// main.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> year <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./profile.js&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> lastName <span class="token keyword">as</span> surname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./profile.js&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> firstName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="模块的整体加载" tabindex="-1"><a class="header-anchor" href="#模块的整体加载" aria-hidden="true">#</a> 模块的整体加载</h3><ul><li>用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// circle.js</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token parameter">radius</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token parameter">radius</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> circle <span class="token keyword">from</span> <span class="token string">&#39;./circle&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;圆面积：&#39;</span> <span class="token operator">+</span> circle<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;圆周长：&#39;</span> <span class="token operator">+</span> circle<span class="token punctuation">.</span><span class="token function">circumference</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="export-default命令" tabindex="-1"><a class="header-anchor" href="#export-default命令" aria-hidden="true">#</a> export default命令</h3><ul><li>import命令后面，不使用大括号。可以指定任意名字。</li><li>无需知道模块里有哪些属性和方法即可加载模块。</li><li>本质是将后面的值，赋给default变量，然后系统允许你为它取任意名字。 <ul><li>后面不能跟变量声明语句</li><li>可以直接将一个值写在export default之后。</li><li>可以同时输入默认方法和其他接口</li><li>可以用来输出类</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// export-default.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ···</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> each <span class="token keyword">as</span> forEach <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// import-default.js</span>\n<span class="token keyword">import</span> customName <span class="token keyword">from</span> <span class="token string">&#39;./export-default&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> _<span class="token punctuation">,</span> <span class="token punctuation">{</span> each<span class="token punctuation">,</span> forEach <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">;</span>\n<span class="token function">customName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="export-与-import-的复合写法" tabindex="-1"><a class="header-anchor" href="#export-与-import-的复合写法" aria-hidden="true">#</a> export 与 import 的复合写法</h3><ul><li>如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。</li><li>写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用foo和bar。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 可以简单理解为</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>模块接口改名</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token keyword">as</span> myFoo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>整体输出</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;my_module&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 默认接口</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>具名接口改为默认接口</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> es6 <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./someModule&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// 等同于</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./someModule&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>默认接口改名为具名接口</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./someModule&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>下面三种import语句，没有对应的复合写法。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> someIdentifier <span class="token keyword">from</span> <span class="token string">&quot;someModule&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> someIdentifier <span class="token keyword">from</span> <span class="token string">&quot;someModule&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> someIdentifier<span class="token punctuation">,</span> <span class="token punctuation">{</span> namedIdentifier <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;someModule&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="模块的继承" tabindex="-1"><a class="header-anchor" href="#模块的继承" aria-hidden="true">#</a> 模块的继承</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// circleplus.js</span>\n<span class="token comment">// 继承了circle模块。</span>\n<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;circle&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">2.71828182846</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="跨模块常量" tabindex="-1"><a class="header-anchor" href="#跨模块常量" aria-hidden="true">#</a> 跨模块常量</h4><ul><li>const声明的常量只在当前代码块有效。</li><li>如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享 <ul><li>建一个专门的constants目录</li><li>将这些文件输出的常量，合并在index.js里面。</li><li>使用的时候，直接加载index.js</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// constants/db.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;http://my.couchdbserver.local:5984&#39;</span><span class="token punctuation">,</span>\n  admin_username<span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>\n  admin_password<span class="token operator">:</span> <span class="token string">&#39;admin password&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// constants/user.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;staff&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ceo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;chief&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;moderator&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// constants/index.js</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>db<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./db&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span>users<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./users&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// script.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>db<span class="token punctuation">,</span> users<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./constants/index&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> import()</h3><ul><li>require是运行时加载模块，import命令无法取代require的动态加载功能。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// require到底加载哪一个模块，只有运行时才知道。</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">&#39;./&#39;</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>\n<span class="token keyword">const</span> myModual <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>提案，建议引入import()函数，完成动态加载。 <ul><li>返回一个 Promise 对象。</li><li>import()类似于 Node 的require方法，区别主要是前者是异步加载，后者是同步加载。</li></ul></li><li>适用场合 <ul><li>按需加载。</li><li>条件加载</li><li>动态的模块路径</li></ul></li></ul><h2 id="module的加载实现" tabindex="-1"><a class="header-anchor" href="#module的加载实现" aria-hidden="true">#</a> Module的加载实现</h2><p>修改测试</p><h3 id="浏览器加载" tabindex="-1"><a class="header-anchor" href="#浏览器加载" aria-hidden="true">#</a> 浏览器加载</h3><ul><li><p>传统方法</p><ul><li><code>&lt;script&gt;</code>标签打开<code>defer</code>或<code>async</code>属性，脚本就会异步加载。(渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。)</li></ul><div class="custom-container warning"><p class="custom-container-title">defer和async区别</p><p>defer是“渲染完再执行”，能保证加载顺序，async是“下载完就执行”，无法保证加载顺序。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;path/to/myModule.js&quot;</span> defer<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;path/to/myModule.js&quot;</span> async<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>ES6模块加载规则</p><ul><li><p>使用<code>&lt;script&gt;</code>标签，加入<code>type=&quot;module&quot;</code>属性</p><ul><li>对于<code>type=&quot;module&quot;</code>的默认（defer）异步加载</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;./foo.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>内嵌脚本</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span>\n  <span class="token keyword">import</span> utils <span class="token keyword">from</span> <span class="token string">&quot;./utils.js&quot;</span><span class="token punctuation">;</span>\n  <span class="token comment">// other code</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="es6-模块与-commonjs-模块的差异" tabindex="-1"><a class="header-anchor" href="#es6-模块与-commonjs-模块的差异" aria-hidden="true">#</a> ES6 模块与 CommonJS 模块的差异</h3><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li></ul><h3 id="node加载" tabindex="-1"><a class="header-anchor" href="#node加载" aria-hidden="true">#</a> Node加载</h3><ul><li><p>概述</p><ul><li>Node 与 ES6 模块格式是不兼容的。</li><li>要求 ES6 模块采用.mjs后缀文件名。(require命令不能加载.mjs文件,.mjs文件里面也不能使用require命令)</li></ul></li><li><p>内部变量</p><ul><li>ES6 模块之中不能使用 CommonJS 模块的特有的一些内部变量。 <ul><li>this关键字。 <ul><li>ES6 模块之中，顶层的this指向undefined；CommonJS 模块的顶层this指向当前模块，</li></ul></li><li>arguments</li><li>require</li><li>module</li><li>exports</li><li>__filename</li><li>__dirname</li></ul></li></ul></li><li><p>ES6 模块加载 CommonJS 模块</p><ul><li>Node 的import命令加载 CommonJS 模块，会自动将module.exports属性，当作export default xxx。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// a.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 等同于</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>CommonJS 模块加载 ES6 模块</p><ul><li>使用import()函数,ES6 模块的所有输出接口，会成为输入对象的属性。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// es.mjs</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> bar<span class="token operator">:</span> <span class="token string">&#39;my-default&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span>\n<span class="token comment">// cjs.js</span>\n<span class="token keyword">const</span> es_namespace <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./es.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// es_namespace = {</span>\n<span class="token comment">//   get default() {</span>\n<span class="token comment">//     ...</span>\n<span class="token comment">//   }</span>\n<span class="token comment">// }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>es_namespace<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// { bar:&#39;my-default&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>循环加载</p><ul><li>a脚本的执行依赖b脚本，而b脚本的执行又依赖a脚本。</li><li>CommonJS 模块一旦出现某个模块被&quot;循环加载&quot;，就只输出已经执行的部分，还未执行的部分不会输出。</li><li>需要开发者自己保证，真正取值的时候能够取到值。需要开发者自己保证，真正取值的时候能够取到值。</li></ul></li></ul><h3 id="es6-模块的转码" tabindex="-1"><a class="header-anchor" href="#es6-模块的转码" aria-hidden="true">#</a> ES6 模块的转码</h3><ul><li>浏览器目前还不支持 ES6 模块，为了现在就能使用，可以将其转为 ES5 的写法。</li></ul><h4 id="转码方法" tabindex="-1"><a class="header-anchor" href="#转码方法" aria-hidden="true">#</a> 转码方法</h4><ul><li>Babel</li><li>ES6 module transpiler</li><li>SystemJS</li></ul><h2 id="编程风格" tabindex="-1"><a class="header-anchor" href="#编程风格" aria-hidden="true">#</a> 编程风格</h2><h3 id="块级作用域-1" tabindex="-1"><a class="header-anchor" href="#块级作用域-1" aria-hidden="true">#</a> 块级作用域</h3><ul><li>let取代var</li><li>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。</li><li>所有的函数都应该设置为常量。</li></ul><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><ul><li>静态字符串一律使用单引号或反引号，不使用双引号。</li><li>动态字符串使用反引号。</li></ul><h3 id="解构赋值-1" tabindex="-1"><a class="header-anchor" href="#解构赋值-1" aria-hidden="true">#</a> 解构赋值</h3><ul><li>使用数组成员对变量赋值时，优先使用解构赋值。</li><li>函数的参数如果是对象的成员，优先使用解构赋值。</li><li>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</li></ul><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><ul><li>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</li><li>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。</li><li>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。</li><li>对象的属性和方法，尽量采用简洁表达法</li></ul><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><ul><li>使用扩展运算符（...）拷贝数组。</li><li>使用 Array.from 方法，将类似数组的对象转为数组。</li></ul><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><ul><li>立即执行函数可以写成箭头函数的形式。</li><li>那些使用匿名函数当作参数的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。</li><li>箭头函数取代Function.prototype.bind，不应再用 self/_this/that 绑定 this。</li><li>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</li><li>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</li><li>不要在函数体内使用 arguments 变量，使用 rest 运算符（...）代替。</li><li>使用默认值语法设置函数参数的默认值。</li></ul><h3 id="map结构" tabindex="-1"><a class="header-anchor" href="#map结构" aria-hidden="true">#</a> Map结构</h3><ul><li>区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要key: value的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。</li></ul><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><ul><li>用 Class，取代需要 prototype 的操作</li><li>使用extends实现继承</li></ul><h3 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h3><ul><li>Module 语法是 JavaScript 模块的标准写法，使用import取代require。</li><li>使用export取代module.exports。</li><li>export default与普通的export不要同时使用。</li><li>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。</li><li>如果模块默认输出一个函数，函数名的首字母应该小写。</li><li>如果模块默认输出一个对象，对象名的首字母应该大写。</li></ul><h3 id="eslint-的使用" tabindex="-1"><a class="header-anchor" href="#eslint-的使用" aria-hidden="true">#</a> ESLint 的使用</h3><ul><li>安装</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$ npm i <span class="token operator">-</span>g eslint\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>安装 Airbnb 语法规则，以及 import、a11y、react 插件。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$ npm i <span class="token operator">-</span>g eslint<span class="token operator">-</span>config<span class="token operator">-</span>airbnb\n$ npm i <span class="token operator">-</span>g eslint<span class="token operator">-</span>plugin<span class="token operator">-</span><span class="token keyword">import</span> eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>jsx<span class="token operator">-</span>a11y eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>react\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>根目录下新建一个.eslintrc文件，配置 ESLint。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint-config-airbnb&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>即可使用以上规则检查文件</li></ul><h2 id="异步遍历器" tabindex="-1"><a class="header-anchor" href="#异步遍历器" aria-hidden="true">#</a> 异步遍历器</h2><h2 id="arraybuffer" tabindex="-1"><a class="header-anchor" href="#arraybuffer" aria-hidden="true">#</a> ArrayBuffer</h2><ul><li>是 JavaScript 操作二进制数据的一个接口。</li></ul><h2 id="最新提案" tabindex="-1"><a class="header-anchor" href="#最新提案" aria-hidden="true">#</a> 最新提案</h2><h2 id="修饰器" tabindex="-1"><a class="header-anchor" href="#修饰器" aria-hidden="true">#</a> 修饰器</h2><ul><li>Decorator 提案经过了大幅修改，目前还没有定案</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>@testable\n<span class="token keyword">class</span> <span class="token class-name">MyTestableClass</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">testable</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span>isTestable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nMyTestableClass<span class="token punctuation">.</span>isTestable <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>@符号表示是装饰器</li><li>可以修饰类，类中的属性和方法</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sweetCoffee</span><span class="token punctuation">(</span><span class="token parameter">coffee</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token function">coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加糖&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;一杯苦coffee&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">sweetCoffee</span><span class="token punctuation">(</span>coffee<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>@testable\n<span class="token keyword">class</span> <span class="token class-name">MyTestableClass</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">testable</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span>isTestable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nMyTestableClass<span class="token punctuation">.</span>isTestable <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="es5中的类" tabindex="-1"><a class="header-anchor" href="#es5中的类" aria-hidden="true">#</a> es5中的类</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;eat&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 继承的三种方法</span>\n<span class="token comment">// 1.继承实例上的属性</span>\n<span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 2.获取父类的公共属性</span>\n<span class="token operator">-</span> node刚出来的时候\nes5<span class="token operator">:</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">=</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n<span class="token operator">-</span> node6<span class="token punctuation">.</span><span class="token number">0</span>的时候\nes5<span class="token operator">:</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span>constructor<span class="token operator">:</span><span class="token punctuation">{</span>value<span class="token operator">:</span>Cat<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">-</span> es6出来以后\nes6<span class="token operator">:</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> cat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;哺乳类&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>eat<span class="token punctuation">)</span>\n<span class="token comment">// 3.继承父类实例上的所有属性：因为初始化子类不能给父类传参，所以没人用，一般用1+2</span>\n<span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> cat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;哺乳类&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="用es5实现es6class类" tabindex="-1"><a class="header-anchor" href="#用es5实现es6class类" aria-hidden="true">#</a> 用es5实现es6Class类</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token parameter">sub<span class="token punctuation">,</span>constr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sub <span class="token keyword">instanceof</span> <span class="token class-name">constr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot with new &#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token function-variable function">Animal</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">_classCallCheck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>Animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断如果不是通过new返回错误</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">_createClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用Object.defineProperty，因为通过es6类创建的方法是不可看到的</span>\n  <span class="token keyword">return</span> Animal<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">//...没看懂==！</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="第三方模块" tabindex="-1"><a class="header-anchor" href="#第三方模块" aria-hidden="true">#</a> 第三方模块</h2><h3 id="babel" tabindex="-1"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> babel</h3><ul><li>转换es6成es5</li><li>可在命令行中直接转换</li></ul><ol><li>安装babel</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm install @babel<span class="token operator">/</span>cli @babel<span class="token operator">/</span>core<span class="token comment">//babel核心和babelcli</span>\nnpm add @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env<span class="token comment">//babel插件1</span>\nnpm add @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposal<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>properties<span class="token comment">//babel插件2</span>\nnpm add @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposal<span class="token operator">-</span>decorators<span class="token comment">//babel插件3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>新建一个.babelrc文件，运行时会按这个文件的方式来解析</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// .babelrc</span>\n<span class="token punctuation">{</span>\n  <span class="token string">&quot;presets&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n    <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token comment">//这个插件告诉babel按es6到es5编译</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;plugins&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class="token punctuation">,</span><span class="token comment">//这个插件用来转化类上的属性</span>\n      <span class="token punctuation">{</span>\n        <span class="token string">&quot;loose&quot;</span><span class="token operator">:</span><span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">&quot;@babel/plugin-proposal-decorators&quot;</span><span class="token punctuation">,</span><span class="token comment">//这个插件用来识别类装饰器</span>\n      <span class="token punctuation">{</span>\n        <span class="token string">&quot;legacy&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ol start="3"><li>解析</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">1</span>\n  <span class="token punctuation">}</span><span class="token comment">//简写成如下写法</span>\n  a<span class="token operator">=</span><span class="token number">1</span><span class="token comment">//高级写法，可用babel解析识别</span>\n  <span class="token keyword">static</span> <span class="token constant">PI</span><span class="token operator">=</span><span class="token number">3.14</span><span class="token comment">//es6不支持静态属性，可用babel解析识别</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>a<span class="token punctuation">)</span>\n命令：babel <span class="token number">6.</span>class<span class="token punctuation">.</span>js <span class="token operator">-</span>o <span class="token keyword">new</span><span class="token punctuation">.</span>jss\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="moment" tabindex="-1"><a class="header-anchor" href="#moment" aria-hidden="true">#</a> moment</h3><ul><li>时间的插件(12345676543245 YYYY-MM-DD) <ul><li>可以算相对时间 多语言</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>yarn add moment\n<span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span>\nmoment<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">&#39;zh-cn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">moment</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取&#39;YYYY-MM-DD HH:mm:ss&#39;格式的时间</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><h3 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数" aria-hidden="true">#</a> 高阶函数</h3><ul><li>定义 <ul><li>函数的参数或者返回值是一个函数</li></ul></li></ul><h3 id="aop-aspect-oriented-programming-面向切片编程-装饰器" tabindex="-1"><a class="header-anchor" href="#aop-aspect-oriented-programming-面向切片编程-装饰器" aria-hidden="true">#</a> aop Aspect Oriented Programming 面向切片编程 装饰器@</h3><ul><li>就是高阶函数</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">before</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">that</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nfn<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;old~~~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> newFn<span class="token operator">=</span>fn<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;new~~~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="lodash-after函数" tabindex="-1"><a class="header-anchor" href="#lodash-after函数" aria-hidden="true">#</a> lodash after函数</h3><h3 id="发布订阅" tabindex="-1"><a class="header-anchor" href="#发布订阅" aria-hidden="true">#</a> 发布订阅</h3><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a> 观察者模式</h3><h3 id="promise应用" tabindex="-1"><a class="header-anchor" href="#promise应用" aria-hidden="true">#</a> promise应用</h3><h3 id="手写promise-a-规范" tabindex="-1"><a class="header-anchor" href="#手写promise-a-规范" aria-hidden="true">#</a> 手写promise a+ 规范</h3><ul><li>p.catch</li><li>p.finally</li><li>Promise.resolve,Promise.reject</li><li>Promise.deferred</li><li>Promise.all,Promise.race</li></ul><h3 id="generator-co" tabindex="-1"><a class="header-anchor" href="#generator-co" aria-hidden="true">#</a> generator + co</h3><h3 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> async+await</h3><h3 id="最终案例" tabindex="-1"><a class="header-anchor" href="#最终案例" aria-hidden="true">#</a> 最终案例</h3>',248),Ja={render:function(n,s){const a=(0,p.up)("RouterLink"),Ja=(0,p.up)("mark-check"),Ga=(0,p.up)("highlight-box"),Ra=(0,p.up)("underline-box"),Ta=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("nav",e,[(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#let和const"},{default:(0,p.w5)((()=>[l])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#let"},{default:(0,p.w5)((()=>[o])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#块级作用域"},{default:(0,p.w5)((()=>[c])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#const"},{default:(0,p.w5)((()=>[u])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#es6声明变量的六种方法"},{default:(0,p.w5)((()=>[i])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#顶层对象的属性"},{default:(0,p.w5)((()=>[r])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#globalthis对象"},{default:(0,p.w5)((()=>[k])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#解构赋值-deconstruction"},{default:(0,p.w5)((()=>[b])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#定义"},{default:(0,p.w5)((()=>[d])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#规则"},{default:(0,p.w5)((()=>[m])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#本质"},{default:(0,p.w5)((()=>[h])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#默认值"},{default:(0,p.w5)((()=>[g])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#对象的解构赋值"},{default:(0,p.w5)((()=>[f])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#注意点"},{default:(0,p.w5)((()=>[v])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#字符串的解构赋值"},{default:(0,p.w5)((()=>[y])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#数值和布尔值的解构赋值"},{default:(0,p.w5)((()=>[w])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#函数参数的解构赋值"},{default:(0,p.w5)((()=>[x])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#圆括号问题"},{default:(0,p.w5)((()=>[j])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#用途"},{default:(0,p.w5)((()=>[_])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#字符串的扩展"},{default:(0,p.w5)((()=>[S])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#字符的-unicode-表示法"},{default:(0,p.w5)((()=>[U])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#直接输入u-2028和u-2029"},{default:(0,p.w5)((()=>[P])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#json-stringify-的改造"},{default:(0,p.w5)((()=>[W])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#模板字符串"},{default:(0,p.w5)((()=>[q])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#标签模板"},{default:(0,p.w5)((()=>[O])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#字符串的新增方法"},{default:(0,p.w5)((()=>[E])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#正则的扩展"},{default:(0,p.w5)((()=>[M])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#数值的扩展"},{default:(0,p.w5)((()=>[C])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#函数的扩展"},{default:(0,p.w5)((()=>[I])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#数组的扩展"},{default:(0,p.w5)((()=>[A])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#对象的扩展"},{default:(0,p.w5)((()=>[N])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#属性"},{default:(0,p.w5)((()=>[J])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#super-关键字"},{default:(0,p.w5)((()=>[G])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#扩展运算符-对象-es2018"},{default:(0,p.w5)((()=>[R])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#对象的新增方法"},{default:(0,p.w5)((()=>[T])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#symbol"},{default:(0,p.w5)((()=>[F])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#引入原因"},{default:(0,p.w5)((()=>[D])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#概念"},{default:(0,p.w5)((()=>[z])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#参数"},{default:(0,p.w5)((()=>[H])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#值"},{default:(0,p.w5)((()=>[K])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#symbol-api"},{default:(0,p.w5)((()=>[$])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#作为对象属性名"},{default:(0,p.w5)((()=>[B])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#作为常量"},{default:(0,p.w5)((()=>[Y])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#set-和-map-数据结构"},{default:(0,p.w5)((()=>[L])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#set"},{default:(0,p.w5)((()=>[V])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#weakset"},{default:(0,p.w5)((()=>[X])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#map"},{default:(0,p.w5)((()=>[Z])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#weakmap"},{default:(0,p.w5)((()=>[Q])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#proxy"},{default:(0,p.w5)((()=>[nn])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#概述"},{default:(0,p.w5)((()=>[sn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#参数-3"},{default:(0,p.w5)((()=>[an])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#注意"},{default:(0,p.w5)((()=>[pn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#操作方法"},{default:(0,p.w5)((()=>[tn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#proxy-revocable"},{default:(0,p.w5)((()=>[en])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#用途-2"},{default:(0,p.w5)((()=>[ln])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#reflect"},{default:(0,p.w5)((()=>[on])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#概念-3"},{default:(0,p.w5)((()=>[cn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#静态方法-大部分与object对象的同名方法的作用相同-而且它与proxy对象的方法是一一对应的。"},{default:(0,p.w5)((()=>[un])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#使用-proxy-实现观察者模式"},{default:(0,p.w5)((()=>[rn])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#promise对象"},{default:(0,p.w5)((()=>[kn])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#概念-4"},{default:(0,p.w5)((()=>[bn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#参数-4"},{default:(0,p.w5)((()=>[dn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#实例方法-1"},{default:(0,p.w5)((()=>[mn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#promise实现一个ajax操作"},{default:(0,p.w5)((()=>[hn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#promise高级用法"},{default:(0,p.w5)((()=>[gn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#promise-a-规范"},{default:(0,p.w5)((()=>[fn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#应用"},{default:(0,p.w5)((()=>[vn])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#iterator和for-of循环"},{default:(0,p.w5)((()=>[yn])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#概念-5"},{default:(0,p.w5)((()=>[wn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#iterator接口"},{default:(0,p.w5)((()=>[xn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#具备iterator接口的数据结构"},{default:(0,p.w5)((()=>[jn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#调用iterator接口的场合"},{default:(0,p.w5)((()=>[_n])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#遍历器对象部署的方法"},{default:(0,p.w5)((()=>[Sn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#for-of循环"},{default:(0,p.w5)((()=>[Un])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#generator-函数的语法"},{default:(0,p.w5)((()=>[Pn])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#概念-6"},{default:(0,p.w5)((()=>[Wn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#next-方法"},{default:(0,p.w5)((()=>[qn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#构造函数"},{default:(0,p.w5)((()=>[On])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#generator函数里执行generator函数。"},{default:(0,p.w5)((()=>[En])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#作为对象属性"},{default:(0,p.w5)((()=>[Mn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#作为状态机"},{default:(0,p.w5)((()=>[Cn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#应用-可以暂停函数执行-返回任意表达式的值。"},{default:(0,p.w5)((()=>[In])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#generator-函数的异步应用"},{default:(0,p.w5)((()=>[An])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#es5的异步处理方法"},{default:(0,p.w5)((()=>[Nn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#传统异步编程的解决方案-多任务的解决方案-协程"},{default:(0,p.w5)((()=>[Jn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#协程在es6中的实现-generator-函数"},{default:(0,p.w5)((()=>[Gn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#co模块"},{default:(0,p.w5)((()=>[Rn])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#async函数"},{default:(0,p.w5)((()=>[Tn])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#是-generator-函数的语法糖。"},{default:(0,p.w5)((()=>[Fn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#基本用法"},{default:(0,p.w5)((()=>[Dn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#await命令"},{default:(0,p.w5)((()=>[zn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#async函数实现原理"},{default:(0,p.w5)((()=>[Hn])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#扩展运算符-1"},{default:(0,p.w5)((()=>[Kn])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#用于对象的展开-es7"},{default:(0,p.w5)((()=>[$n])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#用于数组的展开"},{default:(0,p.w5)((()=>[Bn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#用于剩余运算符"},{default:(0,p.w5)((()=>[Yn])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#class-的基本语法"},{default:(0,p.w5)((()=>[Ln])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#简介"},{default:(0,p.w5)((()=>[Vn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#静态方法-不会被实例继承-而是直接通过类来调用"},{default:(0,p.w5)((()=>[Xn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#静态属性"},{default:(0,p.w5)((()=>[Zn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#实例属性"},{default:(0,p.w5)((()=>[Qn])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#私有方法和私有属性"},{default:(0,p.w5)((()=>[ns])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#new-target-属性"},{default:(0,p.w5)((()=>[ss])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#class-的继承"},{default:(0,p.w5)((()=>[as])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#简介-1"},{default:(0,p.w5)((()=>[ps])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#获取父类"},{default:(0,p.w5)((()=>[ts])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#super-关键字-1"},{default:(0,p.w5)((()=>[es])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#类的-prototype-属性和-proto-属性"},{default:(0,p.w5)((()=>[ls])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#原生构造函数-js内置构造函数-的继承"},{default:(0,p.w5)((()=>[os])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#mixin模式的实现"},{default:(0,p.w5)((()=>[cs])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#module的语法"},{default:(0,p.w5)((()=>[us])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#概述-1"},{default:(0,p.w5)((()=>[is])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#export命令"},{default:(0,p.w5)((()=>[rs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#import命令"},{default:(0,p.w5)((()=>[ks])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#模块的整体加载"},{default:(0,p.w5)((()=>[bs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#export-default命令"},{default:(0,p.w5)((()=>[ds])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#export-与-import-的复合写法"},{default:(0,p.w5)((()=>[ms])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#import"},{default:(0,p.w5)((()=>[hs])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#module的加载实现"},{default:(0,p.w5)((()=>[gs])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#浏览器加载"},{default:(0,p.w5)((()=>[fs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#es6-模块与-commonjs-模块的差异"},{default:(0,p.w5)((()=>[vs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#node加载"},{default:(0,p.w5)((()=>[ys])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#es6-模块的转码"},{default:(0,p.w5)((()=>[ws])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#编程风格"},{default:(0,p.w5)((()=>[xs])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#块级作用域-1"},{default:(0,p.w5)((()=>[js])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#字符串"},{default:(0,p.w5)((()=>[_s])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#解构赋值-1"},{default:(0,p.w5)((()=>[Ss])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#对象"},{default:(0,p.w5)((()=>[Us])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#数组"},{default:(0,p.w5)((()=>[Ps])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#函数"},{default:(0,p.w5)((()=>[Ws])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#map结构"},{default:(0,p.w5)((()=>[qs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#class"},{default:(0,p.w5)((()=>[Os])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#模块"},{default:(0,p.w5)((()=>[Es])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#eslint-的使用"},{default:(0,p.w5)((()=>[Ms])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#异步遍历器"},{default:(0,p.w5)((()=>[Cs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#arraybuffer"},{default:(0,p.w5)((()=>[Is])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#最新提案"},{default:(0,p.w5)((()=>[As])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#修饰器"},{default:(0,p.w5)((()=>[Ns])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#es5中的类"},{default:(0,p.w5)((()=>[Js])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#用es5实现es6class类"},{default:(0,p.w5)((()=>[Gs])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#第三方模块"},{default:(0,p.w5)((()=>[Rs])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#babel"},{default:(0,p.w5)((()=>[Ts])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#moment"},{default:(0,p.w5)((()=>[Fs])),_:1})])])]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#promise"},{default:(0,p.w5)((()=>[Ds])),_:1}),(0,p._)("ul",null,[(0,p._)("li",null,[(0,p.Wm)(a,{to:"#高阶函数"},{default:(0,p.w5)((()=>[zs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#aop-aspect-oriented-programming-面向切片编程-装饰器"},{default:(0,p.w5)((()=>[Hs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#lodash-after函数"},{default:(0,p.w5)((()=>[Ks])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#发布订阅"},{default:(0,p.w5)((()=>[$s])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#观察者模式"},{default:(0,p.w5)((()=>[Bs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#promise应用"},{default:(0,p.w5)((()=>[Ys])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#手写promise-a-规范"},{default:(0,p.w5)((()=>[Ls])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#generator-co"},{default:(0,p.w5)((()=>[Vs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#async-await"},{default:(0,p.w5)((()=>[Xs])),_:1})]),(0,p._)("li",null,[(0,p.Wm)(a,{to:"#最终案例"},{default:(0,p.w5)((()=>[Zs])),_:1})])])])])]),Qs,(0,p._)("ul",null,[na,(0,p._)("li",null,[sa,(0,p.Wm)(Ja,{id:"promisestatus"}),aa,(0,p.Wm)(Ga,null,{default:(0,p.w5)((()=>[pa])),_:1}),ta,(0,p.Wm)(Ra,null,{default:(0,p.w5)((()=>[ea])),_:1}),la,(0,p.Wm)(Ra,null,{default:(0,p.w5)((()=>[oa])),_:1}),ca,(0,p.Wm)(Ra,null,{default:(0,p.w5)((()=>[ua])),_:1}),ia,(0,p.Wm)(Ga,null,{default:(0,p.w5)((()=>[ra])),_:1}),ka])]),ba,da,(0,p.Wm)(Ja,{id:"promise"}),ma,(0,p.Wm)(Ja,{id:"promisereject"}),ha,(0,p.Wm)(Ga,null,{default:(0,p.w5)((()=>[ga])),_:1}),fa,(0,p.Wm)(Ja,{id:"promiseall"}),va,(0,p.Wm)(Ga,null,{default:(0,p.w5)((()=>[ya])),_:1}),wa,(0,p.Wm)(Ja,{id:"promisethen"}),xa,(0,p.Wm)(Ga,null,{default:(0,p.w5)((()=>[ja])),_:1}),_a,(0,p.Wm)(Ja,{id:"promisecatch"}),Sa,(0,p.Wm)(Ga,null,{default:(0,p.w5)((()=>[Ua])),_:1}),Pa,(0,p.Wm)(Ra,null,{default:(0,p.w5)((()=>[Wa])),_:1}),qa,(0,p.Wm)(Ja,{id:"promisefinally"}),Oa,(0,p.Wm)(Ga,null,{default:(0,p.w5)((()=>[Ea])),_:1}),Ma,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("a",Ca,[Ia,(0,p.Wm)(Ta)])]),Aa]),Na],64)}}}}]);