"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6861],{933:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7911364c",path:"/frontend/js/jsbasic/",title:"JS基础",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"变量",slug:"变量",children:[{level:3,title:"类型",slug:"类型",children:[]},{level:3,title:"显示类型转换",slug:"显示类型转换",children:[]},{level:3,title:"隐式类型转换",slug:"隐式类型转换",children:[]},{level:3,title:"二进制和八进制表示法[ES6]",slug:"二进制和八进制表示法-es6",children:[]},{level:3,title:"Number API[ES6,全局方法移到了Number对象上]",slug:"number-api-es6-全局方法移到了number对象上",children:[]},{level:3,title:"Math对象",slug:"math对象",children:[]},{level:3,title:"运算符",slug:"运算符",children:[]},{level:3,title:"JSON",slug:"json",children:[]}]},{level:2,title:"原型和原型链",slug:"原型和原型链",children:[{level:3,title:"构造函数",slug:"构造函数",children:[]},{level:3,title:"原型",slug:"原型",children:[]},{level:3,title:"原型链",slug:"原型链",children:[]},{level:3,title:"原型链继承",slug:"原型链继承",children:[]},{level:3,title:"zepto（或其他框架） 源码中如何使用原型链",slug:"zepto-或其他框架-源码中如何使用原型链",children:[]}]},{level:2,title:"作用域和闭包",slug:"作用域和闭包",children:[{level:3,title:"变量提升",slug:"变量提升",children:[]},{level:3,title:"this",slug:"this",children:[]},{level:3,title:"作用域链",slug:"作用域链",children:[]},{level:3,title:"闭包",slug:"闭包",children:[]}]},{level:2,title:"异步",slug:"异步",children:[{level:3,title:"什么是异步",slug:"什么是异步",children:[]},{level:3,title:"异步的实现机制，以及对单线程的理解",slug:"异步的实现机制-以及对单线程的理解",children:[]},{level:3,title:"异步的问题和解决方案",slug:"异步的问题和解决方案",children:[]},{level:3,title:"同步和异步的区别",slug:"同步和异步的区别",children:[]},{level:3,title:"关于setTimeout的笔试题",slug:"关于settimeout的笔试题",children:[]},{level:3,title:"前端使用异步的场景",slug:"前端使用异步的场景",children:[]}]},{level:2,title:"内置对象-正则表达式",slug:"内置对象-正则表达式",children:[{level:3,title:"正则对象",slug:"正则对象",children:[]},{level:3,title:"正则api:",slug:"正则api",children:[]},{level:3,title:"字符串的正则方法",slug:"字符串的正则方法",children:[]},{level:3,title:"规则",slug:"规则",children:[]},{level:3,title:"字符类",slug:"字符类",children:[]},{level:3,title:"量词",slug:"量词",children:[]},{level:3,title:"捕获组",slug:"捕获组",children:[]}]},{level:2,title:"内置对象-数组常用 API",slug:"内置对象-数组常用-api",children:[{level:3,title:"数组自带方法",slug:"数组自带方法",children:[]},{level:3,title:"扩展运算符（数组）[ES6]",slug:"扩展运算符-数组-es6",children:[]},{level:3,title:"将空位转为undefined[ES6]",slug:"将空位转为undefined-es6",children:[]},{level:3,title:"查找",slug:"查找",children:[]},{level:3,title:"匹配",slug:"匹配",children:[]}]},{level:2,title:"内置对象-对象常用 API",slug:"内置对象-对象常用-api",children:[{level:3,title:"属性",slug:"属性",children:[]},{level:3,title:"Object 实例的方法",slug:"object-实例的方法",children:[]}]},{level:2,title:"内置对象-Function API",slug:"内置对象-function-api",children:[{level:3,title:"函数参数的默认值[ES6]",slug:"函数参数的默认值-es6",children:[]},{level:3,title:"rest 参数[ES6]",slug:"rest-参数-es6",children:[]},{level:3,title:"函数内严格模式",slug:"函数内严格模式",children:[]},{level:3,title:"函数的name属性",slug:"函数的name属性",children:[]},{level:3,title:"箭头函数",slug:"箭头函数",children:[]},{level:3,title:"尾调用优化",slug:"尾调用优化",children:[]},{level:3,title:"函数参数的尾逗号",slug:"函数参数的尾逗号",children:[]},{level:3,title:"delete 操作符",slug:"delete-操作符",children:[]}]},{level:2,title:"面试题",slug:"面试题",children:[{level:3,title:"setTimeout设置为0有什么作用？",slug:"settimeout设置为0有什么作用",children:[]}]}],filePathRelative:"frontend/js/jsbasic/README.md",git:{updatedTime:1630231675e3,contributors:[]}}},4589:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Sa});var t=a(6252);const p=(0,t._)("h1",{id:"js基础",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#js基础","aria-hidden":"true"},"#"),(0,t.Uk)(" JS基础")],-1),e={class:"table-of-contents"},l=(0,t.Uk)("变量"),o=(0,t.Uk)("类型"),c=(0,t.Uk)("显示类型转换"),u=(0,t.Uk)("隐式类型转换"),i=(0,t.Uk)("二进制和八进制表示法[ES6]"),r=(0,t.Uk)("Number API[ES6,全局方法移到了Number对象上]"),k=(0,t.Uk)("Math对象"),d=(0,t.Uk)("运算符"),b=(0,t.Uk)("JSON"),m=(0,t.Uk)("原型和原型链"),g=(0,t.Uk)("构造函数"),f=(0,t.Uk)("原型"),h=(0,t.Uk)("原型链"),v=(0,t.Uk)("原型链继承"),y=(0,t.Uk)("zepto（或其他框架） 源码中如何使用原型链"),x=(0,t.Uk)("作用域和闭包"),w=(0,t.Uk)("变量提升"),j=(0,t.Uk)("this"),_=(0,t.Uk)("作用域链"),E=(0,t.Uk)("闭包"),U=(0,t.Uk)("异步"),W=(0,t.Uk)("什么是异步"),N=(0,t.Uk)("异步的实现机制，以及对单线程的理解"),O=(0,t.Uk)("异步的问题和解决方案"),S=(0,t.Uk)("同步和异步的区别"),A=(0,t.Uk)("关于setTimeout的笔试题"),P=(0,t.Uk)("前端使用异步的场景"),q=(0,t.Uk)("内置对象-正则表达式"),C=(0,t.Uk)("正则对象"),z=(0,t.Uk)("正则api:"),I=(0,t.Uk)("字符串的正则方法"),F=(0,t.Uk)("规则"),M=(0,t.Uk)("字符类"),T=(0,t.Uk)("量词"),D=(0,t.Uk)("捕获组"),R=(0,t.Uk)("内置对象-数组常用 API"),$=(0,t.Uk)("数组自带方法"),J=(0,t.Uk)("扩展运算符（数组）[ES6]"),B=(0,t.Uk)("将空位转为undefined[ES6]"),L=(0,t.Uk)("查找"),Y=(0,t.Uk)("匹配"),X=(0,t.Uk)("内置对象-对象常用 API"),V=(0,t.Uk)("属性"),H=(0,t.Uk)("Object 实例的方法"),Z=(0,t.Uk)("内置对象-Function API"),G=(0,t.Uk)("函数参数的默认值[ES6]"),Q=(0,t.Uk)("rest 参数[ES6]"),K=(0,t.Uk)("函数内严格模式"),nn=(0,t.Uk)("函数的name属性"),sn=(0,t.Uk)("箭头函数"),an=(0,t.Uk)("尾调用优化"),tn=(0,t.Uk)("函数参数的尾逗号"),pn=(0,t.Uk)("delete 操作符"),en=(0,t.Uk)("面试题"),ln=(0,t.Uk)("setTimeout设置为0有什么作用？"),on=(0,t._)("h2",{id:"变量",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#变量","aria-hidden":"true"},"#"),(0,t.Uk)(" 变量")],-1),cn=(0,t._)("h3",{id:"类型",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#类型","aria-hidden":"true"},"#"),(0,t.Uk)(" 类型")],-1),un=(0,t.Uk)(" - 值类型：string,boolean,number,undefined "),rn=(0,t.Uk)(" - 引用类型：object(date,RegExp),array,function,null（引用类型可以自由设置属性，除了null） "),kn=(0,t.uE)(' - `typeof`可以区分类型有`number` `string` `boolean` `undefined`（值类型） `function` `object`（引用类型） <ul><li><p>js内置函数（数据封装类对象）</p><ul><li><code>Object</code> <code>Array</code> <code>Boolean</code> <code>Number</code> <code>String</code> <code>Function</code> <code>Date</code> <code>RegExp</code> <code>Error</code></li></ul></li><li><p><code>===</code>和<code>==</code></p><ul><li><code>==</code>会先试图类型转换，然后再比较，<code>===</code>不会类型转换</li><li>必须用<code>===</code>。</li><li>唯一用<code>==</code>的地方：obj.a === null || obj.a === undefined ，简写形式obj.a == null</li></ul></li></ul><h3 id="显示类型转换" tabindex="-1"><a class="header-anchor" href="#显示类型转换" aria-hidden="true">#</a> 显示类型转换</h3>',3),dn=(0,t.uE)("<p>Number函数</p><ul><li><strong>字符串</strong>： <ul><li>可解析数值:相应的数值</li><li>不可解析数值:NaN</li><li>空字符串:0</li></ul></li><li><strong>布尔值</strong>： <ul><li>true:1</li><li>false:0</li></ul></li><li><strong>undefined</strong>：NaN</li><li><strong>null</strong>：0</li></ul>",2),bn=(0,t.Uk)(" - **对象**： - 对象在转换类型的时候，会调用内置的 [[ToPrimitive]] 函数，对于该函数来说，算法逻辑一般来说如下： 1. 调用valueOf() 2. 调用toString() 3. 报错 ```js let obj={ [Symbol.toPrimitive](){ return 500 }, valueOf(){ return {}// 是原始数据类型，就返回结果 }, toString(){ return 200 } } console.log(true+obj);//从上往下依次调用 ``` "),mn=(0,t._)("li",null,[(0,t._)("p",null,"Number等同于一元正号(+)")],-1),gn=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//相当于 Number({})==&gt;NaN</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),fn=(0,t.Uk)("String函数 "),hn=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("strong",null,"基本类型"),(0,t.Uk)("：转成对应的字符串")])],-1),vn=(0,t.Uk)(" - **对象**： 1. 调用toString() 2. 调用valueOf() 3. 报错 "),yn=(0,t.uE)("<li>Boolean函数 <ul><li><code>undefined</code> <code>null</code> <code>0</code> <code>NaN</code> <code>空字符串</code>:false</li><li>其他:true</li></ul></li>",1),xn=(0,t.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><code>obj</code> <code>arr</code> <code>func</code> <code>的valueOf()</code>: <code>obj</code> <code>arr</code> <code>func</code></li><li><code>obj.toString()</code>:<code>&quot;[object Object]&quot;</code></li><li><code>arr.toString()</code>:<code>arr.join(&#39;,&#39;)</code></li><li><code>func.toString()</code>:<code>函数中包含的代码转为字符串的值</code></li></ul></div><h3 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换" aria-hidden="true">#</a> 隐式类型转换</h3>',2),wn=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Uk)("四则运算 "),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("strong",null,"+"),(0,t.Uk)("：只要其中一个是String类型，表达式的值转为String。若无字符串，表达式便转为Number类型")]),(0,t._)("li",null,[(0,t._)("strong",null,"其余"),(0,t.Uk)("：只要其中一个是Number类型，表达式的值便转为Number。")]),(0,t._)("li",null,[(0,t._)("strong",null,"非法字符"),(0,t.Uk)("：对于非法字符的情况通常会返回NaN")])])])],-1),jn=(0,t.uE)('<ol><li>加号操作</li></ol><ul><li>通过加号运算符进行运算 <ul><li>字符串与加号运算符组成字符串连接操作</li><li>非字符串与加号运算符组成算术运算操作（需要将对应项转换成Number类型后进行操作）</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">NaN</span>\n<span class="token number">1</span>\n<span class="token number">2</span>\n<span class="token string">&#39;hello123&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>字符串间的比较</li></ol><ul><li>字符串的比较是从左到右按位进行，将对应位的字符转换成ASCII码的值进行大小比较。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;abe&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token comment">// 等同于</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 49</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 50</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 49 &gt; 50 </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token boolean">false</span>\n<span class="token boolean">false</span>\n<span class="token boolean">false</span>\n<span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>引用类型之间的比较</li></ol><ul><li>调用valueOf()进行比较 <ul><li>返回值是基本类型 <ul><li>转换成number类型进行比较</li></ul></li><li>返回值不是基本类型 <ul><li>返回值的引用地址是一致：相等</li><li>返回值的引用地址是不一致：不相等</li></ul></li></ul></li></ul>',11),_n=(0,t.Uk)("[] == ![]//true,先布尔转换，再number转换两边都为0"),En=(0,t.uE)(' ```js console.log([] == []) console.log([] == ![]) console.log({} == {}) ``` ```js console.log([] == ![]) // 为什么[] == ![]会为true呢？ // 等同于 //第一步![]转成Boolean类型 console.log([] == !Boolean([])) // [] == false // 第二步转成Number类型再进行关系运算 console.log(Number([]) == Number(false)) // 0 == 0 ``` ```js false true false ``` <ol start="4"><li>逻辑非以及其关系运算</li></ol><ul><li>在JavaScript中逻辑非会调用Boolean转换，但是在关系运算过程中会将值转换成Number类型再进行比较。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 布尔值判断</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">123</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>\n<span class="token comment">// 关系运算</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 布尔值判断</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token comment">// 关系运算</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="5"><li>浮点数相加</li></ol><ul><li>这是一个浮点数计算精度问题，在JavaScript中只有一个数字类型number，而number使用的是IEEE 754双精度浮点格式。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment">// 结果是 0.30000000000000004，而不是 0.3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="6"><li>特殊情况</li></ol><ul><li>主要是考查对JavaScript中原始值的理解。 <ul><li>null特指对象的值未设置</li><li>undefined指一个原始值自动分配给刚刚声明的变量或没有实际参数的形式参数</li><li>NaN是（Not a Number）的缩写，当一个值不能被Number转换时返回NaN,NaN不等于任何值</li><li>0是原始值为0的数字</li><li>&#39;&#39;是原始值为空的字符串</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">*</span> <span class="token string">&#39;a&#39;</span>     <span class="token comment">// =&gt; NaN</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>判断语句 <ul><li>转换规则同Boolean的构造函数。</li></ul></li><li>Native调用 <ul><li>比如console.log、alert调用自动转为字符串类型</li></ul></li></ul><h4 id="常见题目" tabindex="-1"><a class="header-anchor" href="#常见题目" aria-hidden="true">#</a> 常见题目</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token comment">// &quot;&quot;</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// [object Object]</span>\n<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token comment">// [object Object]</span>\n<span class="token comment">// 所有浏览器都认为{}是区块语句，计算+[]，得出0</span>\n<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// [object Object][object Object]</span>\n<span class="token comment">// 谷歌浏览器是正常结果，火狐会把第一个{}当做区块语句，计算+{}，得出NaN</span>\n<span class="token boolean">true</span><span class="token operator">+</span><span class="token boolean">true</span>\n<span class="token comment">// 2</span>\n<span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>\n<span class="token comment">// 1[object Object]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="和" tabindex="-1"><a class="header-anchor" href="#和" aria-hidden="true">#</a> == 和 ===</h4><ul><li>== <ul><li>两边值类型相同时，等同于===；</li><li>两边类型不同的时候，先进行类型转换，再比较。</li></ul></li><li>=== <ul><li>不做类型转换，类型不同的一定不等。</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">===</p><ul><li>类型不同:[不相等]</li><li>数值， <ul><li>没有NaN:相等</li><li>有一个是NaN:不相等</li></ul></li><li>字符串，每个位置的字符都一样，那么[相等]</li><li>都是true或者false:相等</li><li>都是null或者undefined:相等</li><li>引用类型比较，进行“指针地址”比较，(都引用同一个对象或函数:[相等])</li></ul></div><div class="custom-container tip"><p class="custom-container-title">==</p><ul><li>如果两个值类型相同，和 === 一样</li><li>如果两个值类型不同，转换成number再比较</li><li>null和undefined比较相等，null和undefined和其他如空字符串，false，0比较，都不等。</li><li>字符串和数值比较，把字符串转换成数值再进行比较。</li><li>任一是布尔值转成0/1再比较</li><li>对象和基本类型比较，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。</li></ul></div><h3 id="二进制和八进制表示法-es6" tabindex="-1"><a class="header-anchor" href="#二进制和八进制表示法-es6" aria-hidden="true">#</a> 二进制和八进制表示法[ES6]</h3><ul><li>用前缀0b（或0B）和0o（或0O）表示。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">0b111110111</span> <span class="token operator">===</span> <span class="token number">503</span> <span class="token comment">// true</span>\n<span class="token number">0o767</span> <span class="token operator">===</span> <span class="token number">503</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="number-api-es6-全局方法移到了number对象上" tabindex="-1"><a class="header-anchor" href="#number-api-es6-全局方法移到了number对象上" aria-hidden="true">#</a> Number API[ES6,全局方法移到了Number对象上]</h3><ul><li>Number.toString(radix) <ul><li>将数字转为其它进制</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">其它进制转为十进制</p><p>parseInt(&quot;11&quot;,2)</p></div><div class="custom-container tip"><p class="custom-container-title">二进制计算方法</p><p>任意几个加起来的和是十进制的数字即可。没用到的用0补位。</p><ul><li>3：2+1 11</li><li>4：4 100</li><li>7：4+2+1 111</li></ul></div><ul><li>Number.isFinite() <ul><li>检查一个数值是否为有限的（finite）</li></ul></li><li>Number.isNaN() <ul><li>检查一个值是否为NaN</li></ul></li><li>Number.parseInt()</li><li>Number.parseFloat()</li><li>Number.isInteger() <ul><li>判断一个数值是否为整数。</li><li>不是数值，返回false</li><li>25 和 25.0 被视为同一个值</li><li>数据精度的要求较高，不建议使用</li></ul></li><li>Number.EPSILON <ul><li>表示一个极小的常量（是 JavaScript 能够表示的最小精度）</li></ul></li><li>Number.isSafeInteger() <ul><li>判断一个整数是否落在这个范围之内。</li><li>Number.MAX_SAFE_INTEGER（范围上限）</li><li>Number.MIN_SAFE_INTEGER（范围下限）</li></ul></li><li>Number.prototype.toFixed(digits) <ul><li>保存到小数点后第几位</li></ul></li></ul><h3 id="math对象" tabindex="-1"><a class="header-anchor" href="#math对象" aria-hidden="true">#</a> Math对象</h3><table><thead><tr><th style="text-align:left;">功能</th><th style="text-align:right;">API</th></tr></thead><tbody><tr><td style="text-align:left;">random()</td><td style="text-align:right;">[0,1)</td></tr><tr><td style="text-align:left;">ceil(x)</td><td style="text-align:right;">向上取整</td></tr><tr><td style="text-align:left;">floor(x)</td><td style="text-align:right;">向下取整</td></tr><tr><td style="text-align:left;">round(x)</td><td style="text-align:right;">四舍五入</td></tr><tr><td style="text-align:left;">abs(x)</td><td style="text-align:right;">绝对值</td></tr><tr><td style="text-align:left;">max(x,y,z,...n)</td><td style="text-align:right;">求最大值</td></tr><tr><td style="text-align:left;">min(x,y,z...n)</td><td style="text-align:right;">求最小值</td></tr></tbody></table><ul><li><p>Math.random()</p><ul><li>常用于清除浏览器缓存，频繁访问一个链接，就在链接后加一个random()</li></ul></li><li><p>Math.pow(x,y)</p><ul><li>返回 x 的 y 次幂。 以下ES6新增：</li></ul></li><li><p>Math.trunc()</p><ul><li>去除一个数的小数部分，返回整数部分</li><li>非数值，内部Number方法将其先转为数值。</li><li>空值和无法截取整数的值，返回NaN</li></ul></li><li><p>Math.sign()</p><ul><li>判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</li><li>参数为正数，返回+1；</li><li>参数为负数，返回-1；</li><li>参数为 0，返回0；</li><li>参数为-0，返回-0;</li><li>其他值，返回NaN。</li></ul></li><li><p>Math.cbrt()</p><ul><li>计算一个数的立方根</li><li>内部也是先使用Number方法将其转为数值</li></ul></li><li><p>Math.fround()</p><ul><li>返回一个数的32位单精度浮点数形式。</li></ul></li><li><p>Math.hypot()</p><ul><li>返回所有参数的平方和的平方根。</li></ul></li><li><p>对数方法</p></li><li><p>双曲函数方法</p></li><li><p>指数运算符（**）</p><ul><li>右结合，多个指数运算符连用时，是从最右边开始计算的。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 相当于 2 ** (3 ** 2)</span>\n<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span>\n<span class="token comment">// 512</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3>',31),Un={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"},Wn=(0,t.Uk)("优先级"),Nn=(0,t._)("ul",null,[(0,t._)("li",null,"new带参数比new无参数优先级高")],-1),On=(0,t._)("li",null,"求余%",-1),Sn=(0,t._)("li",null,"按位操作符",-1),An=(0,t._)("thead",null,[(0,t._)("tr",null,[(0,t._)("th",null,"运算符"),(0,t._)("th",null,"用法"),(0,t._)("th",null,"描述")])],-1),Pn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND",target:"_blank",rel:"noopener noreferrer"},qn=(0,t.Uk)("按位与（ AND）"),Cn=(0,t._)("td",null,[(0,t._)("code",null,"a & b")],-1),zn=(0,t._)("td",null,"对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。",-1),In={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR",target:"_blank",rel:"noopener noreferrer"},Fn=(0,t.Uk)("按位或（OR）"),Mn=(0,t._)("td",null,"`a",-1),Tn=(0,t._)("td",null,"b`",-1),Dn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR",target:"_blank",rel:"noopener noreferrer"},Rn=(0,t.Uk)("按位异或（XOR）"),$n=(0,t._)("td",null,[(0,t._)("code",null,"a ^ b")],-1),Jn=(0,t._)("td",null,"对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。",-1),Bn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT",target:"_blank",rel:"noopener noreferrer"},Ln=(0,t.Uk)("按位非（NOT）"),Yn=(0,t._)("td",null,[(0,t._)("code",null,"~ a")],-1),Xn=(0,t._)("td",null,"反转操作数的比特位，即0变成1，1变成0。",-1),Vn=(0,t.uE)('<h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h3><ul><li><code>parse</code>和<code>stringify</code></li></ul><h2 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链" aria-hidden="true">#</a> 原型和原型链</h2><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n    <span class="token keyword">this</span><span class="token punctuation">.</span>class <span class="token operator">=</span> <span class="token string">&#39;class-1&#39;</span>\n    <span class="token comment">// return this  // 默认有这一行</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p><code>Foo</code>是<code>f</code>的构造函数,有<code>name</code> <code>age</code> <code>class</code>三个属性</p></li><li><p>带<code>new</code>执行时，函数中的<code>this</code>就会变成一个空对象，让程序为其属性赋值，然后最终返回。默认带一个<code>return this</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;beijing&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><p>创建一个新对象</p></li><li><p><code>this</code>指向这个新对象</p></li><li><p>执行代码，即对<code>this</code>赋值</p></li><li><p>返回<code>this</code></p></li><li><p>创建一个新对象。它继承自foo.prototype</p></li><li><p>执行foo构造函数里的代码。执行时相应的参数被传入，同时this会被指定为这个新实例。new foo等同于new foo()，只能用在不传递任何参数的情况</p></li><li><p>如果构造函数返回了一个对象，那么返回这个对象。否则，返回this</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">new2</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> o<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> k<span class="token operator">=</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> k<span class="token operator">===</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> k\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> o\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>其他</p><ul><li><code>var a = {}</code>是<code>var a = new Object()</code>语法糖</li><li><code>var a = []</code>是<code>var a = new Array()</code>语法糖</li><li><code>function Foo(){...}</code>是<code>var Foo = new Function(...)</code>语法糖</li></ul></li><li><p>判断一个函数是否是一个变量的构造函数</p><ul><li><code>instanceof</code>(原理:一层一层往上，能否对应到<code>xxx.prototype</code>)(判断数组和伪数组：实际应用中只需要判断<code>length</code>属性是否是数字即可)</li><li>constructor===构造函数（更准确）</li></ul></li></ul><h3 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h3><h4 id="显示原型和隐式原型" tabindex="-1"><a class="header-anchor" href="#显示原型和隐式原型" aria-hidden="true">#</a> 显示原型和隐式原型</h4><ul><li>引用类型有一个<code>__proto__</code>(隐式原型)属性，属性值是一个普通的对象</li><li>函数有一个<code>prototype</code>（显示原型）属性，属性值是一个普通的对象</li><li>引用类型的<code>__proto__</code>属性值指向它的构造函数的<code>prototype</code>属性值</li></ul><h3 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h3>',10),Hn=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Uk)("当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的"),(0,t._)("code",null,"__proto__"),(0,t.Uk)("（即它的构造函数的"),(0,t._)("code",null,"prototype"),(0,t.Uk)("）中寻找。如果在"),(0,t._)("code",null,"f.__proto__"),(0,t.Uk)("中没有找到"),(0,t._)("code",null,"toString"),(0,t.Uk)("，那么就继续去"),(0,t._)("code",null,"f.__proto__.__proto__"),(0,t.Uk)("中寻找，因为"),(0,t._)("code",null,"f.__proto__"),(0,t.Uk)("是一个普通的对象。这样一直往上找，是一个链式的结构，叫做“原型链”。直到找到最上层"),(0,t._)("code",null,"Object.prototype.__proto__ === null"),(0,t.Uk)("都没有找到，返回"),(0,t._)("code",null,"undefined"),(0,t.Uk)("。")])],-1),Zn=(0,t.uE)('<ul><li>如何判断一个这个属性是不是对象本身的属性呢 <ul><li>使用<code>hasOwnProperty</code>，常用在遍历对象的时候</li></ul></li></ul><h3 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h3><ul><li>使用案例</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 构造函数</span>\n<span class="token keyword">function</span> <span class="token function">DomElement</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>\n    <span class="token keyword">var</span> length <span class="token operator">=</span> result<span class="token punctuation">.</span>length\n    <span class="token keyword">var</span> i\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> selectorResult<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length\n<span class="token punctuation">}</span>\n<span class="token comment">// 修改原型</span>\n<span class="token class-name">DomElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>\n    constructor<span class="token operator">:</span> DomElement<span class="token punctuation">,</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">forEach</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> i\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> elem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">on</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">elem</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">var</span> $div <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>\n$div<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><ul><li>构造函数继承</li></ul>',5),Gn=(0,t.uE)(' ```js // 第一种，借助构造函数实现继承(这种无法继承parent原型对象上的方法) function Parent1(){ this.name=&#39;parent1&#39;; } Parent1.prototype.say=function(){} function Child1(){ Parent1.call(this);// call,apply改变函数执行上下文，即this this.type=&#39;child1&#39;; } // 第二种，借助原型链实现继承(这种继承是继承了同一个parent实例，导致修改的也是同一个) function Parent2(){ this.name=&#39;parent2&#39;; this.play=[1,2,3] } function Child2(){ this.type=&#39;child2&#39;; } Child2.prototype=new Parent2(); var s1=new Child2(); var s2=new Child2(); s1.play.push(4); console.log(s1.play,s2.play)// [1,2,3,4],[1,2,3,4] // 第三种，组合继承方式(组合以上两种，避免了以上两个的问题)(缺点：继承时父级构造函数执行了两遍) function Parent3(){ this.name=&#39;parent3&#39; } function Child3(){ Parent3.call(this); this.type=&#39;child3&#39;; } Child3.prototype=new Parent3(); // 组合继承方式优化1(问题：constructorwei指向Child4) function Parent4(){ this.name=&#39;parent4&#39; } function Child4(){ Parent4.call(this); this.type=&#39;child4&#39;; } Child4.prototype=Parent4.prototype; var s4=new Child4(); console.log(s4.constructor);// Parent4 // 组合继承方式优化2(最终方案) function Parent5{ this.name=&#39;parent5&#39; } function Child5(){ Parent5.call(this); this.type=&#39;child5&#39;; } Child5.prototype=Object.create(Parent5.prototype);// 隔离父类和子类的原型对象 Child5.prototype.constructor=Child5;// 覆盖自雷的原型对象 ``` <h3 id="zepto-或其他框架-源码中如何使用原型链" tabindex="-1"><a class="header-anchor" href="#zepto-或其他框架-源码中如何使用原型链" aria-hidden="true">#</a> zepto（或其他框架） 源码中如何使用原型链</h3><ul><li>重写数组_<em>proto</em>_，里面要用到原数组属性的直接=Array.prototype.xxx，其余添加它想要添加的方法。</li></ul><h2 id="作用域和闭包" tabindex="-1"><a class="header-anchor" href="#作用域和闭包" aria-hidden="true">#</a> 作用域和闭包</h2><h3 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h3><ul><li><code>&lt;script&gt;</code>中的变量提升：变量定义，函数声明 <ul><li>在一段 JS 脚本（即一个<code>&lt;script&gt;</code>标签中）执行之前，会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为<code>undefined</code>，函数则先声明好可使用。再开始正式执行程序。</li></ul></li><li>函数中的变量提升：变量定义，函数声明，this，arguments <ul><li>一个函数在执行之前，也会创建一个<strong>函数执行上下文</strong>环境，跟<strong>全局上下文</strong>差不多，不过<strong>函数执行上线文</strong>中会多出<code>this</code> <code>arguments</code>和函数的参数。</li></ul></li></ul><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h3>',7),Qn=(0,t.uE)(' - this指向决定于在哪里执行，和在哪里定义无关 - 全局中this指向window - 构造函数中 - 指向当前实例对象 - 其它：指向调用它的对象 - 用于`call` `apply` `bind` - 调用时指定this的指向 :::warning 注意 - 对象属性 ```js var a = { name: &#39;A&#39;, fn: function () { console.log(this.name) } } a.fn() // this === a var fn1 = a.fn fn1() // this === window ``` - 普通函数 ```js function fn() { console.log(this) } fn() // window ``` ::: :::warning 面试题 ```js var name = &quot;The Window&quot;; var object = { name : &quot;My Object&quot;, getNameFunc : function(){ return (function(){ alert(this.name); })(); }, getName:function(){ alert(this.name); } }; object.getNameFunc(); //The Window object.getName(); //My Object //函数 getNameFunc 内返回一个闭包，因此 this 指向全局对象，所以 this.name 即为定义在全部作用域下的 name（&quot;The Window&quot;）。 //函数 getName 内并未返回闭包，因此 this 指向当前对象，所以 this.name 即为当前作用域下的 name（&quot;My Object&quot;）。 ``` **this看执行的时候，自由变量看定义的时候** ::: ### 作用域 没有块级作用域，只有全局作用域和函数作用域。 <ul><li>全局作用域 <ul><li>如果写了很多行 JS 代码，变量定义都没有用函数包括，就全部都在全局作用域中。容易撞车。</li></ul></li><li>防止全局作用域污染 <ul><li><code>(function(){....})()</code>，jquery等使用匿名函数</li></ul></li></ul><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链" aria-hidden="true">#</a> 作用域链</h3><ul><li>自由变量 <ul><li>当前作用域没有定义的变量，叫做自由变量。</li></ul></li><li>作用域链 <ul><li>自由变量需要向父级作用域寻找。如果父级也没呢？再一层一层向上寻找，直到找到全局作用域。这种一层一层的关系，就是作用域链。</li><li>自由变量按照变量定义时的作用域链</li></ul></li></ul><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3>',5),Kn=(0,t.uE)('<li><p>作用域内部调用作用域外部变量</p><ul><li>函数作为返回值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span>\n<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//100</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>函数作为参数传递</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token constant">F2</span><span class="token punctuation">(</span><span class="token parameter">f1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token constant">F2</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token comment">//100</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li>',1),ns=(0,t._)("p",null,"闭包的应用",-1),ss=(0,t.uE)(' - 创造作用域，避免全局污染 ```js function isFirstLoad() { var _list = [] <pre><code>  return function (id) {\n      if (_list.indexOf(id) &gt;= 0) {\n          return false\n      } else {\n          _list.push(id)\n          return true\n      }\n  }\n</code></pre><p>} // 使用 var firstLoad = isFirstLoad() firstLoad(10) // true firstLoad(10) // false firstLoad(20) // true</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;mark-check id=&quot;10span&quot;&gt;&lt;/mark-check&gt;\n- 创建 10 个 a 标签，点击的时候弹出来对应的序号\n```javascript\n// 错误的写法\nvar i, a\nfor (i = 0; i &lt; 10; i++) {\n    a = document.createElement(&#39;a&#39;)\n    a.innerHTML = i + &#39;&lt;br&gt;&#39;\n    a.addEventListener(&#39;click&#39;, function (e) {\n        e.preventDefault()\n        alert(i)\n    })\n    document.body.appendChild(a)\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 正确的写法</span>\n<span class="token keyword">var</span> i\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>\n        a<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">&#39;&lt;br&gt;&#39;</span>\n        a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><code>DocumentFragment</code>优化</li></ul>',6),as=(0,t._)("li",null,[(0,t._)("p",null,"面试题 案例一:")],-1),ts=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">functionaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  varb<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">functioncc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    b<span class="token operator">++</span><span class="token punctuation">;</span> \n    <span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n<span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>还有子函数里为什么要写 return,?这是因为要在父函数外部调用 。看下面这段代码;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token comment">//返回 b函数本身内容，不能写成 return b()这样直接执行了 </span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> c<span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">cc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    b<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dd<span class="token operator">=</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">dd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    b<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果:11,undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n  <span class="token keyword">var</span> li<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>li<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">js\n\n</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>html\n<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>像 上面那些写法都是要么在里面加上括号，直接调用，要么在父函数外面执行。而这里却没 有? 解释:上面的内部的函数被绑定到事件上了 父函数运行，然后把里面的函数返回了，然后返回给绑定的事件上</p><p>这时代码就变成这样: li[i].onclick=function(){ alert(n); } 这是我们常用的写法，很明显，这样就运行了子函数，就会弹出结果。 这个闭包还有第二种写法:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> \n    <span class="token keyword">var</span> li<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">for</span><span class="token punctuation">(</span>vari<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>li<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>因为要用到循环里的变量，所以用一个闭包把下面的代码包起来，并传给一个形 参 n,调用时传实参 i,这个 i就是 for循环里的 i。</p><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h2><h3 id="什么是异步" tabindex="-1"><a class="header-anchor" href="#什么是异步" aria-hidden="true">#</a> 什么是异步</h3>',12),ps=(0,t.uE)(' 异步的场景 - 定时 `setTimeout` `setInverval` - 网络请求，如 `ajax` `<img>`加载（常用语打点统计） - 事件绑定 <h3 id="异步的实现机制-以及对单线程的理解" tabindex="-1"><a class="header-anchor" href="#异步的实现机制-以及对单线程的理解" aria-hidden="true">#</a> 异步的实现机制，以及对单线程的理解</h3><h3 id="异步的问题和解决方案" tabindex="-1"><a class="header-anchor" href="#异步的问题和解决方案" aria-hidden="true">#</a> 异步的问题和解决方案</h3><p>异步遇到的最大的问题</p><ul><li>callback-hell</li><li>易读性差，即书写顺序和执行顺序不一致</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./data1.json&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span>\n    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./data2.json&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span>\n        $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./data3.json&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span>\n            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./data4.json&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data4<span class="token punctuation">)</span>\n                <span class="token comment">// ...继续嵌套...</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',8),es={href:"http://www.cnblogs.com/wangfupeng1988/p/6513070.html",target:"_blank",rel:"noopener noreferrer"},ls=(0,t.Uk)("深入理解 JavaScript 异步系列（1）——基础"),os={href:"http://www.cnblogs.com/wangfupeng1988/p/6515779.html",target:"_blank",rel:"noopener noreferrer"},cs=(0,t.Uk)("深入理解 JavaScript 异步系列（2）—— jquery的解决方案"),us={href:"http://www.cnblogs.com/wangfupeng1988/p/6515855.html",target:"_blank",rel:"noopener noreferrer"},is=(0,t.Uk)("深入理解 JavaScript 异步系列（3）—— ES6 中的 Promise"),rs={href:"http://www.cnblogs.com/wangfupeng1988/p/6532713.html",target:"_blank",rel:"noopener noreferrer"},ks=(0,t.Uk)("深入理解 JavaScript 异步系列（4）—— Generator"),ds={href:"http://www.cnblogs.com/wangfupeng1988/p/6532734.html",target:"_blank",rel:"noopener noreferrer"},bs=(0,t.Uk)("深入理解 JavaScript 异步系列（5）—— async await"),ms=(0,t.uE)('<h3 id="同步和异步的区别" tabindex="-1"><a class="header-anchor" href="#同步和异步的区别" aria-hidden="true">#</a> 同步和异步的区别</h3><p>同步会阻塞代码执行，而异步不会。<code>alert</code>是同步，<code>setTimeout</code>是异步</p><h3 id="关于settimeout的笔试题" tabindex="-1"><a class="header-anchor" href="#关于settimeout的笔试题" aria-hidden="true">#</a> 关于<code>setTimeout</code>的笔试题</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 以下代码执行后，打印出来的结果是什么</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>该题目的答案是<code>1 3 5 2 4</code></p><h3 id="前端使用异步的场景" tabindex="-1"><a class="header-anchor" href="#前端使用异步的场景" aria-hidden="true">#</a> 前端使用异步的场景</h3><ul><li>setTimeout setInterval</li><li>网络请求</li><li>事件绑定</li></ul><h2 id="内置对象-正则表达式" tabindex="-1"><a class="header-anchor" href="#内置对象-正则表达式" aria-hidden="true">#</a> 内置对象-正则表达式</h2><h3 id="正则对象" tabindex="-1"><a class="header-anchor" href="#正则对象" aria-hidden="true">#</a> 正则对象</h3><ul><li>正则对象可以匹配变量，pattern 正则表达式的文本，flags(g:全局匹配 i:忽略大小写 m：多行)</li><li>三种方式 <ul><li>字面量 <ul><li>/xyz/i</li></ul></li><li>构造函数（返回一个正则表达式字面量） <ul><li>参数是字符串(字符串里需要转义<code>new RegExp(&quot;\\\\w+&quot;)</code>) <ul><li><code>var regex = new RegExp(&#39;xyz&#39;, &#39;i&#39;);</code> 等价于 <code>var regex = /xyz/i;</code></li></ul></li><li>参数是正则表示式 <ul><li><code>var regex = new RegExp(/xyz/i);</code> 等价于 <code>var regex = /xyz/i;</code></li></ul></li><li>参数是正则表示式时第二个参数添加修饰符[ES6] <ul><li><code>new RegExp(/abc/ig, &#39;i&#39;)</code> i覆盖了ig</li></ul></li></ul></li><li>工厂符号 <ul><li>RegExp(&#39;xyz&#39; ,i)</li></ul></li></ul></li><li>注意点 <ul><li>正则表达式里有变量</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">^(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>o<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h3 id="正则api" tabindex="-1"><a class="header-anchor" href="#正则api" aria-hidden="true">#</a> 正则api:</h3><ul><li>RegExp.prototype.exec(str) <ul><li>在一个指定字符串中执行一个搜索匹配。返回一个结果数组(匹配的第一个字符串)或 null，并改变lastIndex(再次执行exec时开始搜索的位置)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RE_DATE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> matchObj <span class="token operator">=</span> <span class="token constant">RE_DATE</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;1999-12-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 返回结果</span>\n<span class="token punctuation">[</span>\n    <span class="token comment">// 匹配的第一个字符串</span>\n    <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&quot;1999-12-31&quot;</span>\n    <span class="token comment">// 所有分组</span>\n    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;1999&quot;</span>\n    <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;12&quot;</span>\n    <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;31&quot;</span>\n    <span class="token comment">// 设置了具名组，并且该组有匹配时的分组捕获</span>\n    groups<span class="token operator">:</span> <span class="token keyword">undefined</span>\n    groups<span class="token operator">:</span> <span class="token punctuation">{</span>\n        year<span class="token operator">:</span><span class="token number">1999</span><span class="token punctuation">,</span>\n        month<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>\n        day<span class="token operator">:</span><span class="token number">31</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 匹配到的字符位于原始字符串的基于0的索引值</span>\n    index<span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token comment">// 原始字符串\t</span>\n    input<span class="token operator">:</span> <span class="token string">&quot;1999-12-31&quot;</span>\n    length<span class="token operator">:</span> <span class="token number">4</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li><li>RegExp.prototype.test(str) <ul><li>执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 false。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>RegExp.prototype.unicode[ES6] <ul><li>返回是否设置了u修饰符。</li></ul></li><li>RegExp.prototype.sticky[ES6] <ul><li>返回是否设置了y修饰符</li></ul></li><li>RegExp.prototype.flags[ES6] <ul><li>返回正则表达式的修饰符</li></ul></li></ul><h3 id="字符串的正则方法" tabindex="-1"><a class="header-anchor" href="#字符串的正则方法" aria-hidden="true">#</a> 字符串的正则方法</h3><p>5个方法：match()、replace()、search()、split()、matchAll()</p><h3 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h3><ul><li>默认前一次匹配的结束是下一次匹配的开始</li></ul><h3 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类" aria-hidden="true">#</a> 字符类</h3><ul><li>[]中括号表示范围 <ul><li><code>[a-zA-Z],[abc],[cf]at</code>,</li><li><code>[0-9]</code></li><li><code>[^a-d]</code> 非a-d的字符</li></ul></li><li>()括号表示里面内容是个整体，优先顺序，|表示或者 <ul><li><code>(cla|pa)ss</code> 表示class或者pass</li></ul></li></ul><h4 id="预定义字符类" tabindex="-1"><a class="header-anchor" href="#预定义字符类" aria-hidden="true">#</a> 预定义字符类</h4><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配除\\n换行符外的任何单字符。匹配包括\\n在内的所有字符，使用`(.</td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">数字字符:[0-9]</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">非数字字符:[^0-9]</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">空白字符（空格和换行符）:[\\f\\n\\r\\t\\v]</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">非空白字符:[^\\s]</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">单词字符:[a-zA-Z_0-9]</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">非单词字符:[^\\w]</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">匹配一个换页符</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">匹配一个换行符</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">匹配一个回车符</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">匹配一个水平制表符</td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">匹配一个垂直制表符</td></tr></tbody></table><h3 id="量词" tabindex="-1"><a class="header-anchor" href="#量词" aria-hidden="true">#</a> 量词</h3><ul><li>允许指定匹配出现的次数,以下为贪婪模式：</li></ul><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">X?</td><td style="text-align:left;">匹配X零次或一次</td></tr><tr><td style="text-align:left;">X*</td><td style="text-align:left;">匹配X零次或多次</td></tr><tr><td style="text-align:left;">X+</td><td style="text-align:left;">匹配X一次或多次</td></tr><tr><td style="text-align:left;">X{n,m}</td><td style="text-align:left;">匹配n-m次</td></tr><tr><td style="text-align:left;">X{n,}</td><td style="text-align:left;">匹配X至少n次</td></tr></tbody></table>',23),gs=["src"],fs=(0,t.uE)('<ul><li>量词模式 <ul><li>贪婪：尽量多的匹配目标字符串，且能够回退</li><li>勉强：尽量少地匹配目标串</li><li>侵占：尽量多地匹配目标串，且不能回退</li></ul></li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>目标串：xfooxxxxxxfoo\n贪婪模式：.<span class="token italic"><span class="token punctuation">*</span><span class="token content">foo\n匹配一个（</span><span class="token punctuation">*</span></span>f尽量多地全部字符串匹配，然后到foo，没有字符串了，就回退一个，再回退一个，直到回退三个时满足条件，然后就匹配了一个）\n勉强模式：<span class="token italic"><span class="token punctuation">*</span><span class="token content">?foo\n匹配两个（第一个字符不是f，所以勉强地吞下一个x，然后第二个开始发现是foo，所以第一次匹配是xfoo,然后第二次吞下很多个xxx后发现xxxxxxfoo符合，所以共匹配两次）\n侵占模式：.</span><span class="token punctuation">*</span></span>+foo\n匹配0个（一次性匹配所有字符，不回退，所以后面的foo没有字符串了）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>目标串：232hjdhfd7474$\n贪婪模式：\\w+[a-z]\n匹配一个\n勉强模式：\\w+?[a-z]\n匹配三个\n侵占模式：\\w++[a-z]\n匹配0个\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="捕获组" tabindex="-1"><a class="header-anchor" href="#捕获组" aria-hidden="true">#</a> 捕获组</h3><ul><li>捕获组：使用括号作为单独的单元来对待的一种方式，可通过程序方便地拿到分组对应的匹配内容</li><li>作用： <ul><li>方便程序获取指定组的匹配</li><li>反向引用时调用</li></ul></li><li>比如在((A)(B(C)))中，按左括号从左到右来数，有四个括号 <ul><li>1:((A)(B(C)))// 表示整个表达式</li><li>2:(A)</li><li>3:(B(C))</li><li>4:(C)</li></ul></li><li>具名组匹配（为每一个组匹配指定一个名字）[ES6] <ul><li>在圆括号内部，模式的头部添加<code>问号 + 尖括号 + 组名（?&lt;year&gt;）</code>，就可以在exec方法返回结果的groups属性上引用该组名。数字序号（matchObj[1]）依然有效。</li><li>如果具名组as没有找到匹配，那么matchObj.groups.as属性值就是undefined，并且as这个键名在groups是始终存在的。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RE_OPT_A</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?&lt;as&gt;a+)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> matchObj <span class="token operator">=</span> <span class="token constant">RE_OPT_A</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmatchObj<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>as <span class="token comment">// undefined</span>\n<span class="token string">&#39;as&#39;</span> <span class="token keyword">in</span> matchObj<span class="token punctuation">.</span>groups <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>利用具名组解构赋值(直接从匹配结果上为变量赋值)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span>groups<span class="token operator">:</span> <span class="token punctuation">{</span>one<span class="token punctuation">,</span> two<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;foo:bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\none  <span class="token comment">// foo</span>\ntwo  <span class="token comment">// bar</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>利用具名组替换（使用<code>$&lt;组名&gt;</code>引用具名组。） <ul><li>第二个参数是字符串<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// let re = /(?\\&lt;year&gt;\\d{4})-(?\\&lt;month&gt;\\d{2})-(?\\&lt;day&gt;\\d{2})/u;</span>\n<span class="token comment">// &#39;2015-01-02&#39;.replace(re, &#39;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#39;)</span>\n<span class="token comment">// &#39;02/01/2015&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>第二个参数是函数。具名组匹配新增了最后一个函数参数(具名组构成的一个对象)。函数内部可以直接对这个对象进行解构赋值。</li></ul><div class="language-JS ext-JS line-numbers-mode"><pre class="language-JS"><code>&#39;2015-01-02&#39;.replace(re, (\n    matched, // 整个匹配结果 2015-01-02\n    capture1, // 第一个组匹配 2015\n    capture2, // 第二个组匹配 01\n    capture3, // 第三个组匹配 02\n    position, // 匹配开始的位置 0\n    S, // 原字符串 2015-01-02\n    groups // 具名组构成的一个对象 {year, month, day}\n) =&gt; {\n    let {day, month, year} = groups;\n    return `${day}/${month}/${year}`;\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li>引用（两种引用语法可以同时使用） <ul><li>\\k&lt;组名&gt;</li><li>数字引用（\\1）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RE_TWICE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?&lt;word&gt;[a-z]+)!\\k&lt;word&gt;!\\1$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token constant">RE_TWICE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abc!abc!abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token constant">RE_TWICE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abc!abc!ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><h4 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用" aria-hidden="true">#</a> 反向引用</h4><ul><li>使用反斜线\\后跟一个数字来表示。数字用来表示需要引用的分组组号</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 匹配两个数字连续出现两次的目标串(如：1212、2424)</span>\n<span class="token punctuation">(</span>\\d\\d<span class="token punctuation">)</span>\\<span class="token number">1</span> <span class="token number">12123233</span> \n<span class="token comment">// 匹配一次(\\d\\d表示匹配两个数字，括号括起来表示是一个分组,\\1表示重复这个分组一次)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 匹配html标签</span>\n<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">|</span>\\n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>\\<span class="token number">1</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;vId&quot;</span><span class="token operator">&gt;</span>我知道<span class="token operator">&lt;</span>未来<span class="token operator">&gt;</span>的<span class="token operator">&lt;</span>a<span class="token operator">&gt;</span>路<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>很<span class="token operator">&lt;</span>a<span class="token operator">&gt;</span>不好走<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token comment">// 匹配一次（([a-zA-Z]+)是前面的标签名，.*?勉强模式匹配多个非换行字符的标签属性,(.|\\n)*.?勉强模式匹配标签中间内容，\\1重复前面的标签名）</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="非捕获组" tabindex="-1"><a class="header-anchor" href="#非捕获组" aria-hidden="true">#</a> 非捕获组</h4><ul><li>概要 <ul><li>分组括号里第一个是?就是非捕获组(不计算在分组里面)</li><li>好处：不会将匹配到的字符存储在内存中，从而节省内存</li></ul></li><li>分类 <ul><li><code>(?:Pattern)</code></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 匹配industry或者Industries</span>\n<span class="token comment">// 这种情况有分组</span>\n<span class="token function">industr</span><span class="token punctuation">(</span>y<span class="token operator">|</span>ies<span class="token punctuation">)</span>\n<span class="token comment">// 改为没有分组的(节省内存)</span>\n<span class="token function">industr</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span>y<span class="token operator">|</span>ies<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="零宽度断言" tabindex="-1"><a class="header-anchor" href="#零宽度断言" aria-hidden="true">#</a> 零宽度断言</h4><ul><li>后顾js不支持</li></ul><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>(?=pattern)</td><td>正向肯定查找(前瞻),后面必须跟着什么</td></tr><tr><td>(?!pattern)</td><td>正向否定查找(前瞻)，后面不能跟着什么</td></tr><tr><td>(?&lt;=pattern)</td><td>反向肯定条件查找(后顾),不捕获</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定条件查找（后顾）</td></tr></tbody></table><table><thead><tr><th>表达式</th><th>含义</th><th>添加时间</th></tr></thead><tbody><tr><td>x(?=y)</td><td>先行断言，仅匹配被y跟随的x。</td><td></td></tr><tr><td>x(?!y)</td><td>先行否定断言，仅匹配不被y跟随的x。</td><td></td></tr><tr><td>(?&lt;=y)x</td><td>后行断言，仅匹配x在y后面</td><td>ES6</td></tr><tr><td>(?&lt;!y)x</td><td>后行否定断言，仅匹配x不在y后面</td><td>ES6</td></tr></tbody></table><ul><li>例：正则表达式(?&lt;!4)56(?=9) <ul><li>答：文本56前面不能是4，后面必须是9组成，因此5569匹配，4569不匹配</li></ul></li><li>例：提取字符串da12bka3434bdca4343bdca234bm中包含在字符a和b之间的数字，但是这个a之前的字符不能是c，b后面的字符必须是d才能提取。 <ul><li>答：通过添加分组拿到分组内容 [^c]a(\\d+)bd，通过零宽度断言，去掉前后分组，拿到剩下中间的一个分组 (?&lt;=[^c]a)\\d+(?=bd)</li></ul></li></ul><h4 id="模式修政符" tabindex="-1"><a class="header-anchor" href="#模式修政符" aria-hidden="true">#</a> 模式修政符</h4><ul><li>可组合搭配使用</li></ul><table><thead><tr><th>表达式</th><th>含义</th><th>添加时间</th></tr></thead><tbody><tr><td>i</td><td>不区分大小写</td><td></td></tr><tr><td>g</td><td>全局匹配</td><td></td></tr><tr><td>m</td><td>多行修饰符，使^和$匹配每一行的行首和行尾</td><td></td></tr><tr><td>s</td><td>设置为dotAll模式，使.可以匹配任意单个字符</td><td>ES6</td></tr><tr><td>x</td><td></td><td></td></tr><tr><td>e</td><td></td><td></td></tr><tr><td>u</td><td>处理大于\\uFFFF的 Unicode 字符</td><td>ES6</td></tr><tr><td>y</td><td>与g修饰符类似，也是全局匹配，但匹配必须从剩余的第一个位置开始</td><td>ES6</td></tr></tbody></table><h4 id="边界匹配器" tabindex="-1"><a class="header-anchor" href="#边界匹配器" aria-hidden="true">#</a> 边界匹配器</h4><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>行首 (中括号外面表示开头，中括号里面表示取反)</td></tr><tr><td>$</td><td>行尾</td></tr><tr><td>\\b</td><td>匹配一个单词边界</td></tr><tr><td>\\B</td><td>匹配非单词边界</td></tr></tbody></table><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>I say thank you\nthank you \nthank you all the same\n<span class="token comment">&lt;!-- 查找以thank开头的行：^thank，匹配两项--&gt;</span>\n<span class="token comment">&lt;!-- 查找以thank开头以same结尾的行：^thank.*same$，匹配一项 --&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="regexp-​-1-9" tabindex="-1"><a class="header-anchor" href="#regexp-​-1-9" aria-hidden="true">#</a> RegExp.​$1...$9</h4><ul><li>值为String类型</li><li>返回上一次正则表达式匹配中，第n个子表达式所匹配的文本。（只保存最前面的9个匹配文本。）</li></ul><h4 id="p-和-p" tabindex="-1"><a class="header-anchor" href="#p-和-p" aria-hidden="true">#</a> \\p{...}和\\P{...}</h4><ul><li>允许正则表达式匹配符合 Unicode 某种属性的所有字符</li><li>这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。</li><li>由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 匹配所有数字</span>\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\p{Number}+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>\nregex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;²³¹¼½¾&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nregex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;㉛㉜㉝&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nregex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token comment">// 匹配所有空格</span>\n\\p<span class="token punctuation">{</span>White_Space<span class="token punctuation">}</span>\n\n<span class="token comment">// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w</span>\n<span class="token punctuation">[</span>\\p<span class="token punctuation">{</span>Alphabetic<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Mark<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Decimal_Number<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Connector_Punctuation<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Join_Control<span class="token punctuation">}</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W</span>\n<span class="token punctuation">[</span><span class="token operator">^</span>\\p<span class="token punctuation">{</span>Alphabetic<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Mark<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Decimal_Number<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Connector_Punctuation<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Join_Control<span class="token punctuation">}</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 匹配 Emoji</span>\n<span class="token operator">/</span>\\p<span class="token punctuation">{</span>Emoji_Modifier_Base<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Emoji_Modifier<span class="token punctuation">}</span><span class="token operator">?</span><span class="token operator">|</span>\\p<span class="token punctuation">{</span>Emoji_Presentation<span class="token punctuation">}</span><span class="token operator">|</span>\\p<span class="token punctuation">{</span>Emoji<span class="token punctuation">}</span>\\uFE0F<span class="token operator">/</span>gu\n\n<span class="token comment">// 匹配所有的箭头字符</span>\n<span class="token keyword">const</span> regexArrows <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\p{Block=Arrows}+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>\nregexArrows<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li></ul><h4 id="综合实例" tabindex="-1"><a class="header-anchor" href="#综合实例" aria-hidden="true">#</a> 综合实例</h4><ul><li>URL</li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]<span class="token italic"><span class="token punctuation">*</span><span class="token content">)</span><span class="token punctuation">*</span></span>\\/?$/\n<span class="token comment">&lt;!-- http或者https开头，http和https可有可无，数字或者小写字母或者.或者-有一个及以上，然后.，然后2-6个小写字母或者.的字符串，然后单词或者空格或者.或者-有0个及以上，整个分组0个及以上，然后/有或者没有，结束。 --&gt;</span>\n/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([?=&amp;\\/\\w \\.-]<span class="token italic"><span class="token punctuation">*</span><span class="token content">)</span><span class="token punctuation">*</span></span>\\/?$/\n<span class="token comment">&lt;!-- 修改加上?=&amp;后可匹配带参数url --&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',30),hs=(0,t.Uk)(" ## 内置对象-日期函数 ```js // 没有参数,表示实例化时刻的日期和时间 new Date(); // Unix时间戳,它是一个整数值，表示自1970年1月1日00:00:00 UTC（the Unix epoch）以来的毫秒数 new Date(value); // 时间戳字符串,该字符串应该能被 Date.parse() 正确方法识别 new Date(dateString); // 分别提供日期与时间的每一个成员,没有提供的成员将使用最小可能值（对日期为1，其他为0）。 new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]); ``` "),vs=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回自 1970-1-1 00:00:00  UTC（世界标准时间）至今所经过的毫秒数。</span>\n<span class="token keyword">var</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\ndt<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回从1970-1-1 00:00:00 UTC（协调世界时）到该日期经过的毫秒数，</span>\ndt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 年</span>\ndt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 月（0 - 11）</span>\ndt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 日（1 - 31）</span>\ndt<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 星期(0-6)</span>\ndt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 小时（0 - 23）</span>\ndt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 分钟（0 - 59）</span>\ndt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 秒（0 - 59）</span>\n\ndt<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 通过指定从 1970-1-1 00:00:00 UTC 开始经过的毫秒数来设置日期对象的时间，</span>\ndt<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置完整年份（四位数年份是四个数字）。</span>\ndt<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置月份。</span>\ndt<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置月份中的第几天。</span>\ndt<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置小时数。</span>\ndt<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置分钟数。</span>\ndt<span class="token punctuation">.</span><span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置秒数。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>获取<code>2017-06-10</code>格式的日期</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token parameter">dt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dt<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> year <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> month <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">var</span> date <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 强制类型转换</span>\n        month <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> month\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 强制类型转换</span>\n        date <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> date\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 强制类型转换</span>\n    <span class="token keyword">return</span> year <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> date\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> formatDate <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formatDate<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="内置对象-数组常用-api" tabindex="-1"><a class="header-anchor" href="#内置对象-数组常用-api" aria-hidden="true">#</a> 内置对象-数组常用 API</h2>',4),ys=(0,t.Uk)(" | 功能 | API | es6 | | :--------- | ---------------------------------------: | ------------------: | | 合并、切割 | concat,join,slice | | | 添加 | unshift(从头),push(从末尾) | | | 删除 | shift(从头),pop(从末尾) | | | 删除并添加 | splice | copy​Within,fill | | 排序 | sort,reverse | | | 遍历 | map,forEach,reduce | entries,keys,values | | 筛选 | filter,every,some | | | 查找 | indexOf,last​IndexOf | find,find​Index,includes | | 拉平 | flat,flatMap | | | 自带 | Array​.isArray | Array.from,Array.of | "),xs=(0,t._)("h3",{id:"数组自带方法",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#数组自带方法","aria-hidden":"true"},"#"),(0,t.Uk)(" 数组自带方法")],-1),ws=(0,t.Uk)(" - Array​.isArray() #### ES6新增 "),js=(0,t.Uk)(" - Array​.from(object, mapFunction, thisValue) - 将非数组转为数组（`拥有 length 属性的对象（类数组对象）`和`可迭代的对象`）。 - 第二个参数(类似map方法),用来对每个元素进行处理，将处理后的值放入返回的数组。 - 第三个参数，用来绑定map方法中用到的this。 "),_s=(0,t.Uk)(" - Array.of() - 替代Array()或new Array() - Array() - 参数为1个时，会指定数组的长度 - Array.of() - 参数为1个时，依然是一个数组 ```js Array(3) // [, , ,] Array.of(1) // [1] ``` ### 实例方法 #### ES5 :::warning 合并、切割 "),Es=(0,t.Uk)(" - Array​.prototype​.concat(arrayX,arrayX,......,arrayX) - 返回被连接数组的一个副本。 - 不改变现有的数组 "),Us=(0,t.Uk)(" - Array​.prototype​.join() "),Ws=(0,t.Uk)(" - Array​.prototype​.slice(start,end) - 返回选定的元素。 - 包前不包后 - start默认为0，负数指倒数开始，end默认到最后，负数指倒数结束 ::: :::warning 添加 "),Ns=(0,t.Uk)(" - Array​.prototype​.unshift() "),Os=(0,t.Uk)(" - Array​.prototype​.push(newelement1,newelement2,....,newelementX) ::: :::warning 删除 "),Ss=(0,t.Uk)(" - Array​.prototype​.shift() "),As=(0,t.Uk)(" - Array​.prototype​.pop() ::: :::warning 删除并添加 "),Ps=(0,t.Uk)(" - Array​.prototype​.splice(index,howmany,item1,.....,itemX) - 返回被删除的元素的数组。 ::: :::warning 排序 "),qs=(0,t.Uk)(" - Array​.prototype​.sort() - 默认从小到大arr.sort() - 改变原数组 ```js arr.sort(function(a, b) { // 从小到大排序 return a - b // 从大到小排序 // return b - a }) ``` "),Cs=(0,t.Uk)(" - Array​.prototype​.reverse() ::: :::warning 遍历 "),zs=(0,t.uE)('<ul><li>Array​.prototype​.map(function(currentValue,index,arr){},this.Value) <ul><li>对数组每个元素进行操作，创建一个新数组<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;&lt;b&gt;&#39;</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">&#39;&lt;/b&gt;&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul>',1),Is=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Uk)("Array​.prototype​.for​Each(function (item, index) {}) "),(0,t._)("ul",null,[(0,t._)("li",null,"遍历数组的所有元素")])])],-1),Fs=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Uk)("Array​.prototype​.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue]) "),(0,t._)("ul",null,[(0,t._)("li",null,"对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。"),(0,t._)("li",null,"第一个函数返回总值和每一项的计算，对数组进行计算后得到结果"),(0,t._)("li",null,"第二个参数是第一次调用callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。")])])],-1),Ms=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 数组去重</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>init<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> init<span class="token punctuation">[</span>init<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        init<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> init<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2,3,4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>Array​.prototype​.reduce​Right() :::</li></ul>',2),Ts=(0,t.uE)('<div class="custom-container warning"><p class="custom-container-title">筛选</p><ul><li>Array​.prototype​.filter(function(currentValue,index,arr){},this.Value) <ul><li>第一个函数返回筛选条件，筛选符合条件的元素</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>Array​.prototype​.every() <ul><li>所有的数组元素，都满足一个条件，返回布尔值<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li>Array​.prototype​.some() <ul><li>只要有一个满足条件即可，返回布尔值<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li><li>Array​.prototype​.indexOf()</li><li>Array​.prototype​.last​IndexOf()</li></ul></div><div class="custom-container warning"><p class="custom-container-title">转换</p><ul><li>Array​.prototype​.toString() <ul><li>把数组转换为字符串，并返回结果。(数组中的元素之间用逗号分隔)</li></ul></li><li>Array​.prototype​.toLocale​String()</li></ul></div><h4 id="es6新增" tabindex="-1"><a class="header-anchor" href="#es6新增" aria-hidden="true">#</a> ES6新增</h4>',3),Ds=(0,t.Uk)(" - Array​.prototype​.copy​Within(target, start = 0, end = this.length) - 在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。 - 会修改当前数组 ```js [1, 2, 3, 4, 5].copyWithin(0, 3) // [4, 5, 3, 4, 5] ``` "),Rs=(0,t.Uk)(" - Array​.prototype​.find() - 第一个参数是一个回调函数，所有数组成员依次执行该回调函数， - 找出第一个返回值为true的成员，返回该成员。没有符合条件的，返回undefined。 - 第二个参数（回调函数中的this指向） ```js [1, 5, 10, 15].find(function(value, index, arr) { return value > 9; }) // 10 ``` "),$s=(0,t.Uk)(" - Array​.prototype​.find​Index() - 第一个参数是一个回调函数，所有数组成员依次执行该回调函数， - 返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。 - 第二个参数（回调函数中的this指向） ```js [1, 5, 10, 15].findIndex(function(value, index, arr) { return value > 9; }) // 2 ``` "),Js=(0,t.Uk)(" :::tip 和indexOf区别 - indexOf:找不到NaN - find,findIndex:可以借助Object.is方法找到。 ::: "),Bs=(0,t.Uk)(" - Array​.prototype​.fill(value, start, end) - 使用给定值，填充一个数组。 - start：填充起始位置，可以省略。end：填充结束位置，可以省略，实际结束位置是end-1。 ```js let a1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] a1.fill(7) // 7,7,7,7,7,7,7,7,7,7,7 ``` "),Ls=(0,t.Uk)(" - Array​.prototype​.entries() - 键值对遍历 - 返回一个遍历器对象,可以用for...of循环进行遍历 ```js for (let [index, elem] of ['a', 'b'].entries()) { console.log(index, elem); } ``` - Array​.prototype​.keys() - 键名遍历 - 返回一个遍历器对象,可以用for...of循环进行遍历 ```js for (let index of ['a', 'b'].keys()) { console.log(index); } ``` - Array​.prototype​.values() - 键值遍历 - 返回一个遍历器对象,可以用for...of循环进行遍历 ```js for (let elem of ['a', 'b'].values()) { console.log(elem); } ``` "),Ys=(0,t.Uk)(" - Array​.prototype​.includes() - 返回某个数组是否包含给定的值 - 第二个参数为负数，则表示倒数的位置 :::tip - indexOf:-1不直观，NaN误判 - includes：直观，NaN准确判断 ::: "),Xs=(0,t.Uk)(" - Array​.prototype​.flat() - 返回一个新数组，将嵌套的数组“拉平”，变成一维的数组 - 第一个参数是整数，表示想要拉平的层数，默认为1。(Infinity表示不管多少层都拉平) ```js [1, [2, [3]]].flat(Infinity) // [1, 2, 3] ``` - Array​.prototype​.flatMap() - 对原数组的每个成员执行一个函数（相当map），然后对返回值组成的数组执行flat()方法。 - 第二个参数绑定遍历函数里面的this。 - flatMap只能展开一层数组。 ```js arr.flatMap(function callback(currentValue[, index[, array]]) { // ... }[, thisArg]) // 相当于 [[[2]], [[4]], [[6]], [[8]]].flat() [1, 2, 3, 4].flatMap(x => [[x * 2]]) // [[2], [4], [6], [8]] ``` "),Vs=(0,t._)("h3",{id:"扩展运算符-数组-es6",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#扩展运算符-数组-es6","aria-hidden":"true"},"#"),(0,t.Uk)(" 扩展运算符（数组）[ES6]")],-1),Hs=(0,t._)("ul",null,[(0,t._)("li",null,"三个点（...）,将一个数组转为用逗号分隔的参数序列。")],-1),Zs=(0,t.Uk)(" ```js console.log(...[1, 2, 3]) // 1 2 3 function push(array, ...items) { array.push(...items); } ``` - 可以放置表达式。 - 如果扩展运算符后面是一个空数组，则不产生任何效果。 - 只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错。 - 替代函数的 apply 方法 - 由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。 "),Gs=(0,t._)("pre",null,[(0,t._)("code",null,"<absolute-box>利用函数apply调用时,参数是数组，调用后转为函数参数序列的特点</absolute-box>\n\n```js\n// ES5 的写法\nMath.max.apply(null, [14, 3, 77])\n\n// ES6 的写法\nMath.max(...[14, 3, 77])\n\n// 等同于\nMath.max(14, 3, 77);\n```\n")],-1),Qs=(0,t.Uk)("数组的扩展运算符应用 "),Ks=(0,t.Uk)(" - 复制数组（浅拷贝） ```js // 写法一 const a2 = [...a1]; // 写法二 const [...a2] = a1; ``` "),na=(0,t.uE)(' - 合并数组（浅拷贝） ```js // ES5 的合并数组 arr1.concat(arr2, arr3); // [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ] <pre><code>// ES6 的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ]\n```\n</code></pre><ul><li>将字符串转为数组（能够正确识别四个字节的 Unicode 字符。<code>Array.from()</code>也可以）<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span>\n<span class="token comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>将任意有Iterator接口的对象转为数组（如node节点集合,set map集合等）</li></ul>',3),sa=(0,t.Uk)(" :::tip - 扩展运算符：转有`可迭代的对象`为数组 - Array.from：转`拥有 length 属性的对象（类数组对象）`和`可迭代的对象`为数组 ::: "),aa=(0,t._)("h3",{id:"将空位转为undefined-es6",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#将空位转为undefined-es6","aria-hidden":"true"},"#"),(0,t.Uk)(" 将空位转为undefined[ES6]")],-1),ta=(0,t._)("ul",null,[(0,t._)("li",null,"ES6 明确将空位转为undefined。")],-1),pa=(0,t.uE)(' ## 内置对象-字符串常用 API <table><thead><tr><th style="text-align:left;">功能</th><th style="text-align:right;">ES5 API</th><th style="text-align:right;">ES6 API</th></tr></thead><tbody><tr><td style="text-align:left;">查找</td><td style="text-align:right;">indexOf,lastIndexOf,charAt,</td><td style="text-align:right;">includes,startsWith,endsWith</td></tr><tr><td style="text-align:left;">合并，切割</td><td style="text-align:right;">concat,splite,slice[),subString[)</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">匹配</td><td style="text-align:right;">match,replace,search</td><td style="text-align:right;">matchAll</td></tr><tr><td style="text-align:left;">格式化</td><td style="text-align:right;">toLowerCase,toUpperCase,trim,repeat,charCodeAt</td><td style="text-align:right;">padStart,padEnd,trimStart,trimEnd</td></tr></tbody></table><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><ul><li>charAt()</li><li>indexOf()</li><li>lastIndexOf()</li><li>includes() <ul><li>返回布尔值，表示是否找到了参数字符串。</li><li>支持第二个参数，表示开始搜索的位置。</li></ul></li><li>startsWith() <ul><li>返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>支持第二个参数，表示开始搜索的位置。</li></ul></li><li>endsWith() <ul><li>返回布尔值，表示参数字符串是否在原字符串的尾部。</li><li>支持第二个参数，表示开始搜索的位置。</li></ul></li></ul>',4),ea=(0,t.Uk)(' ### 合并、切割 - concat() - split([separator[, limit]]) - 把一个字符串按分隔符分割成字符串数组 - separator【必需】字符串或正则表达式(如果空字符串("")被用作分隔符，则字符串会在每个字符之间分割。如果没有找到或者省略了分隔符，则该数组包含一个由整个字符串组成的元素) - limit【可选】返回数组的最大长度 - slice(start,end) - 提取字符串的某个部分，并以新的字符串返回被提取的部分。 - substring(start,stop) - 提取字符串中介于两个指定下标之间的字符。返回一个字符串在开始索引到结束索引之间的一个子集 '),la=(0,t._)("h3",{id:"匹配",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#匹配","aria-hidden":"true"},"#"),(0,t.Uk)(" 匹配")],-1),oa=(0,t.Uk)(" - str.replace(regexp|substr, newSubStr|function) - 替换 - 第二个参数是字符串 - 第二个参数是函数 ```js  '2015-01-02'.replace(re, ( matched, // 整个匹配结果 2015-01-02 capture1, // 第一个组匹配 2015 capture2, // 第二个组匹配 01 capture3, // 第三个组匹配 02 position, // 匹配开始的位置 0 S, // 原字符串 2015-01-02 groups // 具名组构成的一个对象 {year, month, day}[ES6] ) => { let {day, month, year} = groups; return `${day}/${month}/${year}`; }); ``` "),ca=(0,t._)("p",null,"str.search(regexp)",-1),ua=(0,t._)("ul",null,[(0,t._)("li",null,"对正则表达式和指定字符串进行匹配搜索"),(0,t._)("li",null,"匹配成功，返回首次匹配项的索引，否则返回-1")],-1),ia=(0,t._)("li",null,[(0,t._)("p",null,"str.match(regexp)"),(0,t._)("ul",null,[(0,t._)("li",null,"可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。"),(0,t._)("li",null,"如果使用g标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。 如果未使用g标志，则仅返回第一个完整匹配及其相关的捕获组（Array）。")])],-1),ra=(0,t.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;For more information, see Chapter 3.4.5.1&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">see (chapter \\d+(\\.\\d)*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> found <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// logs [ &#39;see Chapter 3.4.5.1&#39;,</span>\n<span class="token comment">//        &#39;Chapter 3.4.5.1&#39;,</span>\n<span class="token comment">//        &#39;.1&#39;,</span>\n<span class="token comment">//        index: 22,</span>\n<span class="token comment">//        input: &#39;For more information, see Chapter 3.4.5.1&#39; ]</span>\n\n<span class="token comment">// &#39;see Chapter 3.4.5.1&#39; 是整个匹配。</span>\n<span class="token comment">// &#39;Chapter 3.4.5.1&#39; 被&#39;(chapter \\d+(\\.\\d)*)&#39;捕获。</span>\n<span class="token comment">// &#39;.1&#39; 是被&#39;(\\.\\d)&#39;捕获的最后一个值。</span>\n<span class="token comment">// &#39;index&#39; 属性(22) 是整个匹配从零开始的索引。</span>\n<span class="token comment">// &#39;input&#39; 属性是被解析的原始字符串。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-E]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> matches_array <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches_array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>str.matchAll() <ul><li>如果一个正则表达式在字符串里面有多个匹配，一般使用g修饰符或y修饰符，在循环里面逐一取出。</li><li>返回一个正则表达式在当前字符串的所有匹配(返回一个遍历器,用for...of循环)</li><li>转数组（...运算符或Array.from方法）</li></ul></li></ul>',3),ka=(0,t.Uk)(' ### 格式化 - toUpperCase() - toLowerCase() - trim() - trimStart(),trimEnd() - trimStart()消除字符串头部的空格 - trimEnd()消除尾部的空格。 - 返回新字符串，不修改原始字符串。 - str.repeat(count) - 返回一个新字符串，表示将原字符串重复n次。参数必须为正数 ```js "abc".repeat(-1) // RangeError: 必须为正数 "abc".repeat(0) // "" "abc".repeat(1) // "abc" "abc".repeat(2) // "abcabc" ``` - str.padStart()，str.padEnd() - 如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。 - 如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。 - 省略第二个参数，默认使用空格补全长度 - 用途 - 为数值补全指定位数 - 提示字符串格式 ```js \'x\'.padStart(5, \'ab\') // \'ababx\' \'x\'.padStart(4, \'ab\') // \'abax\' '),da=(0,t._)("pre",null,[(0,t._)("code",null,"'x'.padEnd(5, 'ab') // 'xabab'\n'x'.padEnd(4, 'ab') // 'xaba'\n```\n```js\n// 提示字符串格式\n12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n")],-1),ba=(0,t._)("ul",null,[(0,t._)("li",null,"toString()"),(0,t._)("li",null,"valueOf()"),(0,t._)("li",null,"charCodeAt(index) 单个字符转ascll码的index")],-1),ma=(0,t._)("h2",{id:"内置对象-对象常用-api",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#内置对象-对象常用-api","aria-hidden":"true"},"#"),(0,t.Uk)(" 内置对象-对象常用 API")],-1),ga=(0,t._)("h3",{id:"属性",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#属性","aria-hidden":"true"},"#"),(0,t.Uk)(" 属性")],-1),fa=(0,t.Uk)(" - 属性名 - obj.xxx(xxx是变量要用[xxx]) "),ha=(0,t.Uk)(" - 属性遍历 - for-in ```js var obj = { x: 100, y: 200, z: 300 } var key for (key in obj) { if (obj.hasOwnProperty(key)) { console.log(key, obj[key]) } } ``` "),va=(0,t.Uk)(" - `in`运算符 - 如果指定的属性在指定的对象或其原型链中，则in 运算符返回true。 ### Object 构造函数的方法 #### ES5 "),ya=(0,t.Uk)(" - Object.create(proto, [propertiesObject]) - 使用指定的原型对象和属性创建一个新对象。 "),xa=(0,t._)("div",{class:"custom-container tip"},[(0,t._)("p",{class:"custom-container-title"},"Object.create(null)"),(0,t._)("p",null,'使用create创建的对象，没有任何属性,把它当作一个非常纯净的map来使用，我们可以自己定义hasOwnProperty、toString方法,完全不必担心会将原型链上的同名方法覆盖掉 在我们使用for..in循环的时候会遍历对象原型链上的属性，使用create(null)就不必再对属性进行检查了 var ns = Object.create(null); if (typeof Object.create !== "function") { Object.create = function (proto) { function F() {} F.prototype = proto; return new F(); }; } console.log(ns) console.log(Object.getPrototypeOf(ns));')],-1),wa=(0,t.Uk)(" - Object.defineProperty() - 在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。 - 添加的属性不可修改 - 属性无法看到但是可以取到（可以枚举） - 描述符 - configurable(为true时属性描述符才能被改变，属性也能被删除。默认false) - enumerable(为true时出现在对象的枚举属性中，默认false)。 - 数据描述符和存取描述符二选一 - 数据描述符 - value(任意javascript值,默认undefined) - writable(为true时value能被修改，默认false) - 存取描述符 - get - 给属性提供 getter 的方法，访问属性时被执行 - 默认undefined - 没有参数传入，会传入this对象 - set - 给属性提供 setter 的方法，属性值修改时触发 - 默认undefined - 一个参数：新值 - 使用场景(`class的实现``vue的MVVM``mobx``装饰器``koa`) "),ja=(0,t.uE)(' ```js let obj={} let temp; // get第一种写法 Object.defineProperty(obj,&#39;name&#39;,{ get(){ return temp }, set(val){ temp=val; } }) // get第二种写法 let obj={ temp:&#39;&#39;, get PI(){ return this.temp }, set PI(val){ this.temp=val; } } obj.name=&#39;小明&#39; ``` #### ES6新增 - Object.is(val1,val2) - 与严格比较运算符（===）基本一致(区别：`+0不等于-0`和`NaN等于自身`。) ```js Object.is(+0, -0) // false Object.is(NaN, NaN) // true ``` - 参数 - value1，第一个需要比较的值。 - value2，第二个需要比较的值。 - 返回值 - 表示两个参数是否相同的`布尔值` 。 - 是不是非数 - window.isNaN() - 先把参数转化为数字类型,再判断是不是 NaN - 只要不是数字都满足 - Number.isNaN() - 先判断参数是不是数字类型,不是就返回 false, 是数字类型再进入判断是不是 NaN. - 只有数字中的NaN满足 ```js window.isNaN(&#39;abc&#39;);// true Number.isNaN(&#39;abc&#39;);// false ``` <ul><li><p>Object.assign(target, ...sources)</p><ul><li>合并对象</li><li>只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>\ntarget <span class="token comment">// {a:1, b:2, c:3}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>注意点 <ul><li>浅拷贝</li><li>同名属性覆盖</li><li>可以处理数组（会把数组视为对象）</li><li>如果复制的是个取值函数，会先求值再复制</li></ul></li><li>用途 <ul><li>为对象添加属性</li><li>为对象添加方法</li><li>克隆对象（只克隆对象自身的值）</li><li>合并对个对象</li><li>为属性指定默认值<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">DEFAULTS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\nlogLevel<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\noutputFormat<span class="token operator">:</span> <span class="token string">&#39;html&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">processContent</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\noptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">DEFAULTS</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li></ul></div></li><li><p>Object.getOwnPropertyDescriptors()</p><ul><li>返回指定对象所有自身属性（非继承属性）的描述对象。</li><li>用途 <ul><li>解决Object.assign()无法正确拷贝get属性和set属性的问题。（配合Object.defineProperties()方法）</li><li>配合Object.create()方法，将对象属性克隆到一个新对象。这属于浅拷贝。</li></ul></li></ul></li><li><p>__proto__属性</p><ul><li>用来读取或设置当前对象的prototype对象。</li><li>最好使用下面的<code>Object.setPrototypeOf()（写操作）</code>、<code>Object.getPrototypeOf()（读操作）</code>、<code>Object.create()（生成操作）</code>代替。</li></ul></li><li><p>Object.setPrototypeOf(object, prototype)</p><ul><li>设置对象的原型（即内部 [[Prototype]] 属性）。</li></ul></li><li><p>Object.getPrototypeOf(obj)</p><ul><li>读取一个对象的原型对象</li></ul></li></ul>',2),_a=(0,t.uE)('<ul><li>Object.keys(obj) <ul><li>返回一个包含所有给定对象自身可枚举属性名称的数组。</li><li>for...of循环</li></ul></li><li>Object.values(obj) <ul><li>返回一个包含所有给定对象自身可枚举属性值的数组。</li><li>for...of循环</li></ul></li><li>Object.entries(obj) <ul><li>返回一个包含所有给定对象自身可枚举属性键值的数组。</li><li>for...of循环</li><li>另一个用处：将对象转为真正的Map结构<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> baz<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap <span class="token comment">// Map { foo: &quot;bar&quot;, baz: 42 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li>Object.fromEntries() <ul><li>将一个键值对数组转为对象。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// { foo: &quot;bar&quot;, baz: 42 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>用处 <ul><li>将键值对的数据结构还原为对象（特别适合将 Map 结构转为对象）</li><li>配合URLSearchParams对象，将查询字符串转为对象。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">&#39;foo=bar&amp;baz=qux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// { foo: &quot;bar&quot;, baz: &quot;qux&quot; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li>Object.getOwnPropertySymbols(obj) <ul><li>返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</li></ul></li></ul><h3 id="object-实例的方法" tabindex="-1"><a class="header-anchor" href="#object-实例的方法" aria-hidden="true">#</a> Object 实例的方法</h3><ul><li>Object.prototype.hasOwnProperty() <ul><li>返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。</li></ul></li><li>Object.prototype.isPrototypeOf() <ul><li>返回一个布尔值，表示指定的对象是否在本对象的原型链中。</li></ul></li><li>Object.prototype.toString() <ul><li>返回对象的字符串表示。</li></ul></li><li>Object.prototype.valueOf() <ul><li>返回指定对象的原始值。</li></ul></li></ul><h2 id="内置对象-function-api" tabindex="-1"><a class="header-anchor" href="#内置对象-function-api" aria-hidden="true">#</a> 内置对象-Function API</h2><ul><li>实例的方法 <ul><li>Function.prototype.apply(thisArg, [argsArray]) <ul><li>在一个对象的上下文中应用另一个对象的方法</li><li>参数能够以数组形式传入。(数组元素将作为单独的参数传给 func 函数)</li></ul></li><li>Function.prototype.call(thisArg, arg1, arg2, ...) <ul><li>在一个对象的上下文中应用另一个对象的方法</li><li>参数能够以列表形式传入。</li></ul></li><li>Function.prototype.bind(thisArg[, arg1[, arg2[, ...]]]) <ul><li>在一个对象的上下文中应用另一个对象的方法</li></ul></li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>call()方法的作用和 apply() 方法区别</p><ul><li>call()方法接受的是<code>参数列表</code></li><li>apply()方法接受的是一个<code>参数数组</code></li></ul></div><div class="custom-container tip"><p class="custom-container-title">注</p><ul><li>利用apply展开数组</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// expected output: 7</span>\n<span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// expected output: 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><p>ES6语法：</p><h3 id="函数参数的默认值-es6" tabindex="-1"><a class="header-anchor" href="#函数参数的默认值-es6" aria-hidden="true">#</a> 函数参数的默认值[ES6]</h3><ul><li>参数默认值是惰性求值的(每次都重新计算默认值表达式的值)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\np <span class="token comment">// { x: 0, y: 0 }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>与解构赋值默认值结合使用</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 写法一</span>\n<span class="token keyword">function</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 写法二</span>\n<span class="token keyword">function</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>两种写法都对函数的参数设定了默认值，区别是写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。</li><li>如果传入undefined，将触发该参数等于默认值，null则没有这个效果。</li><li>指定了默认值后，length属性将失真。<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li>设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。</li><li>应用 <ul><li>可以指定某一个参数不得省略，如果省略就抛出一个错误</li><li>可以将参数默认值设为undefined，表明这个参数是可以省略的。</li></ul></li></ul><h3 id="rest-参数-es6" tabindex="-1"><a class="header-anchor" href="#rest-参数-es6" aria-hidden="true">#</a> rest 参数[ES6]</h3><ul><li>形式为<code>...变量名</code>，用于获取函数的多余参数</li><li>arguments是类数组，rest参数是真数组</li><li>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</li><li>函数的length属性，不包括 rest 参数。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// arguments变量的写法</span>\n<span class="token keyword">function</span> <span class="token function">sortNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// rest参数的写法</span>\n<span class="token keyword">const</span> <span class="token function-variable function">sortNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numbers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token comment">// 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="函数内严格模式" tabindex="-1"><a class="header-anchor" href="#函数内严格模式" aria-hidden="true">#</a> 函数内严格模式</h3><ul><li>规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</li></ul><h3 id="函数的name属性" tabindex="-1"><a class="header-anchor" href="#函数的name属性" aria-hidden="true">#</a> 函数的name属性</h3><ul><li>函数的name属性，返回该函数的函数名。（ES6才将其写入了标准）</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nfoo<span class="token punctuation">.</span>name <span class="token comment">// &quot;foo&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>如果将一个匿名函数赋值给一个变量</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// ES5</span>\nf<span class="token punctuation">.</span>name <span class="token comment">// &quot;&quot;</span>\n<span class="token comment">// ES6</span>\nf<span class="token punctuation">.</span>name <span class="token comment">// &quot;f&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3><ul><li>一个参数可以省略圆括号</li><li>可以省略return和{}，如果返回的是一个对象，要用小括号包裹起来</li><li>用处 <ul><li>简化回调函数<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 正常函数写法</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 箭头函数写法</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul></li><li>注意点 <ul><li>this看定义</li><li>不可以当作构造函数(就是不可以使用new命令)</li><li>没有arguments,可以用 rest 参数代替。</li></ul></li><li>不适用的场合 <ul><li>定义对象的方法，且该方法内部包括this。</li><li>需要动态this的时候</li><li>函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值</li></ul></li><li>嵌套的箭头函数</li></ul><h3 id="尾调用优化" tabindex="-1"><a class="header-anchor" href="#尾调用优化" aria-hidden="true">#</a> 尾调用优化</h3><ul><li>指某个函数的最后一步是调用另一个函数。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>尾调用优化 <ul><li>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</li></ul></li><li>尾递归 <ul><li>尾调用自身，就称为尾递归。</li><li>递归非常耗费内存，很容易发生“栈溢出”错误。对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</li><li>ES6规定所有实现必须部署“尾调用优化”。</li></ul></li></ul><h3 id="函数参数的尾逗号" tabindex="-1"><a class="header-anchor" href="#函数参数的尾逗号" aria-hidden="true">#</a> 函数参数的尾逗号</h3><ul><li>允许函数的最后一个参数有尾逗号。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clownsEverywhere</span><span class="token punctuation">(</span>\n  <span class="token parameter">param1<span class="token punctuation">,</span>\n  param2<span class="token punctuation">,</span></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n\n<span class="token function">clownsEverywhere</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="delete-操作符" tabindex="-1"><a class="header-anchor" href="#delete-操作符" aria-hidden="true">#</a> delete 操作符</h3><ul><li>delete expression <ul><li>断开引用来间接</li><li>所有情况都返回true，除非属性是一个自己不可配置的属性</li></ul></li></ul>',36),Ea=(0,t.Uk)(' ```js delete object.property delete object[\'property\'] ``` :::tip 注意 - 如果删除的属性不存在，delete不会起作用，但仍会返回true - delete操作只会在自身的属性上起作用(不会删除原型链上的属性) - 删除一个数组元素时，数组的长度不受影响 ```js var trees = ["redwood","bay","cedar","oak","maple"]; delete trees[3]; if (3 in trees) { // 这里不会执行 } ``` ::: '),Ua=(0,t._)("h2",{id:"面试题",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#面试题","aria-hidden":"true"},"#"),(0,t.Uk)(" 面试题")],-1),Wa=(0,t.uE)(' ### 写一个能遍历对象和数组的`forEach`函数 <p>遍历数组使用<code>forEach</code>，而遍历对象使用<code>for in</code>，但是在实际开发中，可以使用一个函数就遍历两者，jquery 就有这样的函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> key\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 准确判断是不是数组</span>\n        obj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">fn</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 不是数组就是对象</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            \t\t\t\t\t\t\t       \t\t   <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">fn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token comment">// 注意，这里参数的顺序换了，为了和对象的遍历格式一致</span>\n<span class="token function">forEach</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span>\n<span class="token function">forEach</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',3),Na=(0,t.Uk)(" ### 实现一个深拷贝 ```js function deepCopy(obj){ //递归跳出去的条件，不加的话就相当于死循环 if(typeof obj!='object'){ return obj; } var newObj; if(obj instanceof Array){ newObj=[]; }else{ newObj={}; } //将obj身上的所有属性复制到newObj身上 for(var attr in obj){ //自己调用自己 （递归） newObj[attr]=deepCopy(obj[attr]); } return newObj; }; ``` "),Oa=(0,t.uE)('<h3 id="settimeout设置为0有什么作用" tabindex="-1"><a class="header-anchor" href="#settimeout设置为0有什么作用" aria-hidden="true">#</a> setTimeout设置为0有什么作用？</h3><ul><li>设为0，实际上浏览器默认是4</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> fuc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fuc<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fuc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fuc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//1</span>\n<span class="token comment">//2</span>\n<span class="token comment">//3</span>\n<span class="token comment">//3</span>\n<span class="token comment">//3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>虽然设置为0秒后执行任务，实际上是大于0秒才执行的。可是这有什么用呢？</p><p>用处就在于我们可以改变任务的执行顺序！因为浏览器会在执行完当前任务队列中的任务，再执行setTimeout队列中积累的的任务。</p><p>通过设置任务在延迟到0s后执行，就能改变任务执行的先后顺序，延迟该任务发生，使之异步执行。</p>',6),Sa={render:function(n,s){const a=(0,t.up)("RouterLink"),Sa=(0,t.up)("mark-check"),Aa=(0,t.up)("mark-box"),Pa=(0,t.up)("absolute-box"),qa=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("nav",e,[(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#变量"},{default:(0,t.w5)((()=>[l])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#类型"},{default:(0,t.w5)((()=>[o])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#显示类型转换"},{default:(0,t.w5)((()=>[c])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#隐式类型转换"},{default:(0,t.w5)((()=>[u])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#二进制和八进制表示法-es6"},{default:(0,t.w5)((()=>[i])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#number-api-es6-全局方法移到了number对象上"},{default:(0,t.w5)((()=>[r])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#math对象"},{default:(0,t.w5)((()=>[k])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#运算符"},{default:(0,t.w5)((()=>[d])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#json"},{default:(0,t.w5)((()=>[b])),_:1})])])]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#原型和原型链"},{default:(0,t.w5)((()=>[m])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#构造函数"},{default:(0,t.w5)((()=>[g])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#原型"},{default:(0,t.w5)((()=>[f])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#原型链"},{default:(0,t.w5)((()=>[h])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#原型链继承"},{default:(0,t.w5)((()=>[v])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#zepto-或其他框架-源码中如何使用原型链"},{default:(0,t.w5)((()=>[y])),_:1})])])]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#作用域和闭包"},{default:(0,t.w5)((()=>[x])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#变量提升"},{default:(0,t.w5)((()=>[w])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#this"},{default:(0,t.w5)((()=>[j])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#作用域链"},{default:(0,t.w5)((()=>[_])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#闭包"},{default:(0,t.w5)((()=>[E])),_:1})])])]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#异步"},{default:(0,t.w5)((()=>[U])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#什么是异步"},{default:(0,t.w5)((()=>[W])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#异步的实现机制-以及对单线程的理解"},{default:(0,t.w5)((()=>[N])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#异步的问题和解决方案"},{default:(0,t.w5)((()=>[O])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#同步和异步的区别"},{default:(0,t.w5)((()=>[S])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#关于settimeout的笔试题"},{default:(0,t.w5)((()=>[A])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#前端使用异步的场景"},{default:(0,t.w5)((()=>[P])),_:1})])])]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#内置对象-正则表达式"},{default:(0,t.w5)((()=>[q])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#正则对象"},{default:(0,t.w5)((()=>[C])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#正则api"},{default:(0,t.w5)((()=>[z])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#字符串的正则方法"},{default:(0,t.w5)((()=>[I])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#规则"},{default:(0,t.w5)((()=>[F])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#字符类"},{default:(0,t.w5)((()=>[M])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#量词"},{default:(0,t.w5)((()=>[T])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#捕获组"},{default:(0,t.w5)((()=>[D])),_:1})])])]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#内置对象-数组常用-api"},{default:(0,t.w5)((()=>[R])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#数组自带方法"},{default:(0,t.w5)((()=>[$])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#扩展运算符-数组-es6"},{default:(0,t.w5)((()=>[J])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#将空位转为undefined-es6"},{default:(0,t.w5)((()=>[B])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#查找"},{default:(0,t.w5)((()=>[L])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#匹配"},{default:(0,t.w5)((()=>[Y])),_:1})])])]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#内置对象-对象常用-api"},{default:(0,t.w5)((()=>[X])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#属性"},{default:(0,t.w5)((()=>[V])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#object-实例的方法"},{default:(0,t.w5)((()=>[H])),_:1})])])]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#内置对象-function-api"},{default:(0,t.w5)((()=>[Z])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#函数参数的默认值-es6"},{default:(0,t.w5)((()=>[G])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#rest-参数-es6"},{default:(0,t.w5)((()=>[Q])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#函数内严格模式"},{default:(0,t.w5)((()=>[K])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#函数的name属性"},{default:(0,t.w5)((()=>[nn])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#箭头函数"},{default:(0,t.w5)((()=>[sn])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#尾调用优化"},{default:(0,t.w5)((()=>[an])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#函数参数的尾逗号"},{default:(0,t.w5)((()=>[tn])),_:1})]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#delete-操作符"},{default:(0,t.w5)((()=>[pn])),_:1})])])]),(0,t._)("li",null,[(0,t.Wm)(a,{to:"#面试题"},{default:(0,t.w5)((()=>[en])),_:1}),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Wm)(a,{to:"#settimeout设置为0有什么作用"},{default:(0,t.w5)((()=>[ln])),_:1})])])])])]),on,cn,(0,t.Wm)(Sa,{id:"zhi"}),un,(0,t.Wm)(Sa,{id:"yinyong"}),rn,(0,t.Wm)(Sa,{id:"typeof"}),kn,(0,t._)("ul",null,[(0,t._)("li",null,[dn,(0,t.Wm)(Sa,{id:"zhuanhuan"}),bn]),mn]),gn,(0,t._)("ul",null,[(0,t._)("li",null,[fn,hn,(0,t.Wm)(Sa,{id:"stringzhuanhuan"}),vn]),yn]),xn,(0,t.Wm)(Sa,{id:"yinshizhuanhuan"}),(0,t.Wm)(Aa,null,{default:(0,t.w5)((()=>[wn])),_:1}),jn,(0,t.Wm)(Pa,null,{default:(0,t.w5)((()=>[_n])),_:1}),En,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",Un,[Wn,(0,t.Wm)(qa)]),Nn]),On,Sn]),(0,t._)("table",null,[An,(0,t._)("tbody",null,[(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",Pn,[qn,(0,t.Wm)(qa)])]),Cn,zn]),(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",In,[Fn,(0,t.Wm)(qa)])]),Mn,Tn]),(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",Dn,[Rn,(0,t.Wm)(qa)])]),$n,Jn]),(0,t._)("tr",null,[(0,t._)("td",null,[(0,t._)("a",Bn,[Ln,(0,t.Wm)(qa)])]),Yn,Xn])])]),Vn,(0,t.Wm)(Sa,{id:"prototype"}),(0,t.Wm)(Aa,null,{default:(0,t.w5)((()=>[Hn])),_:1}),Zn,(0,t.Wm)(Sa,{id:"extend"}),Gn,(0,t.Wm)(Sa,{id:"this"}),Qn,(0,t._)("ul",null,[Kn,(0,t._)("li",null,[ns,(0,t.Wm)(Sa,{id:"bibao1å"}),ss]),as]),ts,(0,t.Wm)(Sa,{id:"yibu"}),ps,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",es,[ls,(0,t.Wm)(qa)])]),(0,t._)("li",null,[(0,t._)("a",os,[cs,(0,t.Wm)(qa)])]),(0,t._)("li",null,[(0,t._)("a",us,[is,(0,t.Wm)(qa)])]),(0,t._)("li",null,[(0,t._)("a",rs,[ks,(0,t.Wm)(qa)])]),(0,t._)("li",null,[(0,t._)("a",ds,[bs,(0,t.Wm)(qa)])])]),ms,(0,t._)("img",{src:n.$withBase("/img/三种模式.jpg"),alt:"foo"},null,8,gs),fs,(0,t.Wm)(Sa,{id:"date"}),hs,(0,t.Wm)(Sa,{id:"date2"}),vs,(0,t.Wm)(Sa,{id:"arrayApi"}),ys,xs,(0,t.Wm)(Sa,{id:"isarray"}),ws,(0,t.Wm)(Sa,{id:"from"}),js,(0,t.Wm)(Sa,{id:"of"}),_s,(0,t.Wm)(Sa,{id:"concat"}),Es,(0,t.Wm)(Sa,{id:"join"}),Us,(0,t.Wm)(Sa,{id:"slice"}),Ws,(0,t.Wm)(Sa,{id:"unshift"}),Ns,(0,t.Wm)(Sa,{id:"push"}),Os,(0,t.Wm)(Sa,{id:"shift"}),Ss,(0,t.Wm)(Sa,{id:"pop"}),As,(0,t.Wm)(Sa,{id:"splice"}),Ps,(0,t.Wm)(Sa,{id:"sort"}),qs,(0,t.Wm)(Sa,{id:"reverse"}),Cs,(0,t.Wm)(Sa,{id:"map"}),zs,(0,t.Wm)(Sa,{id:"foreach"}),Is,(0,t.Wm)(Sa,{id:"reduce"}),Fs,(0,t.Wm)(Sa,{id:"checkQuchong"}),Ms,(0,t.Wm)(Sa,{id:"shaixuan"}),Ts,(0,t.Wm)(Sa,{id:"copyWithin"}),Ds,(0,t.Wm)(Sa,{id:"find"}),Rs,(0,t.Wm)(Sa,{id:"findIndex"}),$s,(0,t.Wm)(Sa,{id:"indexOfqubie"}),Js,(0,t.Wm)(Sa,{id:"fill"}),Bs,(0,t.Wm)(Sa,{id:"entries"}),Ls,(0,t.Wm)(Sa,{id:"includes"}),Ys,(0,t.Wm)(Sa,{id:"flat"}),Xs,Vs,Hs,(0,t.Wm)(Sa,{id:"..."}),Zs,(0,t.Wm)(Sa,{id:"zhankai"}),Gs,(0,t._)("ul",null,[(0,t._)("li",null,[Qs,(0,t.Wm)(Sa,{id:"fuzhishuzu"}),Ks])]),(0,t.Wm)(Sa,{id:"hebingshuzu"}),na,(0,t.Wm)(Sa,{id:"kuozhanhefromqubie"}),sa,aa,ta,(0,t.Wm)(Sa,{id:"stringapi"}),pa,(0,t.Wm)(Sa,{id:"stringconcat"}),ea,la,(0,t.Wm)(Sa,{id:"replace"}),oa,(0,t.Wm)(Sa,{id:"search"}),(0,t._)("ul",null,[(0,t._)("li",null,[ca,ua,(0,t.Wm)(Sa,{id:"match"})]),ia]),ra,(0,t.Wm)(Sa,{id:"stringFormat"}),ka,da,ba,ma,ga,(0,t.Wm)(Sa,{id:"shuxingming"}),fa,(0,t.Wm)(Sa,{id:"shuxingbianli"}),ha,(0,t.Wm)(Sa,{id:"objectin"}),va,(0,t.Wm)(Sa,{id:"create"}),ya,xa,(0,t.Wm)(Sa,{id:"defineProperty"}),wa,(0,t.Wm)(Sa,{id:"getset"}),ja,(0,t.Wm)(Sa,{id:"objectkeys"}),_a,(0,t.Wm)(Sa,{id:"objectdelete"}),Ea,Ua,(0,t.Wm)(Sa,{id:"view1"}),Wa,(0,t.Wm)(Sa,{id:"view2"}),Na,(0,t.Wm)(Sa,{id:"view3"}),Oa],64)}}}}]);