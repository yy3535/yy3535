"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1654],{6025:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-e5a54d68",path:"/Frontend/js/designpatterns/",title:"前端设计模式",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"面对对象",slug:"面对对象",children:[]},{level:2,title:"设计原则",slug:"设计原则",children:[]},{level:2,title:"工厂模式",slug:"工厂模式",children:[{level:3,title:"简单工厂模式",slug:"简单工厂模式",children:[]},{level:3,title:"工厂方法模式",slug:"工厂方法模式",children:[]},{level:3,title:"抽象工厂模式",slug:"抽象工厂模式",children:[]},{level:3,title:"总结工厂模式",slug:"总结工厂模式",children:[]}]},{level:2,title:"单例模式",slug:"单例模式",children:[]},{level:2,title:"适配器模式",slug:"适配器模式",children:[]},{level:2,title:"装饰器模式",slug:"装饰器模式",children:[]},{level:2,title:"代理模式",slug:"代理模式",children:[]},{level:2,title:"外观模式",slug:"外观模式",children:[]},{level:2,title:"观察者模式(监听模式)",slug:"观察者模式-监听模式",children:[]}],filePathRelative:"Frontend/js/designpatterns/README.md",git:{updatedTime:1630227828e3,contributors:[]}}},213:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var e=a(6252);const p=(0,e._)("h1",{id:"前端设计模式",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#前端设计模式","aria-hidden":"true"},"#"),(0,e.Uk)(" 前端设计模式")],-1),l={class:"table-of-contents"},t=(0,e.Uk)("面对对象"),r=(0,e.Uk)("设计原则"),c=(0,e.Uk)("工厂模式"),u=(0,e.Uk)("简单工厂模式"),o=(0,e.Uk)("工厂方法模式"),i=(0,e.Uk)("抽象工厂模式"),b=(0,e.Uk)("总结工厂模式"),m=(0,e.Uk)("单例模式"),k=(0,e.Uk)("适配器模式"),d=(0,e.Uk)("装饰器模式"),g=(0,e.Uk)("代理模式"),f=(0,e.Uk)("外观模式"),w=(0,e.Uk)("观察者模式(监听模式)"),y=(0,e.uE)('<h2 id="面对对象" tabindex="-1"><a class="header-anchor" href="#面对对象" aria-hidden="true">#</a> 面对对象</h2><ol><li><p>把客观对象属性抽象成属性和操作，隐藏内部属性</p></li><li><p>把同一个类型的对象的属性和操作绑在一起，变成类</p></li><li><p>可实现继承和操作</p><ul><li>面对对象的分析 OOA</li><li>面对对象的设计 OOD</li><li>面对对象的变成 OOP</li></ul></li><li><p>类</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> eat </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>food<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> dog<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&quot;狗&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&quot;肉&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>继承</p><p>父类公用方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;狗&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;汪汪汪&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> dog<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&quot;肉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;猫&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;喵喵喵&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> cat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&quot;鱼&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncat<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li><li><p>封装</p></li></ol><ul><li>减少耦合，部分不让外部访问，管理接口权限</li><li>带_开头的都是私有的，业界约定，但es6语法尚不支持，typescript有这种特性</li></ul><ol><li>安装</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm install -g typescript\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>使用</li></ol><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//2.ts</span>\n<span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span>user<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//类型限制</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;hello&#39;</span><span class="token operator">+</span>user<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> user<span class="token operator">=</span><span class="token string">&#39;zfpx&#39;</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greeting</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> user<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greeting</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编译成js</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>tsc 2.ts//会出来一个2.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>特点</p><ul><li><p>类型限制，如上</p></li><li><p>封装</p><p>public 类内和类外都可使用</p><p>protected 可在类内和子类中使用</p><p>private 只可在类内使用</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//2.ts</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  <span class="token keyword">public</span> name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token keyword">protected</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> money<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token operator">=</span>money<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> num<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>money<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">=</span>num<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//在子类中可以访问父类的公有属性</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我的名字叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//在子类中可以访问父类的protected属性</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我的名字叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我的名字叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>money<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token comment">//出错</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;zfpx&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//在其他类中可访问公有属性</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//可访问</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment">//报错</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token comment">//报错，在类外</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></li></ul><ol start="4"><li><p>多态</p><p>同一个函数名接收不同参数(暂时无法实现，会报错)</p><p>同一个函数名在子类中实现不同功能</p></li></ol><h2 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则" aria-hidden="true">#</a> 设计原则</h2><ul><li>按什么标准来实现功能。</li><li>功能相同，有不同的设计方法。</li><li>需求不断变化，设计的作用就会体现出来。</li></ul><p>五大设计原则</p><ul><li><p>单一职责原则</p><p>一个程序只做一件事，否则拆分</p></li><li><p>开放封闭原则</p><p>对扩展开放，对修改封闭，不能改老代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//request.js</span>\n<span class="token keyword">function</span> <span class="token function">checkStatus</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>code<span class="token operator">&gt;=</span><span class="token number">200</span><span class="token operator">&amp;&amp;</span>response<span class="token punctuation">.</span>code<span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;响应结果不正确&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">parseJSON</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token doc-comment comment">/**\n*1.判断相应的状态码是不是2xx，如果不是的话也认为是错误\n*2.把相应体转化成JSON对象\n*/</span>\n  <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>options<span class="token punctuation">)</span>\n  \t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>checkStatus<span class="token punctuation">)</span>\n  \t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parseJSON<span class="token punctuation">)</span>\n  \t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>checkCode<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>里氏替换原则</p><ul><li><p>子类的函数能覆盖父类同名函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>\n  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;鱼&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;骨头&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>父类能出现的地方，子类也能出现</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//应用场景\n//React 虚拟DOM,hello和h1都是子类，所以都能放\nReact.render(&lt;Hello/&gt;);\nReact.render(&lt;h1/&gt;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>js使用比较少</p></li></ul></li><li><p>接口隔离原则</p><ul><li><p>保持接口独立，接口单一原则，JS中没有接口，使用较少，ts中有接口</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//4.ts\ninterface Person{\n  firstName:string\n  lastName:string\n}\ninterface Fly{\n  swing:number;\n}\nfunction greeting(obj:Person){//加上类型检查会对传入的对象作检查，类型不对或者缺少会报错\n  console.log(obj.firstName+obj.lastName)\n}\nlet p={firstName:&#39;张&#39;,lastName:&#39;三&#39;}\ngreeting(p)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul></li><li><p>依赖反转原则</p><ul><li><p>依赖抽象而不依赖实现(尽量依赖父类而不依赖子类)，能依赖Person不依赖Women</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">gender</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token operator">=</span>gender<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;买ipad&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">gender</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token operator">=</span>gender<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;买包&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> man<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> women<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nman<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwoman<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li></ul></li></ul><h2 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式" aria-hidden="true">#</a> 工厂模式</h2><p><strong>UML</strong></p><p>标准建模语言，其中一个最重要的就是<strong>类图</strong>和<strong>对象图</strong></p><p><strong>类图</strong></p><p>描述类的关系(依赖，泛华(继承))</p><h3 id="简单工厂模式" tabindex="-1"><a class="header-anchor" href="#简单工厂模式" aria-hidden="true">#</a> 简单工厂模式</h3><p>+public</p><p>-private</p><p>箭头空三角 子类继承父类</p><p><img src="/img/简单工厂.png" alt="简单工厂模式"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Plant</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">grow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我正在生长~~~~&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Plant</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>flavour</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>flavour<span class="token operator">=</span>flavour<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Orange</span> <span class="token keyword">extends</span> <span class="token class-name">Plant</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>flavour</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>flavour<span class="token operator">=</span>flavour<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>直接new有什么缺点：</p><ol><li>耦合(需要知道我要的类在哪里，得知道怎么做)</li><li>依赖具体实现(apple类永远不能修改删掉)</li></ol><p>简单工厂模式：(用一个类做一个端菜的服务员)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>\n    \t<span class="token keyword">case</span> <span class="token string">&#39;apple&#39;</span><span class="token operator">:</span>\n    \t\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">&#39;苹果&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;甜&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \t<span class="token keyword">case</span> <span class="token string">&#39;orange&#39;</span><span class="token operator">:</span>\n    \t\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span><span class="token string">&#39;橘子’，酸&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \t<span class="token keyword">default</span><span class="token operator">:</span>\n    \t\t<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;你要的东西没有&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> apple<span class="token operator">=</span>Factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span>flavour<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> orange<span class="token operator">=</span>Factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orange<span class="token punctuation">.</span>flavour<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>好处：</p><ol><li>（有一天橘子没有了，可以换成柠檬，但客户并不知道）隐藏实现，需求修改后只需要改更少的一部分</li><li>外部简单，内部灵活</li></ol><p>经典应用场景：</p><ol><li><p>jQuery</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">jQuery</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> elements<span class="token operator">=</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> length<span class="token operator">=</span>elements<span class="token operator">?</span>elements<span class="token punctuation">.</span>length<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">=</span>length<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nwindow<span class="token punctuation">.</span><span class="token function-variable function">$</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token comment">//调方法，返回一个jquery实例</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>react</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//虚拟DOM</span>\n<span class="token keyword">let</span> h1<span class="token operator">=</span><span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">&quot;title&quot;</span><span class="token operator">&gt;</span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">//babel编译后变成：let h1=React.createElement(&#39;h1&#39;,{className:&#39;title&#39;},&#39;hello&#39;);</span>\n<span class="token comment">//h1就是虚拟DOM</span>\n<span class="token keyword">class</span> <span class="token class-name">VNode</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>children</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token operator">=</span>tagName<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>attrs<span class="token operator">=</span>attrs<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token operator">=</span>children<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>children</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>children<span class="token punctuation">)</span><span class="token comment">//返回一个VNode实例，有一天VNode名字改了，外部依然是调用createElement</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ol><h3 id="工厂方法模式" tabindex="-1"><a class="header-anchor" href="#工厂方法模式" aria-hidden="true">#</a> 工厂方法模式</h3><p>核心工厂不再负责所有产品的创建，而是将具体创建交给子类去做</p><p>原因：</p><ul><li>简单工厂模式不符合开闭原则(对修改关闭，对扩展开放，会改到老代码)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//plant.js</span>\n<span class="token keyword">class</span> <span class="token class-name">Plant</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nmodule<span class="token punctuation">.</span>exports<span class="token operator">=</span>Plant<span class="token punctuation">;</span>\n<span class="token comment">//apple.js</span>\n<span class="token keyword">let</span> Plant<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./plant&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> Factory<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./factory&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Plant</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>flavour</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>flavour<span class="token operator">=</span>flavour<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">AppleFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">&#39;苹果&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;甜&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nmodule<span class="token punctuation">.</span>exports<span class="token operator">=</span>AppleFactory<span class="token punctuation">;</span>\n<span class="token comment">//orange.js</span>\n<span class="token keyword">let</span> Plant<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./plant&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> Factory<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./factory&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">Orange</span> <span class="token keyword">extends</span> <span class="token class-name">Plant</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>flavour</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>flavour<span class="token operator">=</span>flavour<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">OrangeFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span><span class="token string">&#39;桔子&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;酸&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nmodule<span class="token punctuation">.</span>exports<span class="token operator">=</span>OrangeFactory<span class="token punctuation">;</span>\n<span class="token comment">//factory.js</span>\n<span class="token comment">//工厂一般是接口，规定子类必须实现的方法</span>\n<span class="token comment">//依赖抽象而不依赖实现</span>\n<span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>\n  <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nmodule<span class="token punctuation">.</span>exports<span class="token operator">=</span>Factory<span class="token punctuation">;</span>\n\n<span class="token comment">//接口一般会跟配置对象配合</span>\n<span class="token keyword">let</span> settings<span class="token operator">=</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;apple&#39;</span><span class="token operator">:</span>AppleFactory<span class="token punctuation">,</span>\n  <span class="token string">&#39;orange&#39;</span><span class="token operator">:</span>OrangeFactory\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> apple<span class="token operator">=</span>settings<span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> orange<span class="token operator">=</span>settings<span class="token punctuation">[</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><blockquote><p>什么是接口？</p></blockquote><p>接口只有方法定义，没有具体实现，如果一个类要实现该接口，就必须实现该接口中的所有方法</p><h3 id="抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式" aria-hidden="true">#</a> 抽象工厂模式</h3><p><img src="/img/抽象工厂模式1.png" alt=""></p><p><img src="/img/抽象工厂模式2.png" alt=""></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//1.method.js</span>\n<span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">AppleFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>\n  <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//创建按钮</span>\n  \t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AppleButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">createIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//创建图标</span>\n  \t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AppleIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">WindowsFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>\n  <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//创建按钮</span>\n  \t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">createIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//创建图标</span>\n  \t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Icon</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">AppleIcon</span><span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">绘制苹果的图标</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">WindowsIcon</span><span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">绘制Windows的图标</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Button</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">AppleButton</span><span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">绘制苹果的按钮</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">WindowsButton</span><span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">绘制windows的按钮</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> windowsFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WindowsFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindowsFactory<span class="token punctuation">.</span><span class="token function">createIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwindowsFactory<span class="token punctuation">.</span><span class="token function">createButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>使用场景：工厂里有多种产品，而且生产过程都是一套一套的。</p><h3 id="总结工厂模式" tabindex="-1"><a class="header-anchor" href="#总结工厂模式" aria-hidden="true">#</a> 总结工厂模式</h3><ol><li><p>简单工厂</p><p>一般就是一个函数返回产品的实例</p></li><li><p>工厂方法模式</p><p>多了工厂类，要想创建产品，需要先创建此工厂的实例，再通过这个工厂返回产品实例</p></li><li><p>抽象工厂模式</p><p>前两种只能创建一种产品，这种一个工厂可批量创建产品</p></li></ol><blockquote><p>实际工作中第一种用的最多，2、3种很少见到和用到。</p></blockquote><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h2><p><img src="/img/单例模式.png" alt=""></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//es6的单例写法</span>\n<span class="token keyword">class</span> <span class="token class-name">Window</span><span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//Window.getInstance()是类上的方法，只可以通过类来访问，不能通过实例来访问</span>\n\n<span class="token comment">//es5的单例写法</span>\n<span class="token keyword">function</span> <span class="token function">Window</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Window</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//这是实例可访问的方法</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nWindow<span class="token punctuation">.</span>getInstance<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通过闭包实现只能通过Window.getInstance访问的方法</span>\n  <span class="token keyword">let</span> instance<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> w1<span class="token operator">=</span>Window<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> w2<span class="token operator">=</span>Window<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><strong>两个问题</strong></p><ol><li><p>客户端 就是使用这个类的使用者必须知道这是一个单例的类，必须主动调用Instance方法</p></li><li><p>并不能真正阻止客户端直接new Window</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let w3=new Window();\nlet w4=new Window();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><p><strong>解决问题</strong></p><p>能够直接new Window，并且是个单例的。</p><ol><li>透明单例：</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let Window=(function(){\n  let window;\n  let Window=function(name){\n    if(window){\n      return window;\n    }else{\n      this.name=name;\n      return (window=this);\n    }\n  }\n  return Window;\n})();\n//new 关键字 创建一个对象，this指向这个对象，执行代码，返回this\nlet w1=new Window();\nlet w2=new Window();\nconsole.log(w1===w2);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ol start="2"><li><p>单例改进</p><p>透明单例违反了单一职责原则，应该把类的实例的创建逻辑和单例逻辑分开</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function Window(name){\n  this.name=name;\n}\nWindow.prototype.getName=function(){\n  console.log(this.name);\n}\nlet CreateWindow=(function(){\n  let instance;\n  return function(name){\n    if(!instance){\n      instance=new Window(name);\n    }\n    return instance;\n  }\n})();\nlet w1=new CreateSingle(&#39;zfpx1&#39;);//加不加new一样\nlet w2=new CreateSingle(&#39;zfpx2&#39;);\nconsole.log(w1===w2)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>单例改进</p><p>因为new Window(name)写死了，不能直接添加其他的构造函数的单例</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function Window(name){\n  this.name=name;\n}\nWindow.prototype.getName=function(){\n  console.log(this.name);\n}\nfunction Dialog(title,content){\n  this.title=title;\n  this.content=content;\n}\nlet CreateSingle=function(Constructor){\n  let instance;\n  return function(name){\n    if(!instance){\n    \tConstructor.apply(this,arguments);//让Constructor执行时里面的this指向执行CreateSingle时new出来的对象\n    \tObject.setPrototypeOf(this,Constructor.prototype);\n    \t//这句是this.__proto__=Constructor.prototype的简写\n    \t//如果不添加这句，w1就无法访问到Window原型上的getName方法，因为this的原型指向Function.prototype,即原型继承\n      instance=this;\n      //或者省略以上改成一句instance=new Constructor(...arguments);也可以\n    }\n    return instance;\n  }\n};\nlet createWindow=CreateSingle(Window);\nlet w1=createWindow(&#39;zfpx1&#39;);//无论是new还是直接调用，都会创建一个this指针\nlet w2=createWindow(&#39;zfpx2&#39;);\nconsole.log(w1===w2)//true\n\nlet createDialog=CreateSingle(Dialog);\nlet w1=createDialog(&#39;zfpx1&#39;);\nlet w2=createDialog(&#39;zfpx2&#39;);\nconsole.log(w1===w2)//true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></li><li><p>命名空间(单例的一种)</p><p>能解决：</p><ul><li>变量名冲突</li><li>复杂层次对象的可读性要求</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//例如：jquery并没有把变量都声明在window上，而是都挂在$对象 JQuery\n$.get()\n$.post()\n$.ajax()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let $={};\n$.define=function(namespace,fn){\n  let namespaces=namespace.split(&#39;.&#39;);\n  let fnName=namespaces.pop();\n  let current=$;\n  for(let i=0;i&lt;namespaces.length;i++){\n    let namespace=namespaces[i]//dom\n    if(!current[namespace]){\n      current[namespace]={};//{dom:{}}\n    }\n    current=current[namespace];\n  }\n  current[fnName]=fn;\n}\n$.define(&#39;dom.class.addClass&#39;,function(){\n  console.log(&#39;dom.class.addClass&#39;);\n});\n$.define(&#39;dom.attr&#39;,function(){\n  console.log(&#39;dom.attr&#39;);\n})\n$.define(&#39;string.trim&#39;,function(){\n  console.log(&#39;string.trim&#39;);\n})\n$.define(&#39;event.preventDefault&#39;,function(){\n  console.log(&#39;event.preventDefault&#39;);\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><strong>应用场景</strong></p><ol><li><p>jQuery</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if(window.jQuery!=null){\n  return window.jQuery;//一个页面只会有一个jquery实例\n}else{\n  //init~~~~~~\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>模态窗口</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;button id=&quot;show-btn&quot;&gt;显示登录框&lt;/button&gt;\n&lt;button id=&quot;hide-btn&quot;&gt;隐藏登录框&lt;/button&gt;\n&lt;script&gt;\n\tclass Login{\n    constructor(){\n      this.element=document.createElement(&#39;div&#39;);\n      this.element.innerHTML={\n        `\n        用户名 &lt;input name=&quot;username&quot;/&gt;\n        密码 &lt;input name=&quot;password&quot;/&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;\n        `\n      }\n      this.element.style.cssText=`width:100px;height:100px;position:absolute;left:50%;top:50%;margin-top:-50px;margin-left:-50px; display:none;`\n      document.body.appendChild(this.element);\n    }\n    show(){\n      this.element.style.display=&#39;block&#39;;\n    }\n    hide(){\n      this.element.style.display=&#39;none&#39;;\n    }\n    static getInstance(){\n      if(!this.instance){\n        this.instance=new Login();\n      }\n      return this.instance;\n    }\n\t}\n\tdocument.getElementById(&quot;show-btn).addEventListener(&#39;click&#39;,function(){\n    Login.getInstance.show();\n\t})\n\tdocument.getElementById(&quot;hide-btn).addEventListener(&#39;click&#39;,function(){\n    Login.getInstance.hide();\n\t})\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></li><li><p>Redux 整个应用只有一个仓库，整个仓库只有一个状态state</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function createStore(reducer){\n  let state;\n  let listeners=[];\n  function subscribe(listener){\n    listeners.push(listener);\n  }\n  function getState(){\n    return state;\n  }\n  function dispatch(action){\n    state=reducer(state,action);\n  }\n  return{\n    getState,\n    dispatch,\n    subscribe\n  }\n}\nlet reducer=function(){}\nlet store=createStore(reducer)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li><li><p>数据库连接池</p><p>本地创建与服务器数据库连接，取出数据后销毁。</p><p>连接池创建固定连接，省去创建和销毁的时间</p></li><li><p>缓存</p><p>缓存是为了提高性能的</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let express=require(&#39;express&#39;);\nlet bodyParser=require(&#39;body-parser&#39;);\nlet fs=require(&#39;fs&#39;);\nlet app=express();\napp.use(bodyParser.urlencoded({extended:true}))\napp.use(bodyParser.json())\nlet cache={};//缓存\n//返回某个用户的详情\napp.get(&#39;/user/:id&#39;,function(){\n  let id=req.params.id;\n  let user=cache[id];\n  if(uesr){\n    res.json(user);\n  }else{\n    fs.readFile(`./users/${id}.json`,&#39;utf8&#39;,function(err,data){\n      let user=JSON.parse(data);\n      cache[id]=user;\n      res.json(user);\n    })\n  }\n  \n})\n//写入某个用户详情\napp.get(&#39;/user&#39;,function(req,res){\n  let user=req.body;//{id:1,name:&#39;zfpx1&#39;,age:9}\n  fs.writeFile(`./users/${user.id}.json`,JSON.stringify(user),function(err){\n    res.json(user);\n  })\n})\napp.listen(8080);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></li><li><p>LRU缓存</p><p>用一个数组来存储数据，给每一个数据项标记一个访问时间戳</p><p>每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，并将新数据项的时间戳设置为0并插入到数组中</p><p>每次访问数组中的数据项的时候，将被访问的数据项的时间戳置为0</p><p>当数组空间已满时，将时间戳最大的数据项淘汰</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>class LRUCache{\n  constructor(capacity){\n    this.capacity=capacity;\n    this.members=[];\n  }\n  put(key,value){\n  \tlet oldestAge=-1;\n  \tlet oldestIndex=-1;\n    for(let i=0;i&lt;this.member.length;i++){\n      let member=this.members[i];\n      if(member.age&gt;oldestAge){\n        oldestAge=member.age;\n      \toldestIndex=i;\n      }\n      member.age++;\n    }\n    if(this.member.length&gt;=this.capacity){\n      this.members.splice(oldestIndex,1);\n    }\n    this.members.push({key,value,age:0})\n  }\n  get(key){\n    for(let i=0;i&lt;this.members.length;i++){\n      let member=this.members[i];//{key,value,age}\n      if(member.key===key){\n        member.age=0;\n        return member.value;\n      }\n    }\n    return -1;\n  }\n}\nlet cache=new LRUCache(3);\ncache.put(&#39;1&#39;,&#39;1&#39;);\ncache.put(&#39;2&#39;,&#39;2&#39;);\ncache.put(&#39;3&#39;,&#39;3&#39;);\nconsole.log(cache.get(&#39;2&#39;))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div></li></ol><h2 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式" aria-hidden="true">#</a> 适配器模式</h2><p><img src="/img/适配器模式.png" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//适配器\nclass Power{\n  charge(){\n    return &#39;220v&#39;;\n  }\n}\nclass Adaptor{\n  constructor(power){\n    this.power=power;\n  }\n  charge(){//此处可以改为xxx任意名字\n    let v=this.power.charge;\n    return `${v}=&gt;12v`;\n  }\n}\nclass Client{\n  constructor(){\n    this.adaptor=new Adaptor();\n  }\n  use(){\n    console,log(this.adaptor.charge())\n  }\n}\nlet client=new Client();\nclient.use();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//参数的适配\n//返回值的适配\nfunction ajax(options){\n  let defaultOptions={\n    method:&#39;GET&#39;,\n    dataType:&#39;json&#39;\n  }\n  for(let attr in options){\n    defaultOptions[attr]=options[attr]||defaultOptions[attr];//参数适配\n  }\n  console.log(defaultOptions);\n}\nfunction transform(str){\n  return JSON.parse(str)\n}\najax({\n  url:&#39;http://www.baidu.com&#39;,\n  method:&#39;POST&#39;,\n  success(str){\n    //服务器返回的是JSON字符串\n    let result=transform(str)//返回值适配\n  }\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//串行连续的读取三个文件的内容\nconst fs=require(&#39;fs&#39;);\nfunction promisify(fn){\n  return function(...args){\n    return new Promise(function(resolve,reject){\n      fn(...args,function(err,data){\n        if(err){\n          reject(err);\n        }else{\n          resolve(data)\n        }\n      })\n    })\n  }\n}\nlet readFile=promisify(fs.readFile);//需要promise时适配一个promise\n(awync function read(){\n  let one=await readFile(&#39;1.txt&#39;,&#39;utf8&#39;);\n  let two=await readFile(&#39;2.txt&#39;,&#39;utf8&#39;);\n  let three=await readFile(&#39;3.txt&#39;,&#39;utf8&#39;);\n  console.log(one,two,three)\n}){}();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//需要修改项目中所有的jquery方法为fetch\nwindow.$={//适配了原来所有的$.ajax，并且使用了fetch（老用法适配新用法）\n  ajax(options){\n    return fetch(options.url,{\n      method:options.type||&#39;GET&#39;,\n      body:JSON.stringify(options.data||{})\n    }).then(response=&gt;response.json());\n  }\n}\n$.ajax({\n  url,\n  type:&#39;POST&#39;,\n  dataType:&#39;json&#39;,\n  data:{id:1}\n}).then(function(data){\n  console.log(data);\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//Vue中使用案例\n&lt;body&gt;\n\t&lt;div id=&#39;root&#39;&gt;\n\t\t&lt;p&gt;{{name}}&lt;/p&gt;\n\t\t&lt;p&gt;{{upperName}}&lt;/p&gt;\n\t&lt;/div&gt;\n\t&lt;script&gt;\n\t\tlet vm=new Vue({\n      el:&#39;#root&#39;,\n      data:{\n        name:&#39;zfpx&#39;\n      },\n      computed:{\n        upperName(){\n          return this.name.toUpperCase();//老字符串适配成一个新的字符串\n        }\n      }\n\t\t})\n\t&lt;/script&gt;\n&lt;/body&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="装饰器模式" tabindex="-1"><a class="header-anchor" href="#装饰器模式" aria-hidden="true">#</a> 装饰器模式</h2><p>面向切面编程</p><p>给一个类增加功能，但不会改变类的实质，只是修饰作用。它比适配器模式更强大。他修饰的方法必须同名。</p><p>是将一个对象嵌入另一个对象之中，实际上相当于这个对象被另一个对象包装起来，形成一条包装链。请求随着这条链条依次传递到所有的对象，每个对象有处理这个请求的机会。</p><p><img src="/img/装饰器模式.png" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>class Duck{\n  constructor(name){\n    this.name=name;\n  }\n  eat(food){\n    console.log(`吃${food}`)\n  }\n}\nclass TangDuck{\n  constructor(name){\n    this.duck=new Duck(name)\n  }\n  eat(food){//必须同名,修饰上面的同名方法\n    this.duck.eat(food);\n    console.log(&#39;谢谢&#39;);\n  }\n}\nlet t=new TangDuck();\nt.eat(&#39;苹果&#39;);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//装饰器模式有时候会优于继承\nclass Coffee{\n  make(water){\n    return `${water}+咖啡`;\n  }\n  cost(){\n    return 10;\n  }\n}\nclass MilkCoffee{\n  constructor(parent){\n    this.parent=parent;\n  }\n  make(water){\n    return `${this.parent.make(water)+奶}`;\n  }\n  cost(){\n    return `${this.parent.cost()+2}`;\n  }\n}\nclass SugarCoffee{\n  constructor(parent){\n    this.parent=parent;\n  }\n  make(water){\n    return `${this.parent.make(water)+糖}`;\n  }\n}\nlet coffee=new Coffee();\nlet sugarCoffee=new sugarCoffee(coffee);\nlet milkCoffee=new MilkCoffee(sugarCoffee);\nmilkCoffee.make(&#39;水&#39;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><strong>AOP:</strong></p><p>AOP就是在函数执行之前或之后添加一些额外的逻辑，而不需要修改函数原来的功能。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Function.prototype.before=function(beforeFn){\n  let _this=this;\n  return function(){\n    beforeFn.apply(this,arguments);//继承beforeFn，调用beforeFn\n    _this.apply(this,arguments);//调用函数\n  }\n}\nFunction.prototype.after=function(afterFn){\n  let _this=this;\n  return function(){\n    _this.apply(this,arguments);//调用函数\n    afterFn.apply(this,arguments);//继承afterFn，调用afterFn\n  }\n}\nfunction buy(money,goods){\n  console.log(`花${money}元买${goods}`);\n}\nbuy=buy.before(function(){\n  console.log(&#39;向媳妇申请一块钱&#39;);\n})\nbuy=buy.after(function(){\n  console.log(&#39;向媳妇归还两毛钱&#39;);\n})\nbuy(0.8,&#39;盐&#39;)；\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><strong>应用场景</strong></p><ol><li>埋点：</li></ol><p>埋点分析，是网站分析的一种常用的数据采集方法。</p><p>ajax的请求拦截，koa中间件，redux中间件都是基于装饰器实现的。</p><ul><li><p>服务器端埋点</p></li><li><p>客户端埋点</p><ul><li><p>代码埋点(写死)</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//4.html\n&lt;body&gt;\n\t&lt;button data-name=&quot;watermelon&quot; id=&quot;watermelon&quot;&gt;西瓜&lt;/button&gt;\n\t&lt;button data-name=&quot;apple&quot; id=&quot;apple&quot;&gt;苹果&lt;/button&gt;\n\t&lt;script&gt;\n\t\tlet watermelon=document.getElementById(&#39;watermelon&#39;);\n\t\tlet apple=document.getElementById(&#39;apple&#39;);\n\t\tfunction click(){\n      console.log(&#39;你点击了&#39;+this.dataset.name);\n      let img=new Image();\n      img.src=&#39;http://localhost:3000/report?name=&#39;+this.dataset.name;\n\t\t}\n\t\tArray.from(document.querySelectorAll(&#39;button&#39;)).forEach(button=&gt;{\n      button.addEventListener(&#39;click&#39;,click);\n\t\t})\n\t&lt;/script&gt;\n&lt;/body&gt;\n//report.js\nlet express=require(&#39;express&#39;);\nlet app=express();\nlet goods={};\napp.get(&#39;/report&#39;,function(req,res){\n  let name=req.query.name;\n  if(goods[name]){\n    goods[name]++;\n  }else{\n    goods[name]=1\n  }\n  console.log(&#39;name&#39;,name);\n  res.json(goods);\n})\napp.get(&#39;/&#39;,function(req,res){\n  res.json(goods);\n})\napp.listen(3000);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div></li><li><p>自动化埋点(AOP，推荐)</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//点击统计\n//4.html\n&lt;body&gt;\n\t&lt;button data-name=&quot;watermelon&quot; id=&quot;watermelon&quot;&gt;西瓜&lt;/button&gt;\n\t&lt;button data-name=&quot;apple&quot; id=&quot;apple&quot;&gt;苹果&lt;/button&gt;\n\t&lt;script&gt;\n\t\tlet watermelon=document.getElementById(&#39;watermelon&#39;);\n\t\tlet apple=document.getElementById(&#39;apple&#39;);\n\t\tFunction.prototype.after=function(afterFn){\n      let _this=this;\n      return function(){\n        _this.apply(this,arguments);//调用函数\n        afterFn.apply(this,arguments);//继承afterFn，调用afterFn\n      }\n    }\n\t\tfunction click(){\n      console.log(&#39;你点击了&#39;+this.dataset.name);\n\t\t}\n\t\tclick=click.after(function(){\n      let img=new Image();\n      img.src=&#39;http://localhost:3000/report?name=&#39;+this.dataset.name;\n\t\t})\n\t\tArray.from(document.querySelectorAll(&#39;button&#39;)).forEach(button=&gt;{\n      button.addEventListener(&#39;click&#39;,click);\n\t\t})\n\t&lt;/script&gt;\n&lt;/body&gt;\n//report.js\nlet express=require(&#39;express&#39;);\nlet app=express();\nlet goods={};\napp.get(&#39;/report&#39;,function(req,res){\n  let name=req.query.name;\n  if(goods[name]){\n    goods[name]++;\n  }else{\n    goods[name]=1\n  }\n  console.log(&#39;name&#39;,name);\n  res.json(goods);\n})\napp.get(&#39;/&#39;,function(req,res){\n  res.json(goods);\n})\napp.listen(3000);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//2.表单校验，避免校验逻辑和表单提交逻辑合在一起\n&lt;body&gt;\n\t\n\t\t用户名 &lt;input type=&quot;text&quot; id=&quot;username&quot;/&gt;\n\t\t密码 &lt;input type=&quot;text&quot; id=&quot;password&quot;/&gt;\n\t\t&lt;button id=&quot;submit-btn&quot;&gt;提交&lt;/button&gt;\n\t\n\t&lt;script&gt;\n\t\tFunction.prototype.before=function(beforeFn){\n      let _this=this;\n      return function(){\n        let ret=beforeFn.apply(this,arguments);//继承beforeFn，调用beforeFn\n        if(ret){\n          _this.apply(this,arguments);//调用函数\n        }\n      }\n    }\n\t\tfunction submit(){\n      console.log(&#39;提交表单&#39;)\n\t\t}\n\t\tlet checkUserNameNotNull=submit.before(function(){\n      let username=document.getElementById(&#39;username&#39;).value;\n\t\t  if(username.length&lt;6){\n        return alert(&#39;用户名长度不够&#39;)\n\t\t  }\n\t\t  return true;\n\t\t})\n\t\tcheckUserNameMoreThanSix=checkUserNameNotNull.before(function(){\n      let username=document.getElementById(&#39;username&#39;).value;\n\t\t  if(!username){\n        return alert(&#39;用户名没有输入&#39;)\n\t\t  }\n\t\t  return true;\n\t\t})\n\t\tdocument.getElementById(&#39;submit-btn&#39;).addEventListener(&#39;click&#39;,submit)\n\t&lt;/script&gt;\n&lt;/body&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div></li><li><p>第三方实现 百度统计，友盟等</p></li></ul></li></ul><ol start="2"><li><p>decorator(node不认识，需要babel转译)</p><p>webpack要支持decorators要安装如下插件：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//babel-plugin-proposal-decorators\n&quot;plugins&quot;:[\n  [&quot;@babel/plugin-proposal-decorator&quot;,{&quot;legacy&quot;:true}],//装饰器\n  [&quot;@babel/plugin-proposal-class-properties&quot;,{&quot;loose&quot;:true}]//类装饰器\n]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>类装饰器</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@testable\nclass Person{\n  \n}\nfunction testable(target){//对类进行装饰\n  target.testalbe=true;\n}\nconsole.log(Person.testable);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//react以前的例子（现在已废掉）\nlet Hooks={\n  componentWillMount(){\n    console.log(&#39;componentWillMount&#39;);\n  },\n  componentDidMount(){\n    console.log(&#39;componentDidMount&#39;);\n  }\n}\nfunction mixins(...others){\n  return function(target){\n     Object.assign(target.prototype,...others);\n  }\n}\n@mixings(Hooks)\nclass Component{\n  \n}\nlet c=new Component();\nconsole.log(c)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//方法decorators,用函数装饰类上的属性\nfunction readonly(target,attr,descriptor){//目标，属性名，属性描述器\n  descriptor.writable=false;\n}\nclass Circle{\n  @readonly\n  PI=3.14\n}\nlet c=new Circle();\nc.PI=300;\nconsole.log(c.PI)\n\n//在一个老的逻辑之前执行一段逻辑\nfunction logger(target,attr,descriptor){\n  let oldVal=descriptor.value;\n  descriptor.value=function(...args){\n    console.log(`参数：${args}`);\n    return oldVal(...args);\n  }\n}\nclass Caculator{\n  @logger\n  sum(a,b){\n    return a+b;\n  }\n}\nlet c=new Caculator();\nlet ret=c.sum(1,2);\nconsole.log(ret);\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></li></ol><h2 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式" aria-hidden="true">#</a> 代理模式</h2><p>由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用</p><p>在使用者和目标对象之间加一个代理对象，通过代理可以实现控制</p><p>例如，VPN</p><p><img src="/img/VPN.png" alt=""></p><p>中国网站有GFW防火墙，所以无法访问谷歌服务器，需要买一个中间服务器，创建proxy代理，通过它来访问谷歌。</p><p><img src="/img/代理模式.png" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//1.google.js\nclass Google{\n  get(url){\n    return google;\n  }\n}\nclass Proxy{\n  constructor(){\n    this.google=new Google();\n  }\n  get(url){\n    return this.google.get(url);\n  }\n}\nlet proxy=new Proxy();\nlet result=proxy.get(&#39;http://www/google.com&#39;);\nconsole.log(result);//google\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><img src="/img/公司内部服务器.png" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//2.cache.js\n//n=4 1!+2!+3!+4\n//修改前，\nfunction multi(n){\n  if(n&lt;=1){\n    return 1;\n  }else{\n    return n*multi(n-1)\n  }\n}\nlet sum=function(n){\n  let result=0;\n  for(let i=1;i&lt;=n;i++){\n    result+multi(n)\n  }\n  return result;\n}\nconsole.time(&#39;cost&#39;);\nconsole.log(sum(3))\nconsole.time(&#39;cost&#39;);\n\n//修改后\nlet sum=(function(){\n  let cache={};//缓存每次的计算结果\n  function multi(n){\n    if(n&lt;=1){\n      return 1;\n    }else{\n      return n*(cache[n-1]||multi(n-1))\n    }\n  }\n  return function(n){\n    let result=0;\n    for(let i=1;i&lt;n;i++){\n      let ret=multi(i);\n      cache[i]=ret;//从1开始，每个阶乘都记录在了缓存中\n      result+=ret;\n    }\n    return result;\n  }\n})();\nconsole.time(&#39;cost&#39;);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p><strong>proxy函数</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//$.proxy绑定this。通过$.proxy生成新的函数，内部调用原始函数\n&lt;body&gt;\n\t&lt;button id=&#39;clickMe&#39;&gt;点我&lt;/button&gt;\n\t&lt;script src=&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n\t&lt;script&gt;\n\t\tdocument.getElementById(&#39;clickMe&#39;).addEventListener(&#39;click&#39;,function(){\n      setTimeout($.proxy(function(){\n        $(this).css(&#39;color&#39;,&#39;red&#39;);\n      },this),3000)//proxy绑定this到this,否则是window。原理：setColor=setColor.bind(this)\n\t\t})\n\t&lt;/script&gt;\n&lt;/body&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//自己写一个$.proxy\ndocument.getElementById(&#39;clickMe&#39;).addEventListener(&#39;click&#39;,function(){\n  function setColor(){\n    $(this).css(&#39;color&#39;,&#39;red&#39;);\n  }\n  function proxy(fn,context){\n    return function(){\n      fn.apply(context,arguments);\n    }\n  }\n  setColor=proxy(setColor,this);\n  setTimeout(setColor,3000);\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>Proxy(es6)</strong></p><ul><li>Proxy 用于修改某些操作的默认行为</li><li>Proxy可以理解成，在目标对象之前架设一层&quot;拦截&quot;，外界对该对象的访问，都必须先通过这层拦截，因此提供了对外界访问的过滤和改写。由它来代理某些操作，即代理器</li><li>Vue3.0是用Proxy实现的。Vue2.0是用Object.defineProperty实现的。</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let wangy={\n  name:&quot;王燕&quot;,\n  age:31,\n  height:165\n}\nlet wangMaMa = new Proxy(wangy,{\n  get(target,key){\n    if(key==&#39;age&#39;){\n      return target.age-2;\n    }else if(key===&#39;height&#39;){\n      return target.height+3;\n    }else{\n      return target[key];\n    }\n  },\n  set(target,key,val){\n    if(key==&#39;boyfriend&#39;){\n      let boyfriend=val;\n      if(boyfriend.age&gt;40){\n        throw Error(&#39;太老了&#39;);\n      }else if(boyfriend.salary&lt;20000){\n        throw Error(&#39;太穷了&#39;);\n      }else{\n        target[key]=val;\n      }\n    }\n  }\n})\nconsole.log(wangMaMa.age)\nconsole.log(wangMaMa.height)\nconsole.log(wangMaMa.name)\nwangMaMa.boyfriend={age:12,salary:8};\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><blockquote><p>代理模式和适配器模式区别？</p><p>适配器提供不同接口，代理模式提供一模一样的接口</p></blockquote><blockquote><p>代理模式和装饰器模式的区别？</p><p>装饰器模式原来的功能不变还可以使用，代理模式改变原来的功能</p></blockquote><p><strong>事件委托</strong></p><p>addEventListener的第三个参数，true为捕获，false为冒泡</p><p>事件委托也是一种代理模式</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;body&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;1&lt;/li&gt;\n\t\t&lt;li&gt;2&lt;/li&gt;\n\t\t&lt;li&gt;3&lt;/li&gt;\n\t&lt;/ul&gt;\n\t&lt;script&gt;\n\t\tlet ulist=document.getElementById(&#39;ulist&#39;);\n\t\tulist.addEventListener(&#39;click&#39;,function(event){\n\t\t\tif(event.target.nodetype===&#39;li&#39;){\n        console.log(event.target.innerHTML);\n\t\t\t}\n\t\t})\n\t&lt;/script&gt;\n&lt;/body&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>图片懒加载</strong></p><p>不改变原有代码，且API不变，增强了额外的功能</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//app.js\nlet express=require(&#39;express&#39;)\nlet path=require(&#39;path&#39;)\napp=express();\napp.use(express.static(__dirname));\napp.get(&#39;/images/:name&#39;,function(req,res){\n\tsetTimeout(function(){\n    res.sendFile(path.join(__dirname,req.path));\n\t},2000)\n  \n})\napp.get(&#39;/loading.gif&#39;,function(req,res){\n  res.sendFile(path.resolve(&#39;loading.gif&#39;));\n})\napp.listen(3000);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//index.html\n&lt;body&gt;\n\t&lt;ul id=&#39;menu&#39;&gt;\n\t\t&lt;li data-src=&#39;/images/bg1.jpg&#39;&gt;图片1&lt;/li&gt;\n\t\t&lt;li data-src=&#39;/images/bg2.jpg&#39;&gt;图片2&lt;/li&gt;\n\t&lt;/ul&gt;\n\t&lt;div id&quot;bgimg&quot;&gt;&lt;/div&gt;\n\t&lt;script&gt;\n\t\tlet bgimg=document.getElementById(&#39;bgimg&#39;);\n\t\tlet menu=document.getElementById(&#39;menu&#39;);\n\t\tlet Background=(function(){\n      let img=new Image();\n      bgimg.appendChild(img);\n      return {\n        setSrc(src){\n          img.src=src;\n        }\n      }\n\t\t})()\n\t\tmenu.addEventListener(&#39;click&#39;,function(event){\n      let src=event.darget.dataset.src;\n      Background.setSrc(src);\n\t\t})\n\t&lt;/script&gt;\n&lt;/body&gt;\n\n//使用代理模式改进\n//index.html\n&lt;body&gt;\n\t&lt;ul id=&#39;menu&#39;&gt;\n\t\t&lt;li data-src=&#39;/images/bg1.jpg&#39;&gt;图片1&lt;/li&gt;\n\t\t&lt;li data-src=&#39;/images/bg2.jpg&#39;&gt;图片2&lt;/li&gt;\n\t&lt;/ul&gt;\n\t&lt;div id&quot;bgimg&quot;&gt;&lt;/div&gt;\n\t&lt;script&gt;\n\t\tlet bgimg=document.getElementById(&#39;bgimg&#39;);\n\t\tlet menu=document.getElementById(&#39;menu&#39;);\n\t\tlet Background=(function(){\n      let img=new Image();\n      bgimg.appendChild(img);\n      return {\n        setSrc(src){\n          img.src=src+&#39;?ts=&#39;+Date.now();\n        }\n      }\n\t\t})()\n\t\t//不改变原有代码，且API不变，增强了额外的功能\n\t\t---------------------修改2------------------------\n\t\tlet ProxyBackground=(function(){\n      let img=new Image();\n      img.onload=function(){\n        Background.setSrc(this.src);\n      }\n      return {\n        setSrc(src){\n          Background.setSrc(&#39;/loading.gif&#39;);\n          img.src=src\n        }\n      }\n\t\t})()\n\t\t---------------------修改2------------------------\n\t\tmenu.addEventListener(&#39;click&#39;,function(event){\n      let src=event.darget.dataset.src;\n      --------修改1-----------\n      ProxyBackground.setSrc(src);//\n      --------修改1-----------\n\t\t})\n\t&lt;/script&gt;\n&lt;/body&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div></li></ol><p><strong>防抖代理</strong></p><p>勾选后修改数据，有时候点击多了的时候，不需要发送那么多请求，而是等确定后再发送请求</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//app.js\nlet express=require(&#39;express&#39;)\nlet path=require(&#39;path&#39;)\napp=express();\napp.use(express.static(__dirname));\nlet todos=[\n  {id:1,text:&#39;吃饭&#39;,completed:false},\n  {id:2,text:&#39;睡觉&#39;,completed:false},\n  {id:3,text:&#39;打豆豆&#39;,completed:false}\n]\napp.get(&#39;/todos&#39;，function(req,res){\n  res.json(todos);\n})\napp.get(&#39;/toggle&#39;,function(req,res){\n  let ids=req.query.ids;\n  ids=ids.split(&#39;,&#39;).map(item=&gt;parseInt(item));\n  todos=todos.map(function(todo){\n    if(ids.includes(todo.id)){\n      todo.completed=!todo.completed;\n    }\n    return todo;\n  });\n  res.json({code:0})\n})\napp.listen(3000);\n\n//index.html\n&lt;ul id=&quot;todoApp&quot;&gt;\n\n&lt;/ul&gt;\n&lt;script&gt;\n\tlet todoApp=document.getElementById(&#39;todoApp&#39;);\n\twindow.onload=function(){\n    fetch(&#39;/todos&#39;).then(res=&gt;res.json()).then(function(todos){\n      todoApp.innerHTML=todos.map(item=&gt;{\n        `&lt;li&gt;\n        \t&lt;input value=&quot;${item.id}&quot; type=&quot;checkbox&quot; ${item.completed?&quot;checked&quot;:&quot;&quot;}/&gt;\n        \t${item.text}\n        &lt;/li&gt;`\n      }).join(&#39;&#39;);\n    })\n\t}\n\tfunction toggle(id){\n    fetch(`/toggle?id=${id}`).then(res=&gt;res.json()).then(function(result){\n      \n    })\n\t}\n\tlet lazyToggle=(function(){\n    let ids=[];\n    let timer;\n    return function(id){\n      ids.push(id);\n      if(!timer){\n        timer=setTimeout(function(){\n          toggole(ids.join(&#39;,&#39;));\n          ids=[];\n          clearTimeout(timer);\n          timer=null;\n        },2000);\n      }\n    }\n\t})();\n\ttodoApp.addEventListener(&#39;click&#39;,function(event){\n    let id=event.target.value;\n    lazyToggle(id);\n\t})\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><h2 id="外观模式" tabindex="-1"><a class="header-anchor" href="#外观模式" aria-hidden="true">#</a> 外观模式</h2><p><img src="/img/外观模式.png" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>class Sum{\n    sum(a,b) {\n        return a+b;\n    }\n}\nclass Minus{\n    minus(a,b) {\n        return a-b;\n    }\n}\nclass Multiply{\n    multiply(a,b) {\n        return a * b;\n    }\n}\nclass Calculator{\n    constructor() {\n        this.sumObj=new Sum();\n        this.minusObj=new Minus();\n        this.multiplyObj=new Multiply();\n    }\n    sum(...args) {\n        this.sumObj.sum(...args);\n    }\n    minus(...args) {\n        this.minusObj.minus(...args);\n    }\n    multiply(...args) {\n        this.multiplyObj.multiply(...args);\n    }\n}\nlet calculator=new Calculator();\ncalculator.sum(1,2);\ncalculator.minus(1,2);\ncalculator.multiply(1,2);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p><strong>场景</strong></p><ul><li>为复杂的模块或子系统提供外界访问的模块</li><li>子系统相互独立</li></ul><p>redux</p><p>客户端和子模块得到了隔离，内部修改影响不到使用。</p><p><img src="/img/redux.png" alt=""></p><h2 id="观察者模式-监听模式" tabindex="-1"><a class="header-anchor" href="#观察者模式-监听模式" aria-hidden="true">#</a> 观察者模式(监听模式)</h2><ul><li>被观察者供维护观察者的一系列方法</li><li>观察者提供更新接口</li><li>观察者把自己注册到被观察者里</li><li>在被观察者发生变化时候，调用观察者的更新方法</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>class Star{\n    constructor(name) {\n        this.name=name;\n        this.state=&#39;&#39;;\n        this.observers=[];\n    }\n    getState() {\n        return this.state;\n    }\n    setState(state) {\n        this.state=state;\n        this.notifyAllObservers();\n    }\n    attach(observer) {\n        this.observers.push(observer);\n    }\n    notifyAllObservers() {\n        this.observers.forEach(observer=&gt;observer.update());\n    }\n}\nclass Fan{\n    constructor(name,star) {\n        this.name=name;\n        this.star=star\n        this.star.attach(this);\n    }\n    update() {\n        console.log(`我的明星喜欢${this.star.getState()}，我也喜欢`);    \n    }\n}\nlet star=new Star(&#39;angelbaby&#39;);\nlet fan1=new Fan(&#39;zhangsan&#39;,star);\nstar.setState(&#39;绿色&#39;);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p><strong>场景</strong></p><ol><li><p>事件绑定</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> &lt;button id=&quot;btn&quot;&gt;click&lt;/button&gt;\n    &lt;script&gt;\n        let btn = document.getElementById(&#39;btn&#39;);\n        btn.addEventListener(&#39;click&#39;,()=&gt;{alert(1)});\n        btn.addEventListener(&#39;click&#39;,()=&gt;{alert(2)});\n        btn.addEventListener(&#39;click&#39;,()=&gt;{alert(3)});\n    &lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>Promise</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>class Promise{\n    constructor(fn) {\n        this.callbacks=[];\n        let resolve=() =&gt; {\n            this.callbacks.forEach(callback =&gt; callback())\n        };\n        fn(resolve);\n    }\n    then(callback) {\n        this.callbacks.push(callback);\n    }\n}\nlet promise=new Promise(function (resolve,reject) {\n    setTimeout(function () {\n        resolve(100);\n    },1000);\n});\npromise.then(() =&gt; console.log(1));\npromise.then(() =&gt; console.log(2));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>JQuery.Callbacks</p><p>Callbacks对象其实就是一个函数队列，获得Callbacks对象之后 ，就可以向这个集合中增加或者删除函数。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;script src=&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n window.jQuery={\n     Callbacks(){\n       let observers = [];\n       function add(observer){\n           observers.push(observer);\n       }\n       function remove(observer){\n           let index = observers.indexOf(observer);\n           if(index != -1)\n             observers.splice(index,1);\n       }\n       function fire(){\n           observers.forEach(item=&gt;item());\n       }\n       return {\n           add,\n           remove,\n           fire\n       }\n   }\n }\n let callbacks = jQuery.Callbacks();\n\n let a1= ()=&gt;alert(1);\n let a2= ()=&gt;alert(2);\n let a3= ()=&gt;alert(13);\n callbacks.add(a1);\n callbacks.add(a2);\n callbacks.add(a3);\n callbacks.remove(a3);\n callbacks.fire();\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></li><li><p>events</p><p>node库---自定义事件，来自events模块。可以实现监听事件，触发事件</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>const EventEmitter=require(&#39;events&#39;);\nconst util=require(&#39;util&#39;);\nlet eve=new EventEmitter();\neve.on(&#39;click&#39;,function (name) {\n    console.log(1,name);\n});\neve.on(&#39;click&#39;,function (name) {\n    console.log(2,name);\n});\neve.emit(&#39;click&#39;,&#39;zfpx&#39;);\n\n//使用util.inherits继承EventEmitter\nfunction Bell(){\n  \n}\nutil.inherits(Bell,EventEmitter);\nlet bell=new Bell();\nbell.on(&#39;click&#39;,function(name){\n  console.log(&quot;同学们进入&quot;)\n})\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>stream文件流</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let fs=require(&#39;fs&#39;);\nlet rs=fs.createReadStream(&#39;./1.txt&#39;);\nrs.on(&#39;data&#39;,function (data) {\n    console.log(data)\n});\nrs.on(&#39;end&#39;,function () {\n    console.log(&#39;end&#39;)\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>http服务器</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let http=require(&#39;http&#39;);\nlet server = http.createServer();\nserver.on(&#39;request&#39;,(req,res)=&gt;{\n  req.on(&#39;data&#39;,function(data){\n      console.log(data)\n  });\n}));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>生命周期函数</p></li><li><p>vue watch</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;body&gt;\n&lt;div id=&quot;root&quot;&gt;\n      &lt;p&gt;FullName: {{fullName}}&lt;/p&gt;\n      &lt;p&gt;FirstName: &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;/&gt;&lt;/p&gt;\n      &lt;p&gt;LastName: &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;/&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;script src=&quot;https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\nnew Vue({\n  el:&#39;#root&#39;,\n  data: {\n    firstName:&#39;张&#39;,\n    lastName: &#39;三&#39;,\n    fullName:&#39;张三&#39;\n  },\n  watch: {\n    firstName(newName, oldName) {\n      this.fullName = newName + &#39; &#39; + this.lastName;\n    }\n  } \n})\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li><li><p>redux</p></li></ol><p><strong>观察者模式和发布订阅模式的区别？</strong></p><ul><li><p>观察者模式</p><p><img src="/img/观察者模式.png" alt=""></p><ol><li>观察者和被观察者是耦合的</li><li>观察者的update动作是由被观察者来调用的</li></ol></li><li><p>发布订阅模式</p><p><img src="/img/发布订阅模式.png" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>class Agency{\n    constructor() {\n        this._topics={};\n    }\n    // on addEventListener\n    subscribe(topic,listener) {\n        let listeners=this._topics[topic];\n        if (listeners) {\n            listeners.push(listener);\n        } else {\n            this._topics[topic]=[listener];\n        }\n    }\n    //emit\n    publish(topic) {\n        let listeners=this._topics[topic];\n        let args=Array.from(arguments).slice(1);\n        listeners.forEach(listener =&gt; listener(...args));\n    }\n}\nlet agent=new Agency();\nclass Landlord{\n    constructor(name) {\n        this.name=name;\n    }\n    lend(agent,area,money) {\n        agent.publish(&#39;house&#39;,area,money);\n    }\n}\n\nclass Tenant{\n    constructor(name) {\n        this.name=name;\n    }\n    rent(agent) {\n        agent.subscribe(&#39;house&#39;, (area,money)=&gt; {\n            console.log(`有新房源了, ${area}平米, ${money}元`);\n        });\n    }\n}\nlet t1=new Tenant(&#39;房客1&#39;);\nlet t2=new Tenant(&#39;房客2&#39;);\nlet l1=new Landlord(&#39;房东1&#39;);\nt1.rent(agent);\nt2.rent(agent);\nl1.lend(agent,30,2000);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div></li><li><p>虽然两种模式都存在订阅者和发布者（观察者可认为是订阅者、被观察者可认为是发布者）</p></li><li><p>但是观察者模式是由被观察者调度的，而发布/订阅模式是统一由调度中心调的</p></li><li><p>所以观察者模式的订阅者与发布者之间是存在依赖的，而发布/订阅模式则不会。</p></li></ul>',78),v={render:function(n,s){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("nav",l,[(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#面对对象"},{default:(0,e.w5)((()=>[t])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#设计原则"},{default:(0,e.w5)((()=>[r])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#工厂模式"},{default:(0,e.w5)((()=>[c])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(a,{to:"#简单工厂模式"},{default:(0,e.w5)((()=>[u])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#工厂方法模式"},{default:(0,e.w5)((()=>[o])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#抽象工厂模式"},{default:(0,e.w5)((()=>[i])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#总结工厂模式"},{default:(0,e.w5)((()=>[b])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#单例模式"},{default:(0,e.w5)((()=>[m])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#适配器模式"},{default:(0,e.w5)((()=>[k])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#装饰器模式"},{default:(0,e.w5)((()=>[d])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#代理模式"},{default:(0,e.w5)((()=>[g])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#外观模式"},{default:(0,e.w5)((()=>[f])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(a,{to:"#观察者模式-监听模式"},{default:(0,e.w5)((()=>[w])),_:1})])])]),y],64)}}}}]);