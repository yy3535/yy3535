(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{255:function(n,e,t){"use strict";t.r(e);var a=t(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"前端设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端设计模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 前端设计模式")]),n._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#面对对象"}},[n._v("面对对象")])]),t("li",[t("a",{attrs:{href:"#设计原则"}},[n._v("设计原则")])]),t("li",[t("a",{attrs:{href:"#工厂模式"}},[n._v("工厂模式")]),t("ul",[t("li",[t("a",{attrs:{href:"#简单工厂模式"}},[n._v("简单工厂模式")])]),t("li",[t("a",{attrs:{href:"#工厂方法模式"}},[n._v("工厂方法模式")])]),t("li",[t("a",{attrs:{href:"#抽象工厂模式"}},[n._v("抽象工厂模式")])]),t("li",[t("a",{attrs:{href:"#总结工厂模式"}},[n._v("总结工厂模式")])])])]),t("li",[t("a",{attrs:{href:"#单例模式"}},[n._v("单例模式")])]),t("li",[t("a",{attrs:{href:"#适配器模式"}},[n._v("适配器模式")])]),t("li",[t("a",{attrs:{href:"#装饰器模式"}},[n._v("装饰器模式")])]),t("li",[t("a",{attrs:{href:"#代理模式"}},[n._v("代理模式")])]),t("li",[t("a",{attrs:{href:"#外观模式"}},[n._v("外观模式")])]),t("li",[t("a",{attrs:{href:"#观察者模式-监听模式"}},[n._v("观察者模式(监听模式)")])])])]),t("p"),n._v(" "),t("h2",{attrs:{id:"面对对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面对对象","aria-hidden":"true"}},[n._v("#")]),n._v(" 面对对象")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("把客观对象属性抽象成属性和操作，隐藏内部属性")])]),n._v(" "),t("li",[t("p",[n._v("把同一个类型的对象的属性和操作绑在一起，变成类")])]),n._v(" "),t("li",[t("p",[n._v("可实现继承和操作")]),n._v(" "),t("ul",[t("li",[n._v("面对对象的分析 OOA")]),n._v(" "),t("li",[n._v("面对对象的设计 OOD")]),n._v(" "),t("li",[n._v("面对对象的变成 OOP")])])]),n._v(" "),t("li",[t("p",[n._v("类")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class Animal{\n  constructor(name){\n    this.name=name;\n  }\n  eat(food){\n    console.log(`${this.name} eat ${food}`)\n  }\n}\nlet dog=new Animal("狗");\ndog.eat("肉")\n')])])])]),n._v(" "),t("li",[t("p",[n._v("继承")]),n._v(" "),t("p",[n._v("父类公用方法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class Dog extends Animal{\n  constructor(){\n    super("狗")\n  }\n  speak(){\n    console.log("汪汪汪")\n  }\n}\nlet dog=new Dog();\ndog.eat("肉");\ndog.speak();\n\nclass Cat extends Animal{\n  constructor(){\n    super(\'猫\');\n  }\n  speak(){\n    console.log(\'喵喵喵\')\n  }\n}\nlet cat=new Cat();\ncat.eat("鱼");\ncat.speak();\n')])])])]),n._v(" "),t("li",[t("p",[n._v("封装")])])]),n._v(" "),t("ul",[t("li",[n._v("减少耦合，部分不让外部访问，管理接口权限")]),n._v(" "),t("li",[n._v("带_开头的都是私有的，业界约定，但es6语法尚不支持，typescript有这种特性")])]),n._v(" "),t("blockquote",[t("p",[n._v("TypeScript\n是js的超级版本，实现了类型的检查")])]),n._v(" "),t("ol",[t("li",[n._v("安装")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("npm install -g typescript\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[n._v("使用")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//2.ts\nfunction greeting(user:string){//类型限制\n  return 'hello'+user;\n}\nlet user='zfpx';\nconsole.log(greeting(user));\nlet user=10;\nconsole.log(greeting(user));//报错\n")])])]),t("p",[n._v("编译成js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("tsc 2.ts//会出来一个2.js\n")])])]),t("p",[n._v("特点")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("类型限制，如上")])]),n._v(" "),t("li",[t("p",[n._v("封装")]),n._v(" "),t("p",[n._v("public 类内和类外都可使用")]),n._v(" "),t("p",[n._v("protected 可在类内和子类中使用")]),n._v(" "),t("p",[n._v("private 只可在类内使用")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//2.ts\nclass Person{\n  public name:string;\n  protected age:number;\n  private money:number;\n  constructor(name,age,money){\n    this.name=name;\n    this.age=age;\n    this.money=money;\n  }\n}\nclass Student extends Person{\n\tpublic num:number;\n  constructor(name,age,money,num){\n    super(name,age,money);\n    this.num=num;\n  }\n  getName(){\n    //在子类中可以访问父类的公有属性\n    console.log(`我的名字叫${this.name}`)\n  }\n  getAge(){\n    //在子类中可以访问父类的protected属性\n    console.log(`我的名字叫${this.name}`)\n  }\n  getMoney(){\n    console.log(`我的名字叫${this.name}`)//出错\n  }\n}\nlet s1=new Student('zfpx',10,100,1);\n//在其他类中可访问公有属性\nconsole.log(s1.name)//可访问\nconsole.log(s1.age)//报错\nconsole.log(s1.money)//报错，在类外\n")])])])])]),n._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[t("p",[n._v("多态")]),n._v(" "),t("p",[n._v("同一个函数名接收不同参数(暂时无法实现，会报错)")]),n._v(" "),t("p",[n._v("同一个函数名在子类中实现不同功能")])])]),n._v(" "),t("h2",{attrs:{id:"设计原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计原则","aria-hidden":"true"}},[n._v("#")]),n._v(" 设计原则")]),n._v(" "),t("ul",[t("li",[n._v("按什么标准来实现功能。")]),n._v(" "),t("li",[n._v("功能相同，有不同的设计方法。")]),n._v(" "),t("li",[n._v("需求不断变化，设计的作用就会体现出来。")])]),n._v(" "),t("p",[n._v("五大设计原则")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("单一职责原则")]),n._v(" "),t("p",[n._v("一个程序只做一件事，否则拆分")])]),n._v(" "),t("li",[t("p",[n._v("开放封闭原则")]),n._v(" "),t("p",[n._v("对扩展开放，对修改封闭，不能改老代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//request.js\nfunction checkStatus(response){\n  if(response.code>=200&&response.code<300){\n    return response;\n  }else{\n    throw new Error('响应结果不正确');\n  }\n}\nfunction parseJSON(response){\n  return response.json();\n}\nfunction request(url,options){\n/**\n*1.判断相应的状态码是不是2xx，如果不是的话也认为是错误\n*2.把相应体转化成JSON对象\n*/\n  fetch(url,options)\n  \t.then(checkStatus)\n  \t.then(parseJSON)\n  \t.then(checkCode)\n}\n")])])])]),n._v(" "),t("li",[t("p",[n._v("里氏替换原则")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("子类的函数能覆盖父类同名函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class Animal{\n  eat(){\n    \n  }\n}\nclass Cat{\n  constructor(){\n    super()\n  }\n  eat(){\n    console.log("鱼")\n  }\n}\nclass Dog{\n  constructor(){\n    super()\n  }\n  eat(){\n    console.log("骨头")\n  }\n}\n')])])])]),n._v(" "),t("li",[t("p",[n._v("父类能出现的地方，子类也能出现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//应用场景\n//React 虚拟DOM,hello和h1都是子类，所以都能放\nReact.render(<Hello/>);\nReact.render(<h1/>)\n")])])])]),n._v(" "),t("li",[t("p",[n._v("js使用比较少")])])])]),n._v(" "),t("li",[t("p",[n._v("接口隔离原则")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("保持接口独立，接口单一原则，JS中没有接口，使用较少，ts中有接口")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//4.ts\ninterface Person{\n  firstName:string\n  lastName:string\n}\ninterface Fly{\n  swing:number;\n}\nfunction greeting(obj:Person){//加上类型检查会对传入的对象作检查，类型不对或者缺少会报错\n  console.log(obj.firstName+obj.lastName)\n}\nlet p={firstName:'张',lastName:'三'}\ngreeting(p)\n")])])])])])]),n._v(" "),t("li",[t("p",[n._v("依赖反转原则")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("依赖抽象而不依赖实现(尽量依赖父类而不依赖子类)，能依赖Person不依赖Women")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Person{\n  constructor(){}\n  buy(){}\n}\nclass Man extends Person{\n  constructor(gender){\n    this.gender=gender;\n  }\n  buy(){\n    console.log(\"买ipad\")\n  }\n}\nclass Woman extends Person{\n  constructor(gender){\n    this.gender=gender;\n  }\n  buy(){\n    console.log(\"买包\")\n  }\n}\nlet p=new Person();\nlet man=new Man('男');\nlet women=new Woman('女');\nman.buy();\nwoman.buy();\n")])])])])])])]),n._v(" "),t("h2",{attrs:{id:"工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 工厂模式")]),n._v(" "),t("p",[t("strong",[n._v("UML")])]),n._v(" "),t("p",[n._v("标准建模语言，其中一个最重要的就是"),t("strong",[n._v("类图")]),n._v("和"),t("strong",[n._v("对象图")])]),n._v(" "),t("p",[t("strong",[n._v("类图")])]),n._v(" "),t("p",[n._v("描述类的关系(依赖，泛华(继承))")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E7%B1%BB%E5%9B%BE.png",alt:""}})]),n._v(" "),t("h3",{attrs:{id:"简单工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 简单工厂模式")]),n._v(" "),t("p",[n._v("+public")]),n._v(" "),t("p",[n._v("-private")]),n._v(" "),t("p",[n._v("箭头空三角 子类继承父类")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82.png",alt:"简单工厂模式"}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Plant{\n  constructor(name){\n    this.name=name;\n  }\n  grow(){\n    console.log('我正在生长~~~~')\n  }\nclass Apple extends Plant{\n  constructor(name,flavour){\n    super(name);\n    this.flavour=flavour;\n  }\n}\nclass Orange extends Plant{\n  constructor(name,flavour){\n    super(name);\n    this.flavour=flavour;\n  }\n}\nnew Apple();\nnew Orange();\n")])])]),t("p",[n._v("直接new有什么缺点：")]),n._v(" "),t("ol",[t("li",[n._v("耦合(需要知道我要的类在哪里，得知道怎么做)")]),n._v(" "),t("li",[n._v("依赖具体实现(apple类永远不能修改删掉)")])]),n._v(" "),t("p",[n._v("简单工厂模式：(用一个类做一个端菜的服务员)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Factory{\n  static create(type){\n    switch(type)\n    \tcase 'apple':\n    \t\treturn new Apple('苹果','甜');\n    \tcase 'orange':\n    \t\treturn new Orange('橘子’，酸');\n    \tdefault:\n    \t\tthrow new Error('你要的东西没有');\n  }\n}\nlet apple=Factory.create('apple');\nconsole.log(apple.flavour);\nlet orange=Factory.create('orange');\nconsole.log(orange.flavour);\n\n")])])]),t("p",[n._v("好处：")]),n._v(" "),t("ol",[t("li",[n._v("（有一天橘子没有了，可以换成柠檬，但客户并不知道）隐藏实现，需求修改后只需要改更少的一部分")]),n._v(" "),t("li",[n._v("外部简单，内部灵活")])]),n._v(" "),t("p",[n._v("经典应用场景：")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("jQuery")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class jQuery{\n  constructor(selector){\n    let elements=Array.from(document.querySelectorAll(selector));\n    let length=elements?elements.length:0;\n    for(let i=0;i<length;i++){\n      this[i]=elements[i];\n    }\n    this.length=length;\n  }\n  html(){}\n}\nwindow.$=function(selector){\n  return new jQuery(selector)//调方法，返回一个jquery实例\n}\n")])])])]),n._v(" "),t("li",[t("p",[n._v("react")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//虚拟DOM\nlet h1=<h1 className=\"title\">hello</h1>;\n//babel编译后变成：let h1=React.createElement('h1',{className:'title'},'hello');\n//h1就是虚拟DOM\nclass VNode{\n  constructor(tagName,attrs,children){\n    this.tagName=tagName;\n    this.attrs=attrs;\n    this.children=children;\n  }\n}\nfunction createElement(tagName,attrs,children){\n  return new VNode(tagName,attrs,children)//返回一个VNode实例，有一天VNode名字改了，外部依然是调用createElement\n}\n")])])])])]),n._v(" "),t("h3",{attrs:{id:"工厂方法模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 工厂方法模式")]),n._v(" "),t("p",[n._v("核心工厂不再负责所有产品的创建，而是将具体创建交给子类去做")]),n._v(" "),t("p",[n._v("原因：")]),n._v(" "),t("ul",[t("li",[n._v("简单工厂模式不符合开闭原则(对修改关闭，对扩展开放，会改到老代码)")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//plant.js\nclass Plant{\n  constructor(name){\n    this.name=name;\n  }\n}\nmodule.exports=Plant;\n//apple.js\nlet Plant=require('./plant');\nlet Factory=require('./factory');\nclass Apple extends Plant{\n  constructor(name,flavour){\n    super(name);\n    this.flavour=flavour;\n  }\n}\nclass AppleFactory extends Factory{\n  static create(){\n    return new Apple('苹果','甜');\n  }\n}\nmodule.exports=AppleFactory;\n//orange.js\nlet Plant=require('./plant');\nlet Factory=require('./factory');\nclass Orange extends Plant{\n  constructor(name,flavour){\n    super(name);\n    this.flavour=flavour;\n  }\n}\nclass OrangeFactory extends Factory{\n  static create(){\n    return new Orange('桔子','酸');\n  }\n}\nmodule.exports=OrangeFactory;\n//factory.js\n//工厂一般是接口，规定子类必须实现的方法\n//依赖抽象而不依赖实现\nclass Factory{\n  create(){}\n}\nmodule.exports=Factory;\n\n//接口一般会跟配置对象配合\nlet settings={\n  'apple':AppleFactory,\n  'orange':OrangeFactory\n}\nlet apple=settings['apple'].create();\nlet orange=settings['orange'].create();\n")])])]),t("blockquote",[t("p",[n._v("什么是接口？")])]),n._v(" "),t("p",[n._v("接口只有方法定义，没有具体实现，如果一个类要实现该接口，就必须实现该接口中的所有方法")]),n._v(" "),t("h3",{attrs:{id:"抽象工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 抽象工厂模式")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F1.png",alt:""}})]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F2.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//1.method.js\nclsss Factory{\n  \n}\nclass AppleFactory extends Factory{\n  createButton(){//创建按钮\n  \treturn new AppleButton();\n  }\n  createIcon(){//创建图标\n  \treturn new AppleIcon();\n  }\n}\nclass WindowsFactory extends Factory{\n  createButton(){//创建按钮\n  \treturn new WindowsButton();\n  }\n  createIcon(){//创建图标\n  \treturn new WindowsIcon();\n  }\n}\n\nclass Icon{}\nclass AppleIcon{\n  render(){\n    console.log(`绘制苹果的图标`)\n  }\n}\nclass WindowsIcon{\n  render(){\n    console.log(`绘制Windows的图标`)\n  }\n}\n\nclass Button{}\nclass AppleButton{\n  render(){\n    console.log(`绘制苹果的按钮`)\n  }\n}\nclass WindowsButton{\n  render(){\n    console.log(`绘制windows的按钮`)\n  }\n}\nlet windowsFactory=new WindowsFactory();\nwindowsFactory.createIcon().render();\nwindowsFactory.createButton().render();\n")])])]),t("p",[n._v("使用场景：工厂里有多种产品，而且生产过程都是一套一套的。")]),n._v(" "),t("h3",{attrs:{id:"总结工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结工厂模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 总结工厂模式")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("简单工厂")]),n._v(" "),t("p",[n._v("一般就是一个函数返回产品的实例")])]),n._v(" "),t("li",[t("p",[n._v("工厂方法模式")]),n._v(" "),t("p",[n._v("多了工厂类，要想创建产品，需要先创建此工厂的实例，再通过这个工厂返回产品实例")])]),n._v(" "),t("li",[t("p",[n._v("抽象工厂模式")]),n._v(" "),t("p",[n._v("前两种只能创建一种产品，这种一个工厂可批量创建产品")])])]),n._v(" "),t("blockquote",[t("p",[n._v("实际工作中第一种用的最多，2、3种很少见到和用到。")])]),n._v(" "),t("h2",{attrs:{id:"单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 单例模式")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//es6的单例写法\nclass Window{\n  constructor(name){\n    this.name=name;\n  }\n  static getInstance(){\n    if(!this.instance){\n      this.instance=new Window();\n    }\n    return this.instance;\n  }\n}\n//Window.getInstance()是类上的方法，只可以通过类来访问，不能通过实例来访问\n\n//es5的单例写法\nfunction Window(name){\n  this.name=name;\n}\nWindow.prototype.getName=function(){//这是实例可访问的方法\n  return this.name;\n}\nWindow.getInstance=(function(){//通过闭包实现只能通过Window.getInstance访问的方法\n  let instance;\n  return function(name){\n    if(!instance){\n      instance=new Window(name);\n    }\n    return instance;\n  }\n}){};\nlet w1=Window.getInstance();\nlet w2=Window.getInstance();\n")])])]),t("p",[t("strong",[n._v("两个问题")])]),n._v(" "),t("ol",[t("li",[t("p",[n._v("客户端 就是使用这个类的使用者必须知道这是一个单例的类，必须主动调用Instance方法")])]),n._v(" "),t("li",[t("p",[n._v("并不能真正阻止客户端直接new Window")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let w3=new Window();\nlet w4=new Window();\n")])])])])]),n._v(" "),t("p",[t("strong",[n._v("解决问题")])]),n._v(" "),t("p",[n._v("能够直接new Window，并且是个单例的。")]),n._v(" "),t("ol",[t("li",[n._v("透明单例：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let Window=(function(){\n  let window;\n  let Window=function(name){\n    if(window){\n      return window;\n    }else{\n      this.name=name;\n      return (window=this);\n    }\n  }\n  return Window;\n})();\n//new 关键字 创建一个对象，this指向这个对象，执行代码，返回this\nlet w1=new Window();\nlet w2=new Window();\nconsole.log(w1===w2);\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[n._v("单例改进")]),n._v(" "),t("p",[n._v("透明单例违反了单一职责原则，应该把类的实例的创建逻辑和单例逻辑分开")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Window(name){\n  this.name=name;\n}\nWindow.prototype.getName=function(){\n  console.log(this.name);\n}\nlet CreateWindow=(function(){\n  let instance;\n  return function(name){\n    if(!instance){\n      instance=new Window(name);\n    }\n    return instance;\n  }\n})();\nlet w1=new CreateSingle('zfpx1');//加不加new一样\nlet w2=new CreateSingle('zfpx2');\nconsole.log(w1===w2)\n")])])])]),n._v(" "),t("li",[t("p",[n._v("单例改进")]),n._v(" "),t("p",[n._v("因为new Window(name)写死了，不能直接添加其他的构造函数的单例")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Window(name){\n  this.name=name;\n}\nWindow.prototype.getName=function(){\n  console.log(this.name);\n}\nfunction Dialog(title,content){\n  this.title=title;\n  this.content=content;\n}\nlet CreateSingle=function(Constructor){\n  let instance;\n  return function(name){\n    if(!instance){\n    \tConstructor.apply(this,arguments);//让Constructor执行时里面的this指向执行CreateSingle时new出来的对象\n    \tObject.setPrototypeOf(this,Constructor.prototype);\n    \t//这句是this.__proto__=Constructor.prototype的简写\n    \t//如果不添加这句，w1就无法访问到Window原型上的getName方法，因为this的原型指向Function.prototype,即原型继承\n      instance=this;\n      //或者省略以上改成一句instance=new Constructor(...arguments);也可以\n    }\n    return instance;\n  }\n};\nlet createWindow=CreateSingle(Window);\nlet w1=createWindow('zfpx1');//无论是new还是直接调用，都会创建一个this指针\nlet w2=createWindow('zfpx2');\nconsole.log(w1===w2)//true\n\nlet createDialog=CreateSingle(Dialog);\nlet w1=createDialog('zfpx1');\nlet w2=createDialog('zfpx2');\nconsole.log(w1===w2)//true\n")])])])]),n._v(" "),t("li",[t("p",[n._v("命名空间(单例的一种)")]),n._v(" "),t("p",[n._v("能解决：")]),n._v(" "),t("ul",[t("li",[n._v("变量名冲突")]),n._v(" "),t("li",[n._v("复杂层次对象的可读性要求")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//例如：jquery并没有把变量都声明在window上，而是都挂在$对象 JQuery\n$.get()\n$.post()\n$.ajax()\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let $={};\n$.define=function(namespace,fn){\n  let namespaces=namespace.split('.');\n  let fnName=namespaces.pop();\n  let current=$;\n  for(let i=0;i<namespaces.length;i++){\n    let namespace=namespaces[i]//dom\n    if(!current[namespace]){\n      current[namespace]={};//{dom:{}}\n    }\n    current=current[namespace];\n  }\n  current[fnName]=fn;\n}\n$.define('dom.class.addClass',function(){\n  console.log('dom.class.addClass');\n});\n$.define('dom.attr',function(){\n  console.log('dom.attr');\n})\n$.define('string.trim',function(){\n  console.log('string.trim');\n})\n$.define('event.preventDefault',function(){\n  console.log('event.preventDefault');\n})\n")])])]),t("p",[t("strong",[n._v("应用场景")])]),n._v(" "),t("ol",[t("li",[t("p",[n._v("jQuery")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("if(window.jQuery!=null){\n  return window.jQuery;//一个页面只会有一个jquery实例\n}else{\n  //init~~~~~~\n}\n")])])])]),n._v(" "),t("li",[t("p",[n._v("模态窗口")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<button id="show-btn">显示登录框</button>\n<button id="hide-btn">隐藏登录框</button>\n<script>\n\tclass Login{\n    constructor(){\n      this.element=document.createElement(\'div\');\n      this.element.innerHTML={\n        `\n        用户名 <input name="username"/>\n        密码 <input name="password"/>\n        <input type="submit" value="登录"/>\n        `\n      }\n      this.element.style.cssText=`width:100px;height:100px;position:absolute;left:50%;top:50%;margin-top:-50px;margin-left:-50px; display:none;`\n      document.body.appendChild(this.element);\n    }\n    show(){\n      this.element.style.display=\'block\';\n    }\n    hide(){\n      this.element.style.display=\'none\';\n    }\n    static getInstance(){\n      if(!this.instance){\n        this.instance=new Login();\n      }\n      return this.instance;\n    }\n\t}\n\tdocument.getElementById("show-btn).addEventListener(\'click\',function(){\n    Login.getInstance.show();\n\t})\n\tdocument.getElementById("hide-btn).addEventListener(\'click\',function(){\n    Login.getInstance.hide();\n\t})\n<\/script>\n')])])])]),n._v(" "),t("li",[t("p",[n._v("Redux 整个应用只有一个仓库，整个仓库只有一个状态state")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function createStore(reducer){\n  let state;\n  let listeners=[];\n  function subscribe(listener){\n    listeners.push(listener);\n  }\n  function getState(){\n    return state;\n  }\n  function dispatch(action){\n    state=reducer(state,action);\n  }\n  return{\n    getState,\n    dispatch,\n    subscribe\n  }\n}\nlet reducer=function(){}\nlet store=createStore(reducer)\n")])])])]),n._v(" "),t("li",[t("p",[n._v("数据库连接池")]),n._v(" "),t("p",[n._v("本地创建与服务器数据库连接，取出数据后销毁。")]),n._v(" "),t("p",[n._v("连接池创建固定连接，省去创建和销毁的时间")])]),n._v(" "),t("li",[t("p",[n._v("缓存")]),n._v(" "),t("p",[n._v("缓存是为了提高性能的")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let express=require('express');\nlet bodyParser=require('body-parser');\nlet fs=require('fs');\nlet app=express();\napp.use(bodyParser.urlencoded({extended:true}))\napp.use(bodyParser.json())\nlet cache={};//缓存\n//返回某个用户的详情\napp.get('/user/:id',function(){\n  let id=req.params.id;\n  let user=cache[id];\n  if(uesr){\n    res.json(user);\n  }else{\n    fs.readFile(`./users/${id}.json`,'utf8',function(err,data){\n      let user=JSON.parse(data);\n      cache[id]=user;\n      res.json(user);\n    })\n  }\n  \n})\n//写入某个用户详情\napp.get('/user',function(req,res){\n  let user=req.body;//{id:1,name:'zfpx1',age:9}\n  fs.writeFile(`./users/${user.id}.json`,JSON.stringify(user),function(err){\n    res.json(user);\n  })\n})\napp.listen(8080);\n")])])])]),n._v(" "),t("li",[t("p",[n._v("LRU缓存")]),n._v(" "),t("p",[n._v("用一个数组来存储数据，给每一个数据项标记一个访问时间戳")]),n._v(" "),t("p",[n._v("每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，并将新数据项的时间戳设置为0并插入到数组中")]),n._v(" "),t("p",[n._v("每次访问数组中的数据项的时候，将被访问的数据项的时间戳置为0")]),n._v(" "),t("p",[n._v("当数组空间已满时，将时间戳最大的数据项淘汰")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class LRUCache{\n  constructor(capacity){\n    this.capacity=capacity;\n    this.members=[];\n  }\n  put(key,value){\n  \tlet oldestAge=-1;\n  \tlet oldestIndex=-1;\n    for(let i=0;i<this.member.length;i++){\n      let member=this.members[i];\n      if(member.age>oldestAge){\n        oldestAge=member.age;\n      \toldestIndex=i;\n      }\n      member.age++;\n    }\n    if(this.member.length>=this.capacity){\n      this.members.splice(oldestIndex,1);\n    }\n    this.members.push({key,value,age:0})\n  }\n  get(key){\n    for(let i=0;i<this.members.length;i++){\n      let member=this.members[i];//{key,value,age}\n      if(member.key===key){\n        member.age=0;\n        return member.value;\n      }\n    }\n    return -1;\n  }\n}\nlet cache=new LRUCache(3);\ncache.put('1','1');\ncache.put('2','2');\ncache.put('3','3');\nconsole.log(cache.get('2'))\n")])])])])]),n._v(" "),t("h2",{attrs:{id:"适配器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 适配器模式")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//适配器\nclass Power{\n  charge(){\n    return '220v';\n  }\n}\nclass Adaptor{\n  constructor(power){\n    this.power=power;\n  }\n  charge(){//此处可以改为xxx任意名字\n    let v=this.power.charge;\n    return `${v}=>12v`;\n  }\n}\nclass Client{\n  constructor(){\n    this.adaptor=new Adaptor();\n  }\n  use(){\n    console,log(this.adaptor.charge())\n  }\n}\nlet client=new Client();\nclient.use();\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//参数的适配\n//返回值的适配\nfunction ajax(options){\n  let defaultOptions={\n    method:'GET',\n    dataType:'json'\n  }\n  for(let attr in options){\n    defaultOptions[attr]=options[attr]||defaultOptions[attr];//参数适配\n  }\n  console.log(defaultOptions);\n}\nfunction transform(str){\n  return JSON.parse(str)\n}\najax({\n  url:'http://www.baidu.com',\n  method:'POST',\n  success(str){\n    //服务器返回的是JSON字符串\n    let result=transform(str)//返回值适配\n  }\n})\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//串行连续的读取三个文件的内容\nconst fs=require('fs');\nfunction promisify(fn){\n  return function(...args){\n    return new Promise(function(resolve,reject){\n      fn(...args,function(err,data){\n        if(err){\n          reject(err);\n        }else{\n          resolve(data)\n        }\n      })\n    })\n  }\n}\nlet readFile=promisify(fs.readFile);//需要promise时适配一个promise\n(awync function read(){\n  let one=await readFile('1.txt','utf8');\n  let two=await readFile('2.txt','utf8');\n  let three=await readFile('3.txt','utf8');\n  console.log(one,two,three)\n}){}();\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//需要修改项目中所有的jquery方法为fetch\nwindow.$={//适配了原来所有的$.ajax，并且使用了fetch（老用法适配新用法）\n  ajax(options){\n    return fetch(options.url,{\n      method:options.type||'GET',\n      body:JSON.stringify(options.data||{})\n    }).then(response=>response.json());\n  }\n}\n$.ajax({\n  url,\n  type:'POST',\n  dataType:'json',\n  data:{id:1}\n}).then(function(data){\n  console.log(data);\n})\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//Vue中使用案例\n<body>\n\t<div id='root'>\n\t\t<p>{{name}}</p>\n\t\t<p>{{upperName}}</p>\n\t</div>\n\t<script>\n\t\tlet vm=new Vue({\n      el:'#root',\n      data:{\n        name:'zfpx'\n      },\n      computed:{\n        upperName(){\n          return this.name.toUpperCase();//老字符串适配成一个新的字符串\n        }\n      }\n\t\t})\n\t<\/script>\n</body>\n")])])]),t("h2",{attrs:{id:"装饰器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 装饰器模式")]),n._v(" "),t("p",[n._v("面向切面编程")]),n._v(" "),t("p",[n._v("给一个类增加功能，但不会改变类的实质，只是修饰作用。它比适配器模式更强大。他修饰的方法必须同名。")]),n._v(" "),t("p",[n._v("是将一个对象嵌入另一个对象之中，实际上相当于这个对象被另一个对象包装起来，形成一条包装链。请求随着这条链条依次传递到所有的对象，每个对象有处理这个请求的机会。")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Duck{\n  constructor(name){\n    this.name=name;\n  }\n  eat(food){\n    console.log(`吃${food}`)\n  }\n}\nclass TangDuck{\n  constructor(name){\n    this.duck=new Duck(name)\n  }\n  eat(food){//必须同名,修饰上面的同名方法\n    this.duck.eat(food);\n    console.log('谢谢');\n  }\n}\nlet t=new TangDuck();\nt.eat('苹果');\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//装饰器模式有时候会优于继承\nclass Coffee{\n  make(water){\n    return `${water}+咖啡`;\n  }\n  cost(){\n    return 10;\n  }\n}\nclass MilkCoffee{\n  constructor(parent){\n    this.parent=parent;\n  }\n  make(water){\n    return `${this.parent.make(water)+奶}`;\n  }\n  cost(){\n    return `${this.parent.cost()+2}`;\n  }\n}\nclass SugarCoffee{\n  constructor(parent){\n    this.parent=parent;\n  }\n  make(water){\n    return `${this.parent.make(water)+糖}`;\n  }\n}\nlet coffee=new Coffee();\nlet sugarCoffee=new sugarCoffee(coffee);\nlet milkCoffee=new MilkCoffee(sugarCoffee);\nmilkCoffee.make('水')\n")])])]),t("p",[t("strong",[n._v("AOP:")])]),n._v(" "),t("p",[n._v("AOP就是在函数执行之前或之后添加一些额外的逻辑，而不需要修改函数原来的功能。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Function.prototype.before=function(beforeFn){\n  let _this=this;\n  return function(){\n    beforeFn.apply(this,arguments);//继承beforeFn，调用beforeFn\n    _this.apply(this,arguments);//调用函数\n  }\n}\nFunction.prototype.after=function(afterFn){\n  let _this=this;\n  return function(){\n    _this.apply(this,arguments);//调用函数\n    afterFn.apply(this,arguments);//继承afterFn，调用afterFn\n  }\n}\nfunction buy(money,goods){\n  console.log(`花${money}元买${goods}`);\n}\nbuy=buy.before(function(){\n  console.log('向媳妇申请一块钱');\n})\nbuy=buy.after(function(){\n  console.log('向媳妇归还两毛钱');\n})\nbuy(0.8,'盐')；\n\n")])])]),t("p",[t("strong",[n._v("应用场景")])]),n._v(" "),t("ol",[t("li",[n._v("埋点：")])]),n._v(" "),t("p",[n._v("埋点分析，是网站分析的一种常用的数据采集方法。")]),n._v(" "),t("p",[n._v("ajax的请求拦截，koa中间件，redux中间件都是基于装饰器实现的。")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("服务器端埋点")])]),n._v(" "),t("li",[t("p",[n._v("客户端埋点")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("代码埋点(写死)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//4.html\n<body>\n\t<button data-name=\"watermelon\" id=\"watermelon\">西瓜</button>\n\t<button data-name=\"apple\" id=\"apple\">苹果</button>\n\t<script>\n\t\tlet watermelon=document.getElementById('watermelon');\n\t\tlet apple=document.getElementById('apple');\n\t\tfunction click(){\n      console.log('你点击了'+this.dataset.name);\n      let img=new Image();\n      img.src='http://localhost:3000/report?name='+this.dataset.name;\n\t\t}\n\t\tArray.from(document.querySelectorAll('button')).forEach(button=>{\n      button.addEventListener('click',click);\n\t\t})\n\t<\/script>\n</body>\n//report.js\nlet express=require('express');\nlet app=express();\nlet goods={};\napp.get('/report',function(req,res){\n  let name=req.query.name;\n  if(goods[name]){\n    goods[name]++;\n  }else{\n    goods[name]=1\n  }\n  console.log('name',name);\n  res.json(goods);\n})\napp.get('/',function(req,res){\n  res.json(goods);\n})\napp.listen(3000);\n")])])])]),n._v(" "),t("li",[t("p",[n._v("自动化埋点(AOP，推荐)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//点击统计\n//4.html\n<body>\n\t<button data-name=\"watermelon\" id=\"watermelon\">西瓜</button>\n\t<button data-name=\"apple\" id=\"apple\">苹果</button>\n\t<script>\n\t\tlet watermelon=document.getElementById('watermelon');\n\t\tlet apple=document.getElementById('apple');\n\t\tFunction.prototype.after=function(afterFn){\n      let _this=this;\n      return function(){\n        _this.apply(this,arguments);//调用函数\n        afterFn.apply(this,arguments);//继承afterFn，调用afterFn\n      }\n    }\n\t\tfunction click(){\n      console.log('你点击了'+this.dataset.name);\n\t\t}\n\t\tclick=click.after(function(){\n      let img=new Image();\n      img.src='http://localhost:3000/report?name='+this.dataset.name;\n\t\t})\n\t\tArray.from(document.querySelectorAll('button')).forEach(button=>{\n      button.addEventListener('click',click);\n\t\t})\n\t<\/script>\n</body>\n//report.js\nlet express=require('express');\nlet app=express();\nlet goods={};\napp.get('/report',function(req,res){\n  let name=req.query.name;\n  if(goods[name]){\n    goods[name]++;\n  }else{\n    goods[name]=1\n  }\n  console.log('name',name);\n  res.json(goods);\n})\napp.get('/',function(req,res){\n  res.json(goods);\n})\napp.listen(3000);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//2.表单校验，避免校验逻辑和表单提交逻辑合在一起\n<body>\n\t\n\t\t用户名 <input type=\"text\" id=\"username\"/>\n\t\t密码 <input type=\"text\" id=\"password\"/>\n\t\t<button id=\"submit-btn\">提交</button>\n\t\n\t<script>\n\t\tFunction.prototype.before=function(beforeFn){\n      let _this=this;\n      return function(){\n        let ret=beforeFn.apply(this,arguments);//继承beforeFn，调用beforeFn\n        if(ret){\n          _this.apply(this,arguments);//调用函数\n        }\n      }\n    }\n\t\tfunction submit(){\n      console.log('提交表单')\n\t\t}\n\t\tlet checkUserNameNotNull=submit.before(function(){\n      let username=document.getElementById('username').value;\n\t\t  if(username.length<6){\n        return alert('用户名长度不够')\n\t\t  }\n\t\t  return true;\n\t\t})\n\t\tcheckUserNameMoreThanSix=checkUserNameNotNull.before(function(){\n      let username=document.getElementById('username').value;\n\t\t  if(!username){\n        return alert('用户名没有输入')\n\t\t  }\n\t\t  return true;\n\t\t})\n\t\tdocument.getElementById('submit-btn').addEventListener('click',submit)\n\t<\/script>\n</body>\n")])])])]),n._v(" "),t("li",[t("p",[n._v("第三方实现 百度统计，友盟等")])])])])]),n._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[n._v("decorator(node不认识，需要babel转译)")]),n._v(" "),t("p",[n._v("webpack要支持decorators要安装如下插件：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//babel-plugin-proposal-decorators\n"plugins":[\n  ["@babel/plugin-proposal-decorator",{"legacy":true}],//装饰器\n  ["@babel/plugin-proposal-class-properties",{"loose":true}]//类装饰器\n]\n')])])]),t("p",[n._v("类装饰器")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@testable\nclass Person{\n  \n}\nfunction testable(target){//对类进行装饰\n  target.testalbe=true;\n}\nconsole.log(Person.testable);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//react以前的例子（现在已废掉）\nlet Hooks={\n  componentWillMount(){\n    console.log('componentWillMount');\n  },\n  componentDidMount(){\n    console.log('componentDidMount');\n  }\n}\nfunction mixins(...others){\n  return function(target){\n     Object.assign(target.prototype,...others);\n  }\n}\n@mixings(Hooks)\nclass Component{\n  \n}\nlet c=new Component();\nconsole.log(c)\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//方法decorators,用函数装饰类上的属性\nfunction readonly(target,attr,descriptor){//目标，属性名，属性描述器\n  descriptor.writable=false;\n}\nclass Circle{\n  @readonly\n  PI=3.14\n}\nlet c=new Circle();\nc.PI=300;\nconsole.log(c.PI)\n\n//在一个老的逻辑之前执行一段逻辑\nfunction logger(target,attr,descriptor){\n  let oldVal=descriptor.value;\n  descriptor.value=function(...args){\n    console.log(`参数：${args}`);\n    return oldVal(...args);\n  }\n}\nclass Caculator{\n  @logger\n  sum(a,b){\n    return a+b;\n  }\n}\nlet c=new Caculator();\nlet ret=c.sum(1,2);\nconsole.log(ret);\n\n")])])])])]),n._v(" "),t("h2",{attrs:{id:"代理模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 代理模式")]),n._v(" "),t("p",[n._v("由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这两个对象之间起到中介作用")]),n._v(" "),t("p",[n._v("在使用者和目标对象之间加一个代理对象，通过代理可以实现控制")]),n._v(" "),t("p",[n._v("例如，VPN")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/VPN.png",alt:""}})]),n._v(" "),t("p",[n._v("中国网站有GFW防火墙，所以无法访问谷歌服务器，需要买一个中间服务器，创建proxy代理，通过它来访问谷歌。")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//1.google.js\nclass Google{\n  get(url){\n    return google;\n  }\n}\nclass Proxy{\n  constructor(){\n    this.google=new Google();\n  }\n  get(url){\n    return this.google.get(url);\n  }\n}\nlet proxy=new Proxy();\nlet result=proxy.get('http://www/google.com');\nconsole.log(result);//google\n")])])]),t("p",[t("img",{attrs:{src:"/img/%E5%85%AC%E5%8F%B8%E5%86%85%E9%83%A8%E6%9C%8D%E5%8A%A1%E5%99%A8.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//2.cache.js\n//n=4 1!+2!+3!+4\n//修改前，\nfunction multi(n){\n  if(n<=1){\n    return 1;\n  }else{\n    return n*multi(n-1)\n  }\n}\nlet sum=function(n){\n  let result=0;\n  for(let i=1;i<=n;i++){\n    result+multi(n)\n  }\n  return result;\n}\nconsole.time('cost');\nconsole.log(sum(3))\nconsole.time('cost');\n\n//修改后\nlet sum=(function(){\n  let cache={};//缓存每次的计算结果\n  function multi(n){\n    if(n<=1){\n      return 1;\n    }else{\n      return n*(cache[n-1]||multi(n-1))\n    }\n  }\n  return function(n){\n    let result=0;\n    for(let i=1;i<n;i++){\n      let ret=multi(i);\n      cache[i]=ret;//从1开始，每个阶乘都记录在了缓存中\n      result+=ret;\n    }\n    return result;\n  }\n})();\nconsole.time('cost');\n")])])]),t("p",[t("strong",[n._v("proxy函数")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//$.proxy绑定this。通过$.proxy生成新的函数，内部调用原始函数\n<body>\n\t<button id='clickMe'>点我</button>\n\t<script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"><\/script>\n\t<script>\n\t\tdocument.getElementById('clickMe').addEventListener('click',function(){\n      setTimeout($.proxy(function(){\n        $(this).css('color','red');\n      },this),3000)//proxy绑定this到this,否则是window。原理：setColor=setColor.bind(this)\n\t\t})\n\t<\/script>\n</body>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//自己写一个$.proxy\ndocument.getElementById('clickMe').addEventListener('click',function(){\n  function setColor(){\n    $(this).css('color','red');\n  }\n  function proxy(fn,context){\n    return function(){\n      fn.apply(context,arguments);\n    }\n  }\n  setColor=proxy(setColor,this);\n  setTimeout(setColor,3000);\n});\n")])])]),t("p",[t("strong",[n._v("Proxy(es6)")])]),n._v(" "),t("ul",[t("li",[n._v("Proxy 用于修改某些操作的默认行为")]),n._v(" "),t("li",[n._v('Proxy可以理解成，在目标对象之前架设一层"拦截"，外界对该对象的访问，都必须先通过这层拦截，因此提供了对外界访问的过滤和改写。由它来代理某些操作，即代理器')]),n._v(" "),t("li",[n._v("Vue3.0是用Proxy实现的。Vue2.0是用Object.defineProperty实现的。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let wangy={\n  name:\"王燕\",\n  age:31,\n  height:165\n}\nlet wangMaMa = new Proxy(wangy,{\n  get(target,key){\n    if(key=='age'){\n      return target.age-2;\n    }else if(key==='height'){\n      return target.height+3;\n    }else{\n      return target[key];\n    }\n  },\n  set(target,key,val){\n    if(key=='boyfriend'){\n      let boyfriend=val;\n      if(boyfriend.age>40){\n        throw Error('太老了');\n      }else if(boyfriend.salary<20000){\n        throw Error('太穷了');\n      }else{\n        target[key]=val;\n      }\n    }\n  }\n})\nconsole.log(wangMaMa.age)\nconsole.log(wangMaMa.height)\nconsole.log(wangMaMa.name)\nwangMaMa.boyfriend={age:12,salary:8};\n\n")])])]),t("blockquote",[t("p",[n._v("代理模式和适配器模式区别？")]),n._v(" "),t("p",[n._v("适配器提供不同接口，代理模式提供一模一样的接口")])]),n._v(" "),t("blockquote",[t("p",[n._v("代理模式和装饰器模式的区别？")]),n._v(" "),t("p",[n._v("装饰器模式原来的功能不变还可以使用，代理模式改变原来的功能")])]),n._v(" "),t("p",[t("strong",[n._v("事件委托")])]),n._v(" "),t("p",[n._v("addEventListener的第三个参数，true为捕获，false为冒泡")]),n._v(" "),t("p",[n._v("事件委托也是一种代理模式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<body>\n\t<ul>\n\t\t<li>1</li>\n\t\t<li>2</li>\n\t\t<li>3</li>\n\t</ul>\n\t<script>\n\t\tlet ulist=document.getElementById('ulist');\n\t\tulist.addEventListener('click',function(event){\n\t\t\tif(event.target.nodetype==='li'){\n        console.log(event.target.innerHTML);\n\t\t\t}\n\t\t})\n\t<\/script>\n</body>\n")])])]),t("p",[t("strong",[n._v("图片懒加载")])]),n._v(" "),t("p",[n._v("不改变原有代码，且API不变，增强了额外的功能")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//app.js\nlet express=require('express')\nlet path=require('path')\napp=express();\napp.use(express.static(__dirname));\napp.get('/images/:name',function(req,res){\n\tsetTimeout(function(){\n    res.sendFile(path.join(__dirname,req.path));\n\t},2000)\n  \n})\napp.get('/loading.gif',function(req,res){\n  res.sendFile(path.resolve('loading.gif'));\n})\napp.listen(3000);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//index.html\n<body>\n\t<ul id='menu'>\n\t\t<li data-src='/images/bg1.jpg'>图片1</li>\n\t\t<li data-src='/images/bg2.jpg'>图片2</li>\n\t</ul>\n\t<div id\"bgimg\"></div>\n\t<script>\n\t\tlet bgimg=document.getElementById('bgimg');\n\t\tlet menu=document.getElementById('menu');\n\t\tlet Background=(function(){\n      let img=new Image();\n      bgimg.appendChild(img);\n      return {\n        setSrc(src){\n          img.src=src;\n        }\n      }\n\t\t})()\n\t\tmenu.addEventListener('click',function(event){\n      let src=event.darget.dataset.src;\n      Background.setSrc(src);\n\t\t})\n\t<\/script>\n</body>\n\n//使用代理模式改进\n//index.html\n<body>\n\t<ul id='menu'>\n\t\t<li data-src='/images/bg1.jpg'>图片1</li>\n\t\t<li data-src='/images/bg2.jpg'>图片2</li>\n\t</ul>\n\t<div id\"bgimg\"></div>\n\t<script>\n\t\tlet bgimg=document.getElementById('bgimg');\n\t\tlet menu=document.getElementById('menu');\n\t\tlet Background=(function(){\n      let img=new Image();\n      bgimg.appendChild(img);\n      return {\n        setSrc(src){\n          img.src=src+'?ts='+Date.now();\n        }\n      }\n\t\t})()\n\t\t//不改变原有代码，且API不变，增强了额外的功能\n\t\t---------------------修改2------------------------\n\t\tlet ProxyBackground=(function(){\n      let img=new Image();\n      img.onload=function(){\n        Background.setSrc(this.src);\n      }\n      return {\n        setSrc(src){\n          Background.setSrc('/loading.gif');\n          img.src=src\n        }\n      }\n\t\t})()\n\t\t---------------------修改2------------------------\n\t\tmenu.addEventListener('click',function(event){\n      let src=event.darget.dataset.src;\n      --------修改1-----------\n      ProxyBackground.setSrc(src);//\n      --------修改1-----------\n\t\t})\n\t<\/script>\n</body>\n")])])])])]),n._v(" "),t("p",[t("strong",[n._v("防抖代理")])]),n._v(" "),t("p",[n._v("勾选后修改数据，有时候点击多了的时候，不需要发送那么多请求，而是等确定后再发送请求")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//app.js\nlet express=require('express')\nlet path=require('path')\napp=express();\napp.use(express.static(__dirname));\nlet todos=[\n  {id:1,text:'吃饭',completed:false},\n  {id:2,text:'睡觉',completed:false},\n  {id:3,text:'打豆豆',completed:false}\n]\napp.get('/todos'，function(req,res){\n  res.json(todos);\n})\napp.get('/toggle',function(req,res){\n  let ids=req.query.ids;\n  ids=ids.split(',').map(item=>parseInt(item));\n  todos=todos.map(function(todo){\n    if(ids.includes(todo.id)){\n      todo.completed=!todo.completed;\n    }\n    return todo;\n  });\n  res.json({code:0})\n})\napp.listen(3000);\n\n//index.html\n<ul id=\"todoApp\">\n\n</ul>\n<script>\n\tlet todoApp=document.getElementById('todoApp');\n\twindow.onload=function(){\n    fetch('/todos').then(res=>res.json()).then(function(todos){\n      todoApp.innerHTML=todos.map(item=>{\n        `<li>\n        \t<input value=\"${item.id}\" type=\"checkbox\" ${item.completed?\"checked\":\"\"}/>\n        \t${item.text}\n        </li>`\n      }).join('');\n    })\n\t}\n\tfunction toggle(id){\n    fetch(`/toggle?id=${id}`).then(res=>res.json()).then(function(result){\n      \n    })\n\t}\n\tlet lazyToggle=(function(){\n    let ids=[];\n    let timer;\n    return function(id){\n      ids.push(id);\n      if(!timer){\n        timer=setTimeout(function(){\n          toggole(ids.join(','));\n          ids=[];\n          clearTimeout(timer);\n          timer=null;\n        },2000);\n      }\n    }\n\t})();\n\ttodoApp.addEventListener('click',function(event){\n    let id=event.target.value;\n    lazyToggle(id);\n\t})\n<\/script>\n")])])]),t("h2",{attrs:{id:"外观模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外观模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 外观模式")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Sum{\n    sum(a,b) {\n        return a+b;\n    }\n}\nclass Minus{\n    minus(a,b) {\n        return a-b;\n    }\n}\nclass Multiply{\n    multiply(a,b) {\n        return a * b;\n    }\n}\nclass Calculator{\n    constructor() {\n        this.sumObj=new Sum();\n        this.minusObj=new Minus();\n        this.multiplyObj=new Multiply();\n    }\n    sum(...args) {\n        this.sumObj.sum(...args);\n    }\n    minus(...args) {\n        this.minusObj.minus(...args);\n    }\n    multiply(...args) {\n        this.multiplyObj.multiply(...args);\n    }\n}\nlet calculator=new Calculator();\ncalculator.sum(1,2);\ncalculator.minus(1,2);\ncalculator.multiply(1,2);\n")])])]),t("p",[t("strong",[n._v("场景")])]),n._v(" "),t("ul",[t("li",[n._v("为复杂的模块或子系统提供外界访问的模块")]),n._v(" "),t("li",[n._v("子系统相互独立")])]),n._v(" "),t("p",[n._v("redux")]),n._v(" "),t("p",[n._v("客户端和子模块得到了隔离，内部修改影响不到使用。")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/redux.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"观察者模式-监听模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式-监听模式","aria-hidden":"true"}},[n._v("#")]),n._v(" 观察者模式(监听模式)")]),n._v(" "),t("ul",[t("li",[n._v("被观察者供维护观察者的一系列方法")]),n._v(" "),t("li",[n._v("观察者提供更新接口")]),n._v(" "),t("li",[n._v("观察者把自己注册到被观察者里")]),n._v(" "),t("li",[n._v("在被观察者发生变化时候，调用观察者的更新方法")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Star{\n    constructor(name) {\n        this.name=name;\n        this.state='';\n        this.observers=[];\n    }\n    getState() {\n        return this.state;\n    }\n    setState(state) {\n        this.state=state;\n        this.notifyAllObservers();\n    }\n    attach(observer) {\n        this.observers.push(observer);\n    }\n    notifyAllObservers() {\n        this.observers.forEach(observer=>observer.update());\n    }\n}\nclass Fan{\n    constructor(name,star) {\n        this.name=name;\n        this.star=star\n        this.star.attach(this);\n    }\n    update() {\n        console.log(`我的明星喜欢${this.star.getState()}，我也喜欢`);    \n    }\n}\nlet star=new Star('angelbaby');\nlet fan1=new Fan('zhangsan',star);\nstar.setState('绿色');\n")])])]),t("p",[t("strong",[n._v("场景")])]),n._v(" "),t("ol",[t("li",[t("p",[n._v("事件绑定")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" <button id=\"btn\">click</button>\n    <script>\n        let btn = document.getElementById('btn');\n        btn.addEventListener('click',()=>{alert(1)});\n        btn.addEventListener('click',()=>{alert(2)});\n        btn.addEventListener('click',()=>{alert(3)});\n    <\/script>\n")])])])]),n._v(" "),t("li",[t("p",[n._v("Promise")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Promise{\n    constructor(fn) {\n        this.callbacks=[];\n        let resolve=() => {\n            this.callbacks.forEach(callback => callback())\n        };\n        fn(resolve);\n    }\n    then(callback) {\n        this.callbacks.push(callback);\n    }\n}\nlet promise=new Promise(function (resolve,reject) {\n    setTimeout(function () {\n        resolve(100);\n    },1000);\n});\npromise.then(() => console.log(1));\npromise.then(() => console.log(2));\n")])])])]),n._v(" "),t("li",[t("p",[n._v("JQuery.Callbacks")]),n._v(" "),t("p",[n._v("Callbacks对象其实就是一个函数队列，获得Callbacks对象之后 ，就可以向这个集合中增加或者删除函数。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<script src="http://libs.baidu.com/jquery/2.0.0/jquery.min.js"><\/script>\n<script>\n window.jQuery={\n     Callbacks(){\n       let observers = [];\n       function add(observer){\n           observers.push(observer);\n       }\n       function remove(observer){\n           let index = observers.indexOf(observer);\n           if(index != -1)\n             observers.splice(index,1);\n       }\n       function fire(){\n           observers.forEach(item=>item());\n       }\n       return {\n           add,\n           remove,\n           fire\n       }\n   }\n }\n let callbacks = jQuery.Callbacks();\n\n let a1= ()=>alert(1);\n let a2= ()=>alert(2);\n let a3= ()=>alert(13);\n callbacks.add(a1);\n callbacks.add(a2);\n callbacks.add(a3);\n callbacks.remove(a3);\n callbacks.fire();\n<\/script>\n')])])])]),n._v(" "),t("li",[t("p",[n._v("events")]),n._v(" "),t("p",[n._v("node库---自定义事件，来自events模块。可以实现监听事件，触发事件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const EventEmitter=require('events');\nconst util=require('util');\nlet eve=new EventEmitter();\neve.on('click',function (name) {\n    console.log(1,name);\n});\neve.on('click',function (name) {\n    console.log(2,name);\n});\neve.emit('click','zfpx');\n\n//使用util.inherits继承EventEmitter\nfunction Bell(){\n  \n}\nutil.inherits(Bell,EventEmitter);\nlet bell=new Bell();\nbell.on('click',function(name){\n  console.log(\"同学们进入\")\n})\n\n")])])])]),n._v(" "),t("li",[t("p",[n._v("stream文件流")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let fs=require('fs');\nlet rs=fs.createReadStream('./1.txt');\nrs.on('data',function (data) {\n    console.log(data)\n});\nrs.on('end',function () {\n    console.log('end')\n});\n")])])])]),n._v(" "),t("li",[t("p",[n._v("http服务器")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let http=require('http');\nlet server = http.createServer();\nserver.on('request',(req,res)=>{\n  req.on('data',function(data){\n      console.log(data)\n  });\n}));\n")])])])]),n._v(" "),t("li",[t("p",[n._v("生命周期函数")])]),n._v(" "),t("li",[t("p",[n._v("vue watch")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<body>\n<div id="root">\n      <p>FullName: {{fullName}}</p>\n      <p>FirstName: <input type="text" v-model="firstName"/></p>\n      <p>LastName: <input type="text" v-model="lastName"/></p>\n</div>\n<script src="https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.min.js"><\/script>\n<script>\nnew Vue({\n  el:\'#root\',\n  data: {\n    firstName:\'张\',\n    lastName: \'三\',\n    fullName:\'张三\'\n  },\n  watch: {\n    firstName(newName, oldName) {\n      this.fullName = newName + \' \' + this.lastName;\n    }\n  } \n})\n<\/script>\n')])])])]),n._v(" "),t("li",[t("p",[n._v("redux")])])]),n._v(" "),t("p",[t("strong",[n._v("观察者模式和发布订阅模式的区别？")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("观察者模式")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png",alt:""}})]),n._v(" "),t("ol",[t("li",[n._v("观察者和被观察者是耦合的")]),n._v(" "),t("li",[n._v("观察者的update动作是由被观察者来调用的")])])]),n._v(" "),t("li",[t("p",[n._v("发布订阅模式")]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Agency{\n    constructor() {\n        this._topics={};\n    }\n    // on addEventListener\n    subscribe(topic,listener) {\n        let listeners=this._topics[topic];\n        if (listeners) {\n            listeners.push(listener);\n        } else {\n            this._topics[topic]=[listener];\n        }\n    }\n    //emit\n    publish(topic) {\n        let listeners=this._topics[topic];\n        let args=Array.from(arguments).slice(1);\n        listeners.forEach(listener => listener(...args));\n    }\n}\nlet agent=new Agency();\nclass Landlord{\n    constructor(name) {\n        this.name=name;\n    }\n    lend(agent,area,money) {\n        agent.publish('house',area,money);\n    }\n}\n\nclass Tenant{\n    constructor(name) {\n        this.name=name;\n    }\n    rent(agent) {\n        agent.subscribe('house', (area,money)=> {\n            console.log(`有新房源了, ${area}平米, ${money}元`);\n        });\n    }\n}\nlet t1=new Tenant('房客1');\nlet t2=new Tenant('房客2');\nlet l1=new Landlord('房东1');\nt1.rent(agent);\nt2.rent(agent);\nl1.lend(agent,30,2000);\n")])])])]),n._v(" "),t("li",[t("p",[n._v("虽然两种模式都存在订阅者和发布者（观察者可认为是订阅者、被观察者可认为是发布者）")])]),n._v(" "),t("li",[t("p",[n._v("但是观察者模式是由被观察者调度的，而发布/订阅模式是统一由调度中心调的")])]),n._v(" "),t("li",[t("p",[n._v("所以观察者模式的订阅者与发布者之间是存在依赖的，而发布/订阅模式则不会。")])])])])}],!1,null,null,null);e.default=s.exports}}]);